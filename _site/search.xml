<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[用LaTeX画足球场与阵型]]></title>
      <url>/latex/2018/09/21/latex_football/</url>
      <content type="html"><![CDATA[<p><strong>This post is showing how to draw a football field in LaTeX. The contents are all unoriginal.本文展示如何用LaTeX画足球场。（非原创）</strong></p>

<hr />
<p>谷歌到的关于这个的结果很少，但还是得到了答案。没有专门的宏包来绘制这个东西，不过可以用tikz宏包。</p>

<h2 id="鸭子形状的球员">鸭子形状的球员</h2>
<p><img src="http://localhost:4000/assets//blog_images/duck_soccer1.png" width="600px" height="400px" /></p>
<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="na">[tikz,border=2mm]</span><span class="p">{</span>standalone<span class="p">}</span> 
<span class="k">\usetikzlibrary</span><span class="p">{</span>positioning, ducks<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>tikzducks<span class="p">}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\croacia</span><span class="p">}</span>[3]<span class="p">{</span>
<span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>#3<span class="p">}</span>, xscale=-.4, yscale=.4]
<span class="k">\duck</span>
<span class="k">\path</span><span class="na">[preaction={fill=red}, pattern=checkerboard, pattern color=white]</span> <span class="k">\duckpathjacket</span>;
<span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at ([xshift=5mm]wing) <span class="p">{</span>#1<span class="p">}</span>;
<span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (1.1,-.22) <span class="p">{</span>#2<span class="p">}</span>;
<span class="nt">\end{scope}</span>
<span class="p">}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\france</span><span class="p">}</span>[3]<span class="p">{</span>
<span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>#3<span class="p">}</span>, scale=.4]
<span class="k">\duck</span><span class="na">[jacket=blue]</span>
<span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at ([xshift=5mm]wing) <span class="p">{</span>#1<span class="p">}</span>;
<span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (1.1,-.22) <span class="p">{</span>#2<span class="p">}</span>;
<span class="nt">\end{scope}</span>
<span class="p">}</span>

<span class="k">\definecolor</span><span class="p">{</span>field<span class="p">}{</span>RGB<span class="p">}{</span>0,156,0<span class="p">}</span>

<span class="k">\newcommand\area</span><span class="na">[2]</span><span class="p">{</span>
<span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>(#1)<span class="p">}</span>, transform shape, rotate=#2]
<span class="k">\node</span><span class="na">[minimum width=.55cm,minimum height=1.832cm, anchor=west]</span> (small#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=1.65cm,minimum height=4.032cm, anchor=west]</span> (big#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=.244cm, minimum height=.732cm, anchor=east]</span> (goal#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[inner sep=.3mm, circle, fill=white]</span> (penalty#2) at (1.1,0) <span class="p">{}</span>;
    <span class="nt">\begin{scope}</span>
    <span class="k">\tikzset</span><span class="p">{</span>every path/.style=<span class="p">{}}</span>
    <span class="k">\clip</span> (big#2.south east) rectangle ++ (1,5); 
    <span class="k">\draw</span><span class="na">[white, very thick]</span> (penalty#2) circle (0.915cm);
    <span class="nt">\end{scope}</span>
<span class="nt">\end{scope}</span>
<span class="p">}</span>


<span class="nt">\begin{document}</span>
<span class="nt">\begin{tikzpicture}</span>
<span class="nt">\begin{scope}</span>[<span class="c">%    </span>
    every node/.style=<span class="p">{</span>draw=white, very thick, inner sep=0, outer sep=0<span class="p">}</span>,
   every path/.style=<span class="p">{</span>draw=white, very thick<span class="p">}</span>,
]
<span class="k">\fill</span><span class="na">[field]</span> (-1,-1) rectangle (13,10);
<span class="k">\node</span><span class="na">[minimum width=12cm, minimum height=9cm]</span> (contour) at (6,4.5) <span class="p">{}</span>;

<span class="c">%\draw (contour.south west) grid (contour.north east);</span>

<span class="c">% Center</span>
<span class="k">\draw</span> (contour.north) -- (contour.south);
<span class="k">\draw</span> (contour.center) circle (0.915cm);
<span class="k">\fill</span><span class="na">[white]</span> (contour.center) circle (.5mm);

<span class="c">% Areas</span>
<span class="k">\area</span><span class="p">{</span>contour.west<span class="p">}{</span>0<span class="p">}</span>
<span class="k">\area</span><span class="p">{</span>contour.east<span class="p">}{</span>180<span class="p">}</span>

<span class="c">% Corners</span>
<span class="k">\foreach</span> <span class="k">\corner</span> [count=<span class="k">\xi</span> starting from 0] in <span class="p">{</span>south west, south east, north east, north west<span class="p">}{</span>
    <span class="nt">\begin{scope}</span>[rotate around=<span class="p">{</span>90*<span class="k">\xi</span>:(contour.<span class="k">\corner</span>)<span class="p">}</span>]
        <span class="k">\draw</span> ([xshift=1mm]contour.<span class="k">\corner</span>) arc (0:90:1mm);
    <span class="nt">\end{scope}</span>
<span class="p">}</span>
<span class="nt">\end{scope}</span>

<span class="k">\croacia</span><span class="p">{</span>23<span class="p">}{</span>Subasic<span class="p">}{</span>(1.25,4.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>3<span class="p">}{</span>Strinic<span class="p">}{</span>(2.6,7.2)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>21<span class="p">}{</span>Vida<span class="p">}{</span>(2.3,5.3)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>6<span class="p">}{</span>Lovren<span class="p">}{</span>(2.3,2.9)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>2<span class="p">}{</span>Virsalijko<span class="p">}{</span>(2.6,1)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>11<span class="p">}{</span>Brozovic<span class="p">}{</span>(3.5,4.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>4<span class="p">}{</span>Perisic<span class="p">}{</span>(4.5,7.2)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>7<span class="p">}{</span>Rakitic<span class="p">}{</span>(4.5,5.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>10<span class="p">}{</span>Modric<span class="p">}{</span>(4.5,3)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>18<span class="p">}{</span>Rebic<span class="p">}{</span>(4.5,1)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>17<span class="p">}{</span>Mandzukic<span class="p">}{</span>(5.6,4.25)<span class="p">}</span>

<span class="k">\france</span><span class="p">{</span>1<span class="p">}{</span>Lloris<span class="p">}{</span>(10.75,4.25)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>2<span class="p">}{</span>Pavard<span class="p">}{</span>(9.5,7.2)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>4<span class="p">}{</span>Varane<span class="p">}{</span>(9.5,5.3)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>5<span class="p">}{</span>Umtiti<span class="p">}{</span>(9.5,2.9)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>21<span class="p">}{</span>Lucas<span class="p">}{</span>(9.5,1)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>13<span class="p">}{</span>Kante<span class="p">}{</span>(8.5,6)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>6<span class="p">}{</span>Pogba<span class="p">}{</span>(8.5,2.3)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>10<span class="p">}{</span>Mbappe<span class="p">}{</span>(7,7)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>7<span class="p">}{</span>Griezman<span class="p">}{</span>(7.8,4.25)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>14<span class="p">}{</span>Matuidi<span class="p">}{</span>(7,1.5)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>9<span class="p">}{</span>Giroud<span class="p">}{</span>(6.4,4.25)<span class="p">}</span>
<span class="nt">\end{tikzpicture}</span>
<span class="nt">\end{document}</span>
</code></pre></div></div>

<h2 id="正常外形的球员">正常外形的球员</h2>
<p>用的是<code class="highlighter-rouge">tikzpeople</code>.这个不太容易给克罗地亚的队服加上格子花纹了。
<img src="http://localhost:4000/assets//blog_images/soccer2.png" width="600px" height="400px" /></p>
<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="na">[tikz,border=2mm]</span><span class="p">{</span>standalone<span class="p">}</span> 
<span class="k">\usetikzlibrary</span><span class="p">{</span>positioning<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>tikzmarmots<span class="p">}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\croacia</span><span class="p">}</span>[3]<span class="p">{</span> <span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>#3<span class="p">}</span>, scale=.5] <span class="k">\marmot</span> <span class="k">\path</span><span class="na">[preaction={fill=red}, pattern=checkerboard, pattern color=white]</span> (1.35,0.71) .. controls (1.35,0.41) and (1.17,0.37) .. (0.92,0.37) .. controls (0.69,0.37) and (0.48,0.41) .. (0.48,0.71) .. controls (0.48,1.01) and (0.67,1.26) .. (0.91,1.26) .. controls (1.15,1.26) and (1.3 5,1.01) .. (1.35,0.71) -- cycle; <span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (0.95,0.82) <span class="p">{</span>#1<span class="p">}</span>; <span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (1.1,-.22) <span class="p">{</span>#2<span class="p">}</span>; <span class="nt">\end{scope}</span> <span class="p">}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\france</span><span class="p">}</span>[3]<span class="p">{</span> <span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>#3<span class="p">}</span>, scale=.5] <span class="k">\marmot</span><span class="na">[body=brown!80!yellow]</span> <span class="k">\path</span><span class="na">[fill=blue]</span> (1.35,0.71) .. controls (1.35,0.41) and (1.17,0.37) .. (0.92,0.37) .. controls (0.69,0.37) and (0.48,0.41) .. (0.48,0.71) .. controls (0.48,1.01) and (0.67,1.26) .. (0.91,1.26) .. controls (1.15,1.26) and (1.3 5,1.01) .. (1.35,0.71) -- cycle; <span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (0.95,0.82) <span class="p">{</span>#1<span class="p">}</span>; <span class="k">\node</span><span class="na">[font=\sffamily\bfseries]</span> at (1.1,-.22) <span class="p">{</span>#2<span class="p">}</span>; <span class="nt">\end{scope}</span> <span class="p">}</span>
<span class="k">\definecolor</span><span class="p">{</span>field<span class="p">}{</span>RGB<span class="p">}{</span>0,156,0<span class="p">}</span>

<span class="k">\newcommand\area</span><span class="na">[2]</span><span class="p">{</span>
<span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>(#1)<span class="p">}</span>, transform shape, rotate=#2]
<span class="k">\node</span><span class="na">[minimum width=.55cm,minimum height=1.832cm, anchor=west]</span> (small#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=1.65cm,minimum height=4.032cm, anchor=west]</span> (big#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=.244cm, minimum height=.732cm, anchor=east]</span> (goal#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[inner sep=.3mm, circle, fill=white]</span> (penalty#2) at (1.1,0) <span class="p">{}</span>;
    <span class="nt">\begin{scope}</span>
    <span class="k">\tikzset</span><span class="p">{</span>every path/.style=<span class="p">{}}</span>
    <span class="k">\clip</span> (big#2.south east) rectangle ++ (1,5); 
    <span class="k">\draw</span><span class="na">[white, very thick]</span> (penalty#2) circle (0.915cm);
    <span class="nt">\end{scope}</span>
<span class="nt">\end{scope}</span>
<span class="p">}</span>


<span class="nt">\begin{document}</span>
<span class="nt">\begin{tikzpicture}</span>
<span class="nt">\begin{scope}</span>[<span class="c">%    </span>
    every node/.style=<span class="p">{</span>draw=white, very thick, inner sep=0, outer sep=0<span class="p">}</span>,
   every path/.style=<span class="p">{</span>draw=white, very thick<span class="p">}</span>,
]
<span class="k">\fill</span><span class="na">[field]</span> (-1,-1) rectangle (13,10);
<span class="k">\node</span><span class="na">[minimum width=12cm, minimum height=9cm]</span> (contour) at (6,4.5) <span class="p">{}</span>;

<span class="c">%\draw (contour.south west) grid (contour.north east);</span>

<span class="c">% Center</span>
<span class="k">\draw</span> (contour.north) -- (contour.south);
<span class="k">\draw</span> (contour.center) circle (0.915cm);
<span class="k">\fill</span><span class="na">[white]</span> (contour.center) circle (.5mm);

<span class="c">% Areas</span>
<span class="k">\area</span><span class="p">{</span>contour.west<span class="p">}{</span>0<span class="p">}</span>
<span class="k">\area</span><span class="p">{</span>contour.east<span class="p">}{</span>180<span class="p">}</span>

<span class="c">% Corners</span>
<span class="k">\foreach</span> <span class="k">\corner</span> [count=<span class="k">\xi</span> starting from 0] in <span class="p">{</span>south west, south east, north east, north west<span class="p">}{</span>
    <span class="nt">\begin{scope}</span>[rotate around=<span class="p">{</span>90*<span class="k">\xi</span>:(contour.<span class="k">\corner</span>)<span class="p">}</span>]
        <span class="k">\draw</span> ([xshift=1mm]contour.<span class="k">\corner</span>) arc (0:90:1mm);
    <span class="nt">\end{scope}</span>
<span class="p">}</span>
<span class="nt">\end{scope}</span>

<span class="k">\croacia</span><span class="p">{</span>23<span class="p">}{</span>Subasic<span class="p">}{</span>(0.25,4.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>3<span class="p">}{</span>Strinic<span class="p">}{</span>(1.6,7.2)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>21<span class="p">}{</span>Vida<span class="p">}{</span>(1.3,5.3)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>6<span class="p">}{</span>Lovren<span class="p">}{</span>(1.3,2.9)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>2<span class="p">}{</span>Virsalijko<span class="p">}{</span>(1.6,1)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>11<span class="p">}{</span>Brozovic<span class="p">}{</span>(2.5,4.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>4<span class="p">}{</span>Perisic<span class="p">}{</span>(3.5,7.2)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>7<span class="p">}{</span>Rakitic<span class="p">}{</span>(3.5,5.25)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>10<span class="p">}{</span>Modric<span class="p">}{</span>(3.5,3)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>18<span class="p">}{</span>Rebic<span class="p">}{</span>(3.5,1)<span class="p">}</span>
<span class="k">\croacia</span><span class="p">{</span>17<span class="p">}{</span>Mandzukic<span class="p">}{</span>(4.6,4.25)<span class="p">}</span>

<span class="k">\france</span><span class="p">{</span>1<span class="p">}{</span>Lloris<span class="p">}{</span>(10.75,4.25)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>2<span class="p">}{</span>Pavard<span class="p">}{</span>(9.5,7.2)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>4<span class="p">}{</span>Varane<span class="p">}{</span>(9.5,5.3)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>5<span class="p">}{</span>Umtiti<span class="p">}{</span>(9.5,2.9)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>21<span class="p">}{</span>Lucas<span class="p">}{</span>(9.5,1)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>13<span class="p">}{</span>Kante<span class="p">}{</span>(8.5,6)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>6<span class="p">}{</span>Pogba<span class="p">}{</span>(8.5,2.3)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>10<span class="p">}{</span>Mbappe<span class="p">}{</span>(7,7)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>7<span class="p">}{</span>Griezman<span class="p">}{</span>(7.8,4.25)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>14<span class="p">}{</span>Matuidi<span class="p">}{</span>(7,1.5)<span class="p">}</span>
<span class="k">\france</span><span class="p">{</span>9<span class="p">}{</span>Giroud<span class="p">}{</span>(6.4,4.25)<span class="p">}</span>
<span class="nt">\end{tikzpicture}</span>
<span class="nt">\end{document}</span>
</code></pre></div></div>

<h2 id="七人制的一个阵型">七人制的一个阵型</h2>
<p><img src="http://localhost:4000/assets//blog_images/soccer3.png" width="600px" height="400px" />
只需要改一下一些坐标就行了。</p>

<h2 id="绘制球场">绘制球场</h2>
<p><img src="http://localhost:4000/assets//blog_images/soccer4.png" width="600px" height="400px" /></p>
<div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="na">[margin=10pt]</span><span class="p">{</span>standalone<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>tikz<span class="p">}</span>
<span class="k">\usetikzlibrary</span><span class="p">{</span>arrows.meta, calc<span class="p">}</span>

<span class="k">\definecolor</span><span class="p">{</span>field<span class="p">}{</span>RGB<span class="p">}{</span>0,156,0<span class="p">}</span>

<span class="k">\tikzset</span><span class="p">{</span>
    every node/.style=<span class="p">{</span>draw=white, very thick, inner sep=0, outer sep=0<span class="p">}</span>,
    every path/.style=<span class="p">{</span>draw=white, very thick<span class="p">}</span>,
<span class="p">}</span>

<span class="k">\newcommand\area</span><span class="na">[2]</span><span class="p">{</span>
<span class="nt">\begin{scope}</span>[shift=<span class="p">{</span>(#1)<span class="p">}</span>, transform shape, rotate=#2]
<span class="k">\node</span><span class="na">[minimum width=.55cm,minimum height=1.832cm, anchor=west]</span> (small#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=1.65cm,minimum height=4.032cm, anchor=west]</span> (big#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[minimum width=.244cm, minimum height=.732cm, anchor=east]</span> (goal#2) at (0,0) <span class="p">{}</span>;
<span class="k">\node</span><span class="na">[inner sep=.3mm, circle, fill=white]</span> (penalty#2) at (1.1,0) <span class="p">{}</span>;
    <span class="nt">\begin{scope}</span>
    <span class="k">\tikzset</span><span class="p">{</span>every path/.style=<span class="p">{}}</span>
    <span class="k">\clip</span> (big#2.south east) rectangle ++ (1,5); 
    <span class="k">\draw</span><span class="na">[white, very thick]</span> (penalty#2) circle (0.915cm);
    <span class="nt">\end{scope}</span>
<span class="nt">\end{scope}</span>
<span class="p">}</span>

<span class="k">\newcommand\showmeasures</span><span class="p">{</span>
    <span class="nt">\begin{scope}</span>
    <span class="k">\tikzset</span><span class="p">{</span>every node/.style=<span class="p">{</span>draw=none,fill=field, inner sep=2pt, sloped<span class="p">}}</span>
    <span class="k">\draw</span><span class="na">[black, {Latex}-{Latex}]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">contour.north west</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">5</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">contour.north east</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">5</span><span class="o">)</span><span class="p">$</span>) node[midway] <span class="p">{</span><span class="k">\textbf</span><span class="p">{</span>Sideline:<span class="p">}</span> min 90m - max 120m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, {Latex}-{Latex}]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">contour.south west</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">6</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">contour.north west</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">6</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) node[midway] <span class="p">{</span><span class="k">\textbf</span><span class="p">{</span>Goal line:<span class="p">}</span> min 45m - max 90m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, -{Latex}]</span> (penalty0) --++ (-15:0.915cm) node[midway, above, font=<span class="k">\scriptsize</span>, fill=none, yshift=2pt] <span class="p">{</span>r = 9.15m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, {Latex}-{Latex}]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">small</span><span class="m">0</span><span class="nb">.south east</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">2</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">small</span><span class="m">0</span><span class="nb">.north east</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">2</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) node[midway,above, fill=none,font=<span class="k">\scriptsize</span>] <span class="p">{</span>18.32m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">small</span><span class="m">0</span><span class="nb">.north west</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">2</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">small</span><span class="m">0</span><span class="nb">.north east</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">2</span><span class="o">)</span><span class="p">$</span>) node[midway, above, font=<span class="k">\scriptsize</span>, fill=none, xshift=3pt] <span class="p">{</span>5.50m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black]</span> (contour.south east) --++ (135:1mm) node[anchor=south east] <span class="p">{</span>r = 1m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, {Latex}-{Latex}]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">big</span><span class="m">180</span><span class="nb">.south east</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">5</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">big</span><span class="m">180</span><span class="nb">.north east</span><span class="o">)+(-</span><span class="nb">.</span><span class="m">5</span><span class="nb">,</span><span class="m">0</span><span class="o">)</span><span class="p">$</span>) node[midway,above, rotate=180,fill=none,font=<span class="k">\scriptsize</span>] <span class="p">{</span>40.32m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, {Latex}-{Latex}]</span> (<span class="p">$</span><span class="o">(</span><span class="nb">big</span><span class="m">180</span><span class="nb">.south west</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">2</span><span class="o">)</span><span class="p">$</span>) -- (<span class="p">$</span><span class="o">(</span><span class="nb">big</span><span class="m">180</span><span class="nb">.south east</span><span class="o">)+(</span><span class="m">0</span><span class="nb">,.</span><span class="m">2</span><span class="o">)</span><span class="p">$</span>) node[midway,above,fill=none,font=<span class="k">\scriptsize</span>] <span class="p">{</span>16.50m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black]</span> (contour.east) --++ (-11mm,0) node[midway,above, fill=none,font=<span class="k">\scriptsize</span>] <span class="p">{</span>11m<span class="p">}</span>;
    <span class="k">\node</span><span class="na">[font=\small, rotate=-90, yshift=5mm]</span> at (goal180) <span class="p">{</span><span class="k">\textbf</span><span class="p">{</span>Goal:<span class="p">}</span> 7.32m <span class="p">$</span><span class="nv">\times</span><span class="p">$</span> 2.44m<span class="p">}</span>;
    <span class="k">\draw</span><span class="na">[black, -{Latex}]</span> (contour.center) --++ (0:0.915cm) node[midway, above, fill=none,font=<span class="k">\scriptsize</span>, yshift=2pt] <span class="p">{</span>r = 9.15m<span class="p">}</span>;
    <span class="nt">\end{scope}</span>
<span class="p">}</span>

<span class="nt">\begin{document}</span>
<span class="nt">\begin{tikzpicture}</span>
<span class="k">\fill</span><span class="na">[field]</span> (-1,-1) rectangle (13,10);
<span class="k">\node</span><span class="na">[minimum width=12cm, minimum height=9cm]</span> (contour) at (6,4.5) <span class="p">{}</span>;

<span class="c">% Center</span>
<span class="k">\draw</span> (contour.north) -- (contour.south);
<span class="k">\draw</span> (contour.center) circle (0.915cm);
<span class="k">\fill</span><span class="na">[white]</span> (contour.center) circle (.5mm);

<span class="c">% Areas</span>
<span class="k">\area</span><span class="p">{</span>contour.west<span class="p">}{</span>0<span class="p">}</span>
<span class="k">\area</span><span class="p">{</span>contour.east<span class="p">}{</span>180<span class="p">}</span>

<span class="c">% Corners</span>
<span class="k">\foreach</span> <span class="k">\corner</span> [count=<span class="k">\xi</span> starting from 0] in <span class="p">{</span>south west, south east, north east, north west<span class="p">}{</span>
    <span class="nt">\begin{scope}</span>[rotate around=<span class="p">{</span>90*<span class="k">\xi</span>:(contour.<span class="k">\corner</span>)<span class="p">}</span>]
        <span class="k">\draw</span> ([xshift=1mm]contour.<span class="k">\corner</span>) arc (0:90:1mm);
    <span class="nt">\end{scope}</span>
<span class="p">}</span>

<span class="k">\showmeasures</span>
<span class="nt">\end{tikzpicture}</span>
<span class="nt">\end{document}</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> LaTeX </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[一些Qt在Ubuntu下的问题]]></title>
      <url>/math/2018/09/18/qt_on_ubuntu/</url>
      <content type="html"><![CDATA[<p><strong>In this post we will talk about some problems occured in Ubuntu OS when writing Qt program.本文讨论一些在ubuntu使用Qt的问题。</strong></p>

<hr />

<h2 id="qdebug的使用">qDebug的使用</h2>
<p>通常而言，实际上<code class="highlighter-rouge">qDebug</code>是不能直接输出<code class="highlighter-rouge">std::string</code>的，但是在Windows和Android上直接拿来用没有遇到过问题。。。在Ubuntu上使用会报错，因此需要重载«操作符：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">QDebug</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">QDebug</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">QString</span><span class="o">::</span><span class="n">fromStdString</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">out</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="ssl的使用">ssl的使用</h2>
<p>在把paperServer服务器从Win/Android移植到Linux下遇到了问题，如果访问https连接的话，会发现ssl的函数没有实现。具体的，发现自己其实已经安装了openssl,libssl-dev的包，可是还是不对。我们输出一下相关的信息：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">"SSL version use for build: "</span><span class="o">&lt;&lt;</span><span class="n">QSslSocket</span><span class="o">::</span><span class="n">sslLibraryBuildVersionString</span><span class="p">();</span>
<span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">"SSL version use for run-time: "</span><span class="o">&lt;&lt;</span><span class="n">QSslSocket</span><span class="o">::</span><span class="n">sslLibraryVersionNumber</span><span class="p">();</span>
<span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">QCoreApplication</span><span class="o">::</span><span class="n">libraryPaths</span><span class="p">();</span>
</code></pre></div></div>

<p>发现Qt的ssl是基于1.0版本的，而apt得到的是1.1版本的，二者并不兼容。因此需要安装<code class="highlighter-rouge">sudo apt-get install libssl1.0-dev</code>，会把原来的ssl库卸载掉，而且还会连带卸载petsc库。。。。。。解决方法是系统中安装openssl1.1，而自己编译一个openssl1.0.2的so，一定要动态编译（<code class="highlighter-rouge">./config shared</code>)，不然无法链接，因为我Qt是编译的动态库。然后很坑的是设置elf的RUNPATH居然不管用，必须要<code class="highlighter-rouge">export LD_LIBRARY_PATH=$PWD</code>才能让程序正确地链接到同目录下的ssl。真是天坑。。。</p>
]]></content>
      <categories>
        
          <category> Math </category>
        
      </categories>
      <tags>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[切比雪夫多项式、节点与插值]]></title>
      <url>/math/2018/09/15/chebyshev/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>In this post we discuss on Chebyshev polynomials, nodes and interpolation.讨论关于切比雪夫多项式、节点与插值</strong></p>

<hr />
<h2 id="切比雪夫节点">切比雪夫节点</h2>
<p>对于拉格朗日插值公式，如何选取节点是一个重要的问题。通常而言，等距选取节点并不是一个最优的选择。我们考虑如下的问题描述：
取插值节点：$a\leq x_0\leq x_1\leq ……\leq x_n\leq b$
满足$L_n(x_k)=f(x_k)$的多项式插值余项</p>

<script type="math/tex; mode=display">R_n(x)=f(x)-L_n(x)=\frac{f^{(n+1)}(\zeta_n)}{(n+1)!}\omega_{n+1}(x)</script>

<p>其中，</p>

<script type="math/tex; mode=display">\omega_{n+1}(x)=(x-x_0)(x-x_1)...(x-x_n)</script>

<p>选取$x_0,x_1,……,x_n$使</p>

<script type="math/tex; mode=display">\text{max}|\omega_{n+1}(x)|=\text{min}</script>

<p>因此需要选取切比雪夫多项式$T_{n+1}(x)$的全部零点。</p>

<p>如果$a=-1,b=1$,那么</p>

<script type="math/tex; mode=display">x_k=\cos(\frac{(2k+1)\pi}{2(n+1)})</script>

<p>如果$[a,b]\neq [-1,1]$,那么</p>

<script type="math/tex; mode=display">x_k=\frac{b+a}{2}+\frac{b-a}{2}\cos(\frac{(2k+1)\pi}{2(n+1)})</script>

<p>当然选取了节点之后既可以用拉格朗日插值，也可以用牛顿插值。</p>

<h2 id="切比雪夫多项式">切比雪夫多项式</h2>
<p>在微分方程的研究中，切比雪夫提出切比雪夫微分方程</p>

<script type="math/tex; mode=display">(1-x^2)y^{\prime\prime}-xy^\prime+n^2y=0</script>

<p>和</p>

<script type="math/tex; mode=display">(1-x^2)y^{\prime\prime}-3xy^\prime+n(n+2)y=0</script>

<p>相应地，第一类和第二类切比雪夫多项式分别为这两个方程的解。 这些方程是斯图姆-刘维尔微分方程的特殊情形。本文只研究第一类切比雪夫多项式。</p>

<p>第一类切比雪夫多项式由以下递推关系确定</p>

<script type="math/tex; mode=display">T_0(x)=1</script>

<script type="math/tex; mode=display">T_1(x)=x</script>

<script type="math/tex; mode=display">T_{n+1}(x)=2xT_n(x)-T_{n-1}(x)</script>

<p>也可以用母函数表示
<script type="math/tex">\sum_{n=0}^\infty T_n(x)t^n=\frac{1-tx}{1-2tx+t^2}</script></p>

<p>切比雪夫多项式也具有正交性，即</p>

<script type="math/tex; mode=display">\int_{-1}^1 T_n(x)T_m(x)\frac{dx}{\sqrt{1-x^2}}=\left\{
    \begin{array}{c}
    0：n\neq m\\
    \pi:n=m=0\\
    \pi/2:n=m\neq 0
    \end{array}
    \right.</script>

<p>离散形式的正交性可以表示为</p>

<script type="math/tex; mode=display">% <![CDATA[
\sum_{k=1}^{n+1} T_i(x_k)T_j(x_k)=\left\{
    \begin{array}{c}
    0：i\neq j\\
    n+1:i=j=0\\
    \frac{1}{2}(n+1):0<i=j\neq n
    \end{array}
    \right. %]]></script>

<p>根据正交性，可以得到另外一种方法来进行拉格朗日插值。设<script type="math/tex">p_n(x)=\sum_{i=0}^nc_iT_i(x)</script>
，易得</p>

<script type="math/tex; mode=display">c_i=\frac{2}{n+1}\sum_{k=1}^{n+1}f(x_k)T_i(x_k)</script>
]]></content>
      <categories>
        
          <category> Math </category>
        
      </categories>
      <tags>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[再谈C++的字符串分割]]></title>
      <url>/programming/2018/08/25/splitstring/</url>
      <content type="html"><![CDATA[<p><strong>再次讨论如何分割C++的std::string.</strong></p>

<hr />

<p>一些别的方法我们之前已经讨论过了，例如Boost::tokenizer或者Boost::splitter或者QString来进行分割。不过这里我们讨论一下运用C++标准库的方法。</p>

<p>思路很简单，就是用istream流的迭代器处理。</p>
<h2 id="思路1">思路1</h2>
<p>首先一个比较简单的用法是</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"Let me split this into words"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">iss</span><span class="p">)),</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">());</span>
</code></pre></div></div>
<p>如果使用C++11语法可以写成这样：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"Let me split this into words"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">{</span><span class="n">iss</span><span class="p">}),</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">());</span>
</code></pre></div></div>
<p>这种思路的优点是可以处理任何流而不仅仅是字符串，但是缺点是不能自定义分隔符。</p>

<h2 id="思路2">思路2</h2>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">output</span><span class="p">)</span>
<span class="p">{</span>
   <span class="c1">// ...does lots of things...
</span><span class="p">}</span>
</code></pre></div></div>
<p>这段代码肯定是不能改的，因为这是标准库里的东西。不过我们可以变通一下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WordDelimitedByComma</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span>
<span class="p">{};</span>
</code></pre></div></div>
<p>这样做实际上是有争议的，因为std::string没有一个虚的析构函数，因此最好不要从std::string继承。当然，只要不去删除一个指向<code class="highlighter-rouge">WordDelimitedByComma</code>的指针，就不会出现问题。在这里我们只用来分割字符串。重载«操作符：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">,</span> <span class="n">WordDelimitedByComma</span><span class="o">&amp;</span> <span class="n">output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">is</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="sc">','</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">is</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>因此代码可以写成</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"Let,me,split,this,into,words"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">WordDelimitedByComma</span><span class="o">&gt;</span><span class="p">(</span><span class="n">iss</span><span class="p">)),</span> <span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">WordDelimitedByComma</span><span class="o">&gt;</span><span class="p">());</span>
</code></pre></div></div>
<p>更为通用的代码可以写成</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="kt">char</span> <span class="n">delimiter</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">WordDelimitedBy</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span>
<span class="p">{};</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"Let,me,split,this,into,words"</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">iss</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">results</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">WordDelimitedBy</span><span class="o">&lt;</span><span class="sc">','</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">iss</span><span class="p">)),</span> <span class="n">std</span><span class="o">::</span><span class="n">istream_iterator</span><span class="o">&lt;</span><span class="n">WordDelimitedBy</span><span class="o">&lt;</span><span class="sc">','</span><span class="o">&gt;&gt;</span><span class="p">());</span>
</code></pre></div></div>
<p>这个的优点是</p>
<ul>
  <li>允许在编译器定义任意的分隔符</li>
  <li>可以使用任何流而不仅仅是字符串</li>
  <li>比方法1快20%至30%</li>
</ul>

<p>而缺点是分隔符只能在编译器定义，且代码量较大。</p>

<h2 id="思路3">思路3</h2>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">split</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="n">delimiter</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">tokens</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">token</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="n">tokenStream</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">tokenStream</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">delimiter</span><span class="p">)){</span>
        <span class="n">tokens</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">tokens</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个思路的有点在于</p>
<ul>
  <li>接口清晰</li>
  <li>能够在运行期使用任何分隔符</li>
</ul>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> C++ </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[初窥Qt WebAssembly]]></title>
      <url>/programming/2018/08/23/qtwasm/</url>
      <content type="html"><![CDATA[<p><strong>Qt 5.11发布了Qt WebAssembly的技术预览(Technology Preview)。对Qt WebAssembly的代码进行了编译并编译了一些程序。</strong></p>

<hr />

<h2 id="安装最新emscripten">安装最新emscripten</h2>
<p>开发机系统为Ubuntu 18.04，直接用apt install 得到的emscripten版本太老，因此需要最新版本的<a href="https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz">emscripten</a>.下载解压后</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./emsdk update
./emsdk install latest
./emsdk activate latest
</code></pre></div></div>
<p>然后设置环境变量，可以<code class="highlighter-rouge">source ./emsdk_env.sh</code></p>

<h2 id="编译qt-webassembly源码">编译Qt-WebAssembly源码</h2>
<p>首先下载好源码，然后坑也不少。按照官方wiki的命令编译不了，需要用命令<code class="highlighter-rouge">./configure -xplatform emscripten -developer-build -release -static -no-thread -nomake tests -nomake examples  -no-dbus -no-headersclean -system-libpng -no-ssl -no-warnings-are-errors</code>编译。编译的时候会提示不能确定指令集架构，是因为用了emscripten1.38的原因，需要在qtbase文件夹下的configure.pri修改</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>else: html5:exists($$test_out_dir/arch.js.mem): \
content = $$cat($$test_out_dir/arch.js.mem, blob)
</code></pre></div></div>
<p>改成</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>html5:exists($$test_out_dir/arch.wasm): \
content = $$cat($$test_out_dir/arch.wasm, blob)
</code></pre></div></div>
<p>就可以configure然后make了。</p>

<h2 id="编译一个具体的程序">编译一个具体的程序</h2>
<p>编译程序用命令</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/qtbase/bin/qmake 
make
</code></pre></div></div>
<p>然后可以用命令<code class="highlighter-rouge">python -m SimpleHTTPServer</code>启动一个简单的http服务器。</p>

<p>不过编译的时候也有坑，不知道为什么，include目录不能有/usr/include，具体只能加上自己的目录，例如/usr/include/eigen3.这个问题的原因目前没有明白。</p>

<h2 id="实际效果">实际效果</h2>
<p>我把easyAuto给编译成了wasm文件。具体的文件包括有easyAuto.js, easyAuto.wasm, easyAuto.html, qtloader.js, qtlogo.svg.最后的效果见<a href="https://scienceasdf.gitee.io/site/rootLocus/index.html">网站</a>。在easyAuto中的QtChart不能使用openGL加速绘制。此外还有的坑包括</p>
<ul>
  <li>iOS设备不支持wasm</li>
  <li>移动设备打开网页后，文本框无法触发虚拟键盘。这是因为整个Qt程序是一个canvas，其中的文本框不是dom对象，因此文本框只能用外部键盘输入，或者自己画一个键盘。。。。。。。</li>
  <li>Qt程序不能调用系统的字体，程序里面自带了英文字体，而中文字体则无法显示。奇怪的是我在程序里面加上中文字体一起打包编译仍然显示中文不出。好像是需要在源码中改/qtbase/src/plugins/platforms/html5/font里面的qrc，具体是不是我也不知道。。。。。。</li>
  <li>wasm文件很大，不过倒是可以在服务器端压缩。</li>
  <li>在手机上运行很卡，而且有的demo甚至会闪退。</li>
  <li>无法获取本地文件，解决方法见<a href="https://codereview.qt-project.org/#/c/228599/">这里</a>。</li>
</ul>

<p>总的感觉坑还是不少，不过这个只是技术预览，最终版希望能够有很大改进。这里给出几张easyAuto-WebAssembly程序的截图吧。
<img src="http://localhost:4000/assets//blog_images/easyauto_wasm1.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/easyauto_wasm2.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/easyauto_wasm3.png" width="350px" height="200px" /></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> Ubuntu </tag>
        
          <tag> Linux </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[最近使用Ubuntu的一些总结]]></title>
      <url>/programming/2018/06/02/ubuntu/</url>
      <content type="html"><![CDATA[<p><strong>最近使用Ubuntu系统的一些小技巧总结。</strong></p>

<hr />

<h2 id="编译最新cmake">编译最新CMake</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt remove cmake
sudo apt purge --auto-remove cmake
version=3.11
build=1
mkdir ~/temp
cd ~/temp
wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz
tar -xzvf cmake-$version.$build.tar.gz
cd cmake-$version.$build
./bootstrap
make -j16
sudo make install
cmake --version
</code></pre></div></div>

<h2 id="创建快捷方式">创建快捷方式</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install --no-install-recommends gnome-panel
gnome-desktop-item-edit --create-new ~/桌面
</code></pre></div></div>

<h2 id="从hdmi输出声音">从HDMI输出声音</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-add-repository ppa:yktooo/ppa
sudo apt update
sudo apt install indicator-sound-switcher
</code></pre></div></div>
<p>利用indicator-sound-switcher便可以在各个通道切换声音输出。注意Ubuntu 18.04添加ppa以后不需要<code class="highlighter-rouge">sudo apt update</code>这一步了。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> Ubuntu </tag>
        
          <tag> Linux </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[泊松方程的有限元求解（理论）]]></title>
      <url>/math/2018/04/27/poinsonFEM/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>从泊松方程入手，谈论有限元的一些基本知识。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />
<h2 id="泊松方程">泊松方程</h2>
<p>泊松方程为
\begin{equation}
\Delta u = f
\end{equation}
在这里$ \Delta $代表的是拉普拉斯算子，而 $ f$和$\varphi $可以是在流形上的实数或复数值的方程。当流形属于欧几里得空间，而拉普拉斯算子通常表示为 ${\nabla}^2$，因此泊松方程通常写成
\begin{equation}
\left( \frac{\partial^2}{\partial x^2} + \frac{\partial^2}{\partial y^2} + \frac{\partial^2}{\partial z^2} \right)\varphi(x,y,z) = f(x,y,z)
\end{equation}</p>

<h2 id="具体的问题及求解">具体的问题及求解</h2>
<p>我们提出如下的带有边界条件的问题<br />
<script type="math/tex">% <![CDATA[
\begin{align*} -\Delta u &= f \qquad\qquad & \text{in}\ \Omega, \\ u &= 0 \qquad\qquad & \text{on}\ \partial\Omega. \end{align*} %]]></script><br />
求解的区域为平面单位正方形，$\Omega=[0,1]^2$。我们假设一个测试函数$\varphi$，并在上式的左边乘上这个函数，对整个区域$\Omega$积分，可以得到
\begin{equation}
-\int_\Omega \varphi \Delta u = \int_\Omega \varphi f
\end{equation}
由<a href="https://en.wikipedia.org/wiki/Divergence_theorem">高斯散度定理（奥斯特罗格拉斯基公式）</a>可以得到：
\begin{equation}
\int_\Omega \nabla\varphi \cdot \nabla u - \int_{\partial\Omega} \varphi \mathbf{n}\cdot \nabla u = \int_\Omega \varphi f
\end{equation}
我们需要让$\varphi$也同样满足边界条件（用数学属于描述就是需要让测试函数$\varphi$来自方程解的切空间），因此上式可以写成
\begin{equation}
(\nabla\varphi, \nabla u) = (\varphi, f)
\end{equation}
这里我们使用通用的内积符号$(a,b)=\int_\Omega a\; b$.我们现在的思路就是找到一个解的近似$u_h(\mathbf x)=\sum_j U_j \varphi_j(\mathbf x)$，而$U_j$是我们需要求的系数，$\varphi_i$是我们用的形函数。因此可以得到
\begin{equation}
(\nabla\varphi_i, \nabla u_h) = (\varphi_i, f), \qquad\qquad i=0\ldots N-1.
\end{equation}
现在需要求解一个矩阵代数方程
\begin{equation}
\mathbf{AU}=\mathbf{F}
\end{equation}
矩阵$\mathbf{A},\mathbf{F}$定义为<br />
<script type="math/tex">% <![CDATA[
\begin{align*} A_{ij} &= (\nabla\varphi_i, \nabla \varphi_j), \\ F_i &= (\varphi_i, f). \end{align*} %]]></script><br />
显然，这样就有$\sum_j \mathbf{A}_{ij}\mathbf{U}_j=\mathbf{F}_i$。前面看到我们是左乘$\varphi$，对于对称矩阵（自伴随的），问题是以一样的，不过对于非对称的$\mathbf{A}$，那么经验表明这样会在计算中产生更大的误差。现在整理一下：</p>
<ul>
  <li>$\mathbf{A,U,F}$都是稀疏矩阵</li>
  <li>积分的计算采用高斯积分算法</li>
</ul>

<p>这样就是全部思路。</p>

]]></content>
      <categories>
        
          <category> Math </category>
        
      </categories>
      <tags>
        
          <tag> 有限元 </tag>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[实现一个简单的在线请假系统]]></title>
      <url>/programming/2018/04/26/serverSystem/</url>
      <content type="html"><![CDATA[<p><strong>实现了一个B/S架构的在线请假申请系统。路子十分野，所以只是用于这种极为特殊的个人项目里面。</strong></p>

<hr />
<p>自从上次发现了qhttpserver之后，便增加了很多可以玩的东西。以前有个同学找我希望我做一个在线的请假申请系统，当时我还比较弱，只会C++/Qt和sqlite开发，想的架构是C/S架构的，我想了想，这个不能跨平台，不便于产品更新，而且即使这样我也做不出来。现在写过网页，写过http server的程序，这个东西我想了想，还是能够实现的。</p>

<h2 id="基本需求">基本需求</h2>
<p>用户访问页面，填写相关信息，并且需要附上说明请假情况的图片，通过post请求发送到服务器。</p>

<h2 id="用户选择图片并在预览">用户选择图片并在预览</h2>
<p>首先需要一个文件输入框<code class="highlighter-rouge">&lt;input type="file" id="take-picture" accept="image/*"&gt;</code>，用户点击按钮可以通过调用摄像头或者选择存储空间中的图片。选择了图片之后还需要预览，预览的相关代码如下：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">takePicture</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">"#take-picture"</span><span class="p">),</span>
        <span class="nx">showPicture</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">"#show-picture"</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">takePicture</span> <span class="o">&amp;&amp;</span> <span class="nx">showPicture</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Set events</span>
        <span class="nx">takePicture</span><span class="p">.</span><span class="nx">onchange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Get a reference to the taken picture or chosen file</span>
            <span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">,</span>
                <span class="nx">file</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">files</span> <span class="o">&amp;&amp;</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">file</span> <span class="o">=</span> <span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="c1">// Get window.URL object</span>
                    <span class="kd">var</span> <span class="nx">fileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
                    <span class="nx">fileReader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">showPicture</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
                    <span class="p">};</span>
                    <span class="nx">fileReader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
                    <span class="nx">imageFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="c1">// Fallback if createObjectURL is not supported</span>
                        <span class="kd">var</span> <span class="nx">fileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
                        <span class="nx">fileReader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">showPicture</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
                        <span class="p">};</span>
                        <span class="nx">fileReader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//</span>
                        <span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s2">"ca)"</span><span class="p">);</span>
                        <span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">"#error"</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                            <span class="nx">error</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">"Neither createObjectURL or FileReader are supported"</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div>
<p>我经过实际的测试，发现本来预览图片应该有两种方法的，但是实际上在手机上获取window.URL既不抛出异常，也不能加载图片，因此就直接用<code class="highlighter-rouge">readAsDataURL</code>的方法。</p>

<h2 id="关于信息的上传">关于信息的上传</h2>
<p>这里我用的是野得不能再野得路子了。通常的解决方案是生成multipart/form-data数据，但是这个方法我不用的原因是服务器端我没有使用任何PHP（目前还没有学习PHP的必要），C++来parse这个东西又需要另外写代码，比较麻烦，因此直接将单独的图片数据post到服务器。图片的post也是个大麻烦，理论上xhr可以直接send类型为file的对象的，但是实际上却在我的手机上不支持。因此，还是需要用下面的办法，就是<code class="highlighter-rouge">readAsArrayBuffer</code>，然后调用回调函数发送请求。</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fileReader2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
<span class="nx">fileReader2</span><span class="p">.</span><span class="nx">readAsArrayBuffer</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"take-picture"</span><span class="p">).</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="nx">fileReader2</span><span class="p">.</span><span class="nx">onloadend</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xhr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">xhr2</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr2</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="nx">XMLHttpRequest</span><span class="p">.</span><span class="nx">DONE</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">swal</span><span class="p">(</span><span class="nx">xhr2</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">xhr2</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">"POST"</span><span class="p">,</span>  <span class="nb">encodeURI</span><span class="p">(</span><span class="nx">queryStr</span><span class="p">));</span>
    <span class="nx">xhr2</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>接下来的问题就是其他信息的上传。本来想用header来发送的，不过却发现手机上连header都发不了（我感觉这里很有可能是我自己代码的问题，手机浏览器怎么可能不能发送请求头</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> C++ </tag>
        
          <tag> Qt </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> 网络 </tag>
        
          <tag> javascript </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Qt for Android实现与webview的交互]]></title>
      <url>/programming/2018/04/23/QtLocalHost/</url>
      <content type="html"><![CDATA[<p><strong>在Qt的程序里搭建一个localhost，实现前端webview+html+js和后端C++的交互，该解决方案能够跨平台。</strong></p>

<hr />
<p>Qt要在移动端写浏览器只能用一些比较牵强的方案（如果不自己造轮子的话），就是QtWebView.然而QtWebView提供的接口太少，不方便C++与html交互，如果是写web应用就比较劣势，毕竟cordova，react native等的方案非常流行，如果无法前后端交互，纯一个静态页面实在不好玩，还不如把网页挂在互联网上用浏览器直接访问网页。在安卓上有一种可行的方案：C++通过jni与java交互，再与js对象交互。这个也有弊端，一个是不是跨平台的方案，第二个是我不会java，只会c++和js.在网上查到的另一种解决方法是搭建一个local server，通过http请求进行交互。</p>

<p>在GitHub上找到了一些用Qt搭建http server的代码（当然用boost也可以），例如<a href="http://stefanfrings.de/qtwebapp/index-en.html">QtWEbApp</a>，<a href="https://github.com/fffaraz/QtWebApp">QtWebApp</a>。我最终用的是<a href="https://github.com/nikhilm/qhttpserver">qhttpserver</a>，star数目很多，比较可惜的是有一阵没有更新了，但是还是很好的一个东西。</p>

<p>这个程序按照GitHub直接下载下来的项目把代码编译，例子可以直接运行在安卓机上。例如运行例子Helloworld，那么在手机浏览器上打开http://localhost:8080，可以看到helloworld字样。按照release模式编译得到libqhttpserver.so，然后按照文档在自己的项目里面添加头文件包含和需要链接的库就可以了。</p>

<p>在Qt构建移动web应用有两种方案：网页资源放在qrc文件里面，运行时把qrc里面的内容全部复制到存储中，或者直接放在assets目录下（<strong>安卓的url格式为：file:///android_asset/site/groundTrackPlot.html，不能直接用assets目录访问，这个需要注意</strong>）。由于QtWebView只是一个原生浏览器的wrapper，因此不能直接访问qrc里面的文件。现在一种可行的解决方案是后端直接用QFile读取qrc文件，作为http请求的响应返回给前端：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HelloWorld</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QObject</span>
<span class="p">{</span>
    <span class="n">Q_OBJECT</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">HelloWorld</span><span class="p">();</span>

<span class="k">private</span> <span class="n">slots</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span> <span class="o">*</span><span class="n">req</span><span class="p">,</span> <span class="n">QHttpResponse</span> <span class="o">*</span><span class="n">resp</span><span class="p">);</span>
<span class="p">};</span>

<span class="n">HelloWorld</span><span class="o">::</span><span class="n">HelloWorld</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">QHttpServer</span> <span class="o">*</span><span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QHttpServer</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">newRequest</span><span class="p">(</span><span class="n">QHttpRequest</span><span class="o">*</span><span class="p">,</span> <span class="n">QHttpResponse</span><span class="o">*</span><span class="p">)),</span>
            <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span><span class="o">*</span><span class="p">,</span> <span class="n">QHttpResponse</span><span class="o">*</span><span class="p">)));</span>

    <span class="n">server</span><span class="o">-&gt;</span><span class="n">listen</span><span class="p">(</span><span class="n">QHostAddress</span><span class="o">::</span><span class="n">Any</span><span class="p">,</span> <span class="mi">8080</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span> <span class="o">*</span><span class="n">req</span><span class="p">,</span> <span class="n">QHttpResponse</span> <span class="o">*</span><span class="n">resp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Q_UNUSED</span><span class="p">(</span><span class="n">req</span><span class="p">);</span>

    <span class="n">QByteArray</span> <span class="n">body</span> <span class="o">=</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">().</span><span class="n">toLocal8Bit</span><span class="p">();</span>
    <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">();</span>
    <span class="n">QFile</span> <span class="n">file</span><span class="p">(</span><span class="s">":"</span> <span class="o">+</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">());</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">QIODevice</span><span class="o">::</span><span class="n">ReadOnly</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">//return;
</span>    <span class="p">}</span>
    <span class="n">QByteArray</span> <span class="n">data</span> <span class="o">=</span> <span class="n">QByteArray</span><span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">readAll</span><span class="p">());</span>
    <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">;</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">setHeader</span><span class="p">(</span><span class="s">"Content-Length"</span><span class="p">,</span> <span class="n">QString</span><span class="o">::</span><span class="n">number</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在main主函数里直接调用在QApplication对象创建后就创建HelloWorld(这个http server)，就可以实现想要的效果了。速度非常快，返回的数据量如果特别大那一定是渲染会花更多的时间而不是http请求的过程耗时间。用qrc的一个好处是编译成obj文件后占空间更小，而且不会被用户直接得到，但是编译会很花时间。</p>

<p>另外有时我们会需要Qt的http request是同步的，比如我们的localhost需要先访问一个外部的资源，再用得到的结果响应请求，那么代码如下</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HelloWorld</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QObject</span>
<span class="p">{</span>
    <span class="n">Q_OBJECT</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">HelloWorld</span><span class="p">();</span>
    <span class="n">QByteArray</span> <span class="n">get</span><span class="p">(</span><span class="k">const</span> <span class="n">QString</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">QNetworkAccessManager</span> <span class="n">m_qnam</span><span class="p">;</span>
<span class="k">private</span> <span class="n">slots</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span> <span class="o">*</span><span class="n">req</span><span class="p">,</span> <span class="n">QHttpResponse</span> <span class="o">*</span><span class="n">resp</span><span class="p">);</span>
<span class="p">};</span>

<span class="n">HelloWorld</span><span class="o">::</span><span class="n">HelloWorld</span><span class="p">()</span> <span class="o">:</span> <span class="n">m_qnam</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">QHttpServer</span> <span class="o">*</span><span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QHttpServer</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">newRequest</span><span class="p">(</span><span class="n">QHttpRequest</span><span class="o">*</span><span class="p">,</span> <span class="n">QHttpResponse</span><span class="o">*</span><span class="p">)),</span>
            <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span><span class="o">*</span><span class="p">,</span> <span class="n">QHttpResponse</span><span class="o">*</span><span class="p">)));</span>

    <span class="n">server</span><span class="o">-&gt;</span><span class="n">listen</span><span class="p">(</span><span class="n">QHostAddress</span><span class="o">::</span><span class="n">Any</span><span class="p">,</span> <span class="mi">8080</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">QByteArray</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">get</span><span class="p">(</span><span class="k">const</span> <span class="n">QString</span> <span class="o">&amp;</span><span class="n">strUrl</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">strUrl</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">());</span>

    <span class="k">const</span> <span class="n">QUrl</span> <span class="n">url</span> <span class="o">=</span> <span class="n">QUrl</span><span class="o">::</span><span class="n">fromUserInput</span><span class="p">(</span><span class="n">strUrl</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">isValid</span><span class="p">());</span>

    <span class="n">QNetworkRequest</span> <span class="n">qnr</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
    <span class="n">qnr</span><span class="p">.</span><span class="n">setRawHeader</span><span class="p">(</span><span class="s">"Origin"</span><span class="p">,</span><span class="s">"a"</span><span class="p">);</span>
    <span class="n">QNetworkReply</span><span class="o">*</span> <span class="n">reply</span> <span class="o">=</span> <span class="n">m_qnam</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">qnr</span><span class="p">);</span> <span class="c1">//m_qnam是QNetworkAccessManager对象
</span>
    <span class="n">QEventLoop</span> <span class="n">eventLoop</span><span class="p">;</span>
    <span class="n">connect</span><span class="p">(</span><span class="n">reply</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">QNetworkReply</span><span class="o">::</span><span class="n">finished</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eventLoop</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">QEventLoop</span><span class="o">::</span><span class="n">quit</span><span class="p">);</span>
    <span class="n">eventLoop</span><span class="p">.</span><span class="n">exec</span><span class="p">(</span><span class="n">QEventLoop</span><span class="o">::</span><span class="n">ExcludeUserInputEvents</span><span class="p">);</span>

    <span class="n">QByteArray</span> <span class="n">replyData</span> <span class="o">=</span> <span class="n">reply</span><span class="o">-&gt;</span><span class="n">readAll</span><span class="p">();</span>
    <span class="n">reply</span><span class="o">-&gt;</span><span class="n">deleteLater</span><span class="p">();</span>
    <span class="n">reply</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">replyData</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">handleRequest</span><span class="p">(</span><span class="n">QHttpRequest</span> <span class="o">*</span><span class="n">req</span><span class="p">,</span> <span class="n">QHttpResponse</span> <span class="o">*</span><span class="n">resp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">QByteArray</span> <span class="n">body</span> <span class="o">=</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">().</span><span class="n">toLocal8Bit</span><span class="p">();</span>
    <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">();</span>

    <span class="n">QByteArray</span> <span class="n">data</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="s">"some domain"</span> <span class="o">+</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">());</span>
    <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">;</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">setHeader</span><span class="p">(</span><span class="s">"Content-Length"</span><span class="p">,</span> <span class="n">QString</span><span class="o">::</span><span class="n">number</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="n">resp</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这样我们就能够综合js,qml,c++的好处，得到一个十分优化的web应用程序。一个神奇的现象是安卓的后台机制，如果我在这个程序里面开了host，自己访问会很快，但是别的浏览器访问就会很慢，如果我们此时切回server的那个程序，再切出到外部浏览器，那么会发现资源又加载好了，这个的原因应该是Android的后台程序只会得到很少的性能的分配。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> C++ </tag>
        
          <tag> Qt </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> 网络 </tag>
        
          <tag> javascript </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[最近写程序遇到的一些坑的总结]]></title>
      <url>/programming/2018/04/21/SomeNotes/</url>
      <content type="html"><![CDATA[<p><strong>总结一些最近编程遇到的坑（C++）</strong></p>

<hr />
<h2 id="使用eigen时的一个报错">使用Eigen时的一个报错：</h2>
<p>在使用Eigen库时，有时会报错：</p>
<blockquote>
  <p>my_program: path/to/eigen/Eigen/src/Core/DenseStorage.h:44:
Eigen::internal::matrix_array&lt;T, Size, MatrixOptions, Align&gt;::internal::matrix_array()
[with T = double, int Size = 2, int MatrixOptions = 2, bool Align = true]:
Assertion `(reinterpret_cast<size_t>(array) &amp; (sizemask)) == 0 &amp;&amp; "this assertion
is explained here: http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html
    READ THIS WEB PAGE !!! ****"' failed.</size_t></p>
</blockquote>

<p>这里Eigen已经把解决问题的网页贴出来了。进去一看，给出了可能的原因，我这里遇到的是因为一个类里面的成员为Eigen的类，比如</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
  <span class="c1">//...
</span>  <span class="n">Eigen</span><span class="o">::</span><span class="n">Vector2d</span> <span class="n">v</span><span class="p">;</span>
  <span class="c1">//...
</span><span class="p">};</span>
<span class="c1">//...
</span><span class="n">Foo</span> <span class="o">*</span><span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">;</span>
</code></pre></div></div>
<p>需要加上一个宏<code class="highlighter-rouge">EIGEN_MAKE_ALIGNED_OPERATOR_NEW</code>，如下</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
  <span class="c1">//...
</span>  <span class="n">Eigen</span><span class="o">::</span><span class="n">Vector2d</span> <span class="n">v</span><span class="p">;</span>
  <span class="c1">//...
</span><span class="nl">public:</span>
  <span class="n">EIGEN_MAKE_ALIGNED_OPERATOR_NEW</span>
<span class="p">};</span>
<span class="c1">//...
</span><span class="n">Foo</span> <span class="o">*</span><span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">;</span>
</code></pre></div></div>
<p>就不会报错了。这个是对于固定维数的矩阵（向量）会出现的错误，动态维数的矩阵（向量）不存在这样的问题。其它的情况包括按值传递矩阵（向量、或者带矩阵成员的类），需要改成按引用传递。这个问题的根本原因是Eigen为了提高运算速度，采取了128位内存对齐，以让编译器进行向量化优化。而如果自己的new就不会有内存对已，因此需要加上一个宏，重新实现内存对齐的new.</p>

<h2 id="一个在析构函数中需要注意的问题">一个在析构函数中需要注意的问题</h2>
<p>为了减少头文件包含，我们有时会这样写</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">bar</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">foo</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">foo</span><span class="p">();</span>
    <span class="o">~</span><span class="n">foo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">delete</span> <span class="n">m_bar</span><span class="p">;</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">bar</span><span class="o">*</span> <span class="n">m_bar</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个时候编译器会给出警告，因为没有bar的析构函数。正确的还是应该把析构函数放进cpp文件里面。</p>

<h2 id="eigen的矩阵判断相等">Eigen的矩阵判断相等</h2>
<p>Eigen库有一个用于判断矩阵是否大致相等的函数，可以这样用</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">typename</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Dynamic</span><span class="p">,</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Dynamic</span><span class="o">&gt;</span> <span class="n">EigenMatrix</span><span class="p">;</span>
 
<span class="n">EigenMatrix</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
 
<span class="c1">// True if equal
</span><span class="kt">bool</span> <span class="n">r</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">isApprox</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mf">1e-5</span><span class="p">);</span>
</code></pre></div></div>
<p>原理是两个矩阵相减并求Frobenius范数。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> C++ </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[一个三角恒等式的证明]]></title>
      <url>/math/2018/04/18/TrigonometricFormula/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>一道神奇的三角恒等式的证明（非原创）</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />
<p>在柯斯特利金的《代数学引论》里面居然看到了这样的一个恒等式：
\begin{equation}
\sum_{k=1}^n \cot^2(\frac{k\pi}{2n+1}) = \frac{n(2n-1)}{3}
\end{equation}
自己想了想，用数学归纳法没有证明出来，于是谷歌查解法（谷歌的匹配还是很强大的），查到证明如下，书上的留白太小，所以把它记录在这里：
首先是一个引理，也是一个恒等式
\begin{equation}
\tan rx=\frac{\binom r1\tan x-\binom r3\tan^3x+\cdots}{1-\binom r2\tan^2x+\cdots}
\end{equation}
证明如下：
根据复变函数欧拉公式和二项式展开定理可以得到
<script type="math/tex">% <![CDATA[
\begin{align}
\sin rx&=\binom r1\cos^{r-1}x\sin x-\binom r3\cos^{r-3}x\sin^3x+\binom r5\cos^{r-5}x\sin^5x-\cdots\\
&=\cos^nx\left(1-\binom r2\tan^2x+\binom r4\tan^4x-\cdots\right)
\end{align} %]]></script><br />
<script type="math/tex">% <![CDATA[
\begin{align}
\cos rx &= \cos^rx-\binom r2\cos^{r-2}x\sin^2x+\binom r4\cos^{r-4}x\sin^4x-\cdots\\
&= \cos^nx\left(1-\binom r2\tan^2x+\binom r4\tan^4x-\cdots\right)
\end{align} %]]></script>
相除得到
\begin{equation}
\tan rx=\frac{\binom r1\tan x-\binom r3\tan^3x+\binom r5\tan^5x-\cdots}{1-\binom r2\tan^2x+\binom r4\tan^4x-\cdots}
\end{equation}
接下来，如果$\tan(2n+1)x=0$，即$(2n+1)x=n\pi,n\in N$，那么$\tan x$将满足方程
\begin{equation}
\binom{2n+1}1\tan x-\binom{2n+1}3\tan^3x+\cdots+(-1)^{n}\tan^{2n+1}x=0
\end{equation}
令$\tan^2 x = \frac{1}{y}$，那么$y$会是下面的多项式的根：
\begin{equation}
\binom{2n+1}1y^n-\binom{2n+1}3y^{n-1}+\cdots+(-1)^n=0
\end{equation}
方程的根为$\cot^2x = y$，当$x=0,\pm\dfrac{\pi}{2n+1},\pm\dfrac{2\pi}{2n+1},\pm\dfrac{k\pi}{2n+1}$<br />
最后，由韦达定理可以得到
\begin{equation}
\implies \sum_{k=1}^n \cot^2(\frac{k\pi}{2n+1}) = \frac{n(2n-1)}{3}
\end{equation}</p>
]]></content>
      <categories>
        
          <category> Math </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[在Windows下编译deal.ii]]></title>
      <url>/programming/2018/04/17/buildDealii/</url>
      <content type="html"><![CDATA[<p><strong>在Windows下用MSVC2017编译deal.ii</strong></p>

<hr />
<p>最近由于一些原因需要学习开源有限元的程序。在Github上找了一下，C++的还算有三位数stars的有deal.ii,libMesh和mFem（按照stars数目由多到少排列）。libMesh的代码下载下来居然不支持cmake，编译只能用msys来make，似乎也不能用MSVC编译。而deal.ii只能支持MSVC而不支持mingw.权衡了一下，选择deal.ii来学习，一个是它stars数多，知名度更高，另一个是mingw的编译器编译出来的程序通常比MSVC编译出来的更慢，这个在科学计算中比较头疼。</p>

<p>CMake里面configure的过程要设置一大堆flag，我都没有管，毕竟windows什么都特别不方便。像LAPACK库，GSL库我觉得还是有必要去链接的。希望这个东西的矩阵运算效率至少能够达到Eigen的水平。Configure第一次不对劲，原因竟然是我设置的build目录里面有’-‘减号。重新设置了build目录以后，生成了sln文件，感觉似乎有点希望了。不过不敢乐观，以前cmake成功但是sln最后还是编译不了的例子也有。</p>

<p>打开MSVC后，开始编译。很神奇的是，编译到一半出错了，说cmd停止运行，然后打开目录里面却发现已经deal_II.g.lib和deal_II.lib生成了。这个时候我相信它是编译成功了，但是打开别的test目录里却发现没有编译，examples也没有。有些失落，直接试试这个库到底能不能用。</p>

<p>直接把官网的第一个例子复制过来，用QMake编译：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* ---------------------------------------------------------------------
 *
 * Copyright (C) 1999 - 2016 by the deal.II authors
 *
 * This file is part of the deal.II library.
 *
 * The deal.II library is free software; you can use it, redistribute
 * it, and/or modify it under the terms of the GNU Lesser General
 * Public License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * The full text of the license can be found in the file LICENSE at
 * the top level of the deal.II distribution.
 *
 * ---------------------------------------------------------------------

 */</span>


<span class="cp">#include &lt;deal.II/grid/tria.h&gt;
#include &lt;deal.II/grid/tria_accessor.h&gt;
#include &lt;deal.II/grid/tria_iterator.h&gt;
#include &lt;deal.II/grid/grid_generator.h&gt;
#include &lt;deal.II/grid/manifold_lib.h&gt;
#include &lt;deal.II/grid/grid_out.h&gt;
</span>
<span class="cp">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cmath&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">dealii</span><span class="p">;</span>


<span class="kt">void</span> <span class="nf">first_grid</span> <span class="p">()</span>
<span class="p">{</span>
  <span class="n">Triangulation</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="n">triangulation</span><span class="p">;</span>

  <span class="n">GridGenerator</span><span class="o">::</span><span class="n">hyper_cube</span> <span class="p">(</span><span class="n">triangulation</span><span class="p">);</span>
  <span class="n">triangulation</span><span class="p">.</span><span class="n">refine_global</span> <span class="p">(</span><span class="mi">4</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">out</span> <span class="p">(</span><span class="s">"grid-1.eps"</span><span class="p">);</span>
  <span class="n">GridOut</span> <span class="n">grid_out</span><span class="p">;</span>
  <span class="n">grid_out</span><span class="p">.</span><span class="n">write_eps</span> <span class="p">(</span><span class="n">triangulation</span><span class="p">,</span> <span class="n">out</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Grid written to grid-1.eps"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>




<span class="kt">void</span> <span class="nf">second_grid</span> <span class="p">()</span>
<span class="p">{</span>
  <span class="n">Triangulation</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="n">triangulation</span><span class="p">;</span>

  <span class="k">const</span> <span class="n">Point</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="n">center</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">const</span> <span class="kt">double</span> <span class="n">inner_radius</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
               <span class="n">outer_radius</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
  <span class="n">GridGenerator</span><span class="o">::</span><span class="n">hyper_shell</span> <span class="p">(</span><span class="n">triangulation</span><span class="p">,</span>
                              <span class="n">center</span><span class="p">,</span> <span class="n">inner_radius</span><span class="p">,</span> <span class="n">outer_radius</span><span class="p">,</span>
                              <span class="mi">10</span><span class="p">);</span>
  <span class="k">const</span> <span class="n">SphericalManifold</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="n">manifold_description</span><span class="p">(</span><span class="n">center</span><span class="p">);</span>
  <span class="n">triangulation</span><span class="p">.</span><span class="n">set_manifold</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">manifold_description</span><span class="p">);</span>
  <span class="n">triangulation</span><span class="p">.</span><span class="n">set_all_manifold_ids</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">step</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">step</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">step</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">Triangulation</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;::</span><span class="n">active_cell_iterator</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">triangulation</span><span class="p">.</span><span class="n">begin_active</span><span class="p">();</span>
      <span class="n">Triangulation</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;::</span><span class="n">active_cell_iterator</span> <span class="n">endc</span> <span class="o">=</span> <span class="n">triangulation</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
      <span class="k">for</span> <span class="p">(;</span> <span class="n">cell</span><span class="o">!=</span><span class="n">endc</span><span class="p">;</span> <span class="o">++</span><span class="n">cell</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
               <span class="n">v</span> <span class="o">&lt;</span> <span class="n">GeometryInfo</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;::</span><span class="n">vertices_per_cell</span><span class="p">;</span>
               <span class="o">++</span><span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
              <span class="k">const</span> <span class="kt">double</span> <span class="n">distance_from_center</span>
                <span class="o">=</span> <span class="n">center</span><span class="p">.</span><span class="n">distance</span> <span class="p">(</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">vertex</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>

              <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">fabs</span><span class="p">(</span><span class="n">distance_from_center</span> <span class="o">-</span> <span class="n">inner_radius</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1e-10</span><span class="p">)</span>
                <span class="p">{</span>
                  <span class="n">cell</span><span class="o">-&gt;</span><span class="n">set_refine_flag</span> <span class="p">();</span>
                  <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

      <span class="n">triangulation</span><span class="p">.</span><span class="n">execute_coarsening_and_refinement</span> <span class="p">();</span>
    <span class="p">}</span>


  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">out</span> <span class="p">(</span><span class="s">"grid-2.eps"</span><span class="p">);</span>
  <span class="n">GridOut</span> <span class="n">grid_out</span><span class="p">;</span>
  <span class="n">grid_out</span><span class="p">.</span><span class="n">write_eps</span> <span class="p">(</span><span class="n">triangulation</span><span class="p">,</span> <span class="n">out</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Grid written to grid-2.eps"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

  <span class="n">triangulation</span><span class="p">.</span><span class="n">set_manifold</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>




<span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span>
<span class="p">{</span>
  <span class="n">first_grid</span> <span class="p">();</span>
  <span class="n">second_grid</span> <span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>编译的时候也是坑，又提示需要include boost，我在QMAKE加了boost目录，还是没有包含，干脆把所有的boost文件全部复制到deal.ii的include路径下。而且deal.iibuild目录下的include和deal.ii源代码下的include还要合并。然后又说不对，还需要链接boost::serialization库，接着又是链接这个库。还是不对，说<code class="highlighter-rouge">triangulation.set_manifold (0);</code>没有这个方法。把这一行注释掉，运行又有问题，不过倒是输出了eps图片。到底编译成功没有还是个未知数。</p>

<p>接着是第二个例子，用刚才的QMAKE配置一次成功。第三个例子的一句话是<code class="highlighter-rouge">Functions::ZeroFunction&lt;2&gt;</code>，又不对了，需要自己包含<code class="highlighter-rouge">#include &lt;deal.II/base/function.h&gt;</code>，然后还不对，进头文件一看，ZeroFunction继承于Functions类，这个官网的例子实在有点扯。最后编译成功了。但是出的gpl图居然又不能在GNU PLOT里面打开，说有语法错误。</p>

<p>用release又编译了第四个例子，一次成功了，但是又费劲地用three.js渲染vtk文件，没有显示出来，不知道是什么毛病。只能说姑且认为这个编译成功了，但是坑还很大。</p>

<hr />
<p>第二个例子生成了svg图片，不小心发现了我的win10电脑上居然还有IE,版本是11，果断试试<a href="https://scienceasdf.github.io">我的网站</a>在IE11上的兼容性，好像很差（主要是sql.js和echarts）。非常无奈，中国还有许多人用IE，现在移动端对html5的支持居然都比IE好。不过edge长得太像IE了，微软改名部啊:Grin:</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 有限元 </tag>
        
          <tag> 数值算法 </tag>
        
          <tag> boost </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[初窥含太阳系动力系统在内的几类动力系统]]></title>
      <url>/dynamics/2018/04/12/dynamics/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>初步认识一些动力系统，如太阳系系统，混沌系统等，并研究其数值解法</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />
<p>最近看boost::numeric::odeint的文档，发现了一些很有趣的动力系统。</p>
<h2 id="太阳系系统">太阳系系统</h2>
<p>这个看起来简单，无非就是万有引力的动力学，但是深入探究并不简单。这里我们想考虑太阳、木星、土星、天王星、海王星等天体的运动以及他们的相互作用。</p>

<hr />
<p><strong>NOTE</strong></p>

<p>一个简单的物理史：二体问题是可积的，可以理论分析得到解析解，而三体问题则不存在解析解。在19世纪末，庞加莱发现了这个问题，并成为混沌理论的始祖。</p>

<hr />
<p>理想的天体运动都是保守场，因此可以列出哈密顿方程。首先是动量的表达式（当然这里的动量的量纲是速度的量纲，但是物理含义是动量）
\begin{equation}
\frac{dq_i}{dt}=p_i
\end{equation}
\begin{equation}
\frac{dp_i}{dt}=\frac{1}{m_i} \sum_{i\neq j}F_{ij}
\end{equation}
那么哈密顿函数的表达式为
\begin{equation}
H=\sum_i \frac{p_i^2}{2m_i}+\sum_j V(q_i,q_j)
\end{equation}
$V(q_i,q_j)$是$i,j$相互的势能。哈密顿方程的动力学方程为
<script type="math/tex">% <![CDATA[
\begin{align}
\frac{dq_i}{dt}&=\frac{dH}{dp_i}\\
\frac{dp_i}{dt}&=-\frac{dH}{dq_i}
\end{align} %]]></script>
在boost库中求解这个动力系统，有专门的辛算法：Runge-Kutta-Nystroem算法，在boost库中是一个叫symplectic_rkn_sb3a_mclachlan的步进器。事实上，对于很多实际生活中的动力系统，只要它有惯性，不耗散，就能够写出哈密顿函数，从而写出正则方程组，用这个算法求解。三体问题就是混沌的了，因此在这个世纪太阳系问题的求解中，必须要选择符合实际的初始条件，否则得不到想要的结果。<br />
而对于一个实际的航天器，考虑的动力学方程通常如下：
<script type="math/tex">\begin{align}\label{eqs_force}
\frac{d^2\mathbf{r}}{dt^2}=-\frac{\mu}{r^3}\mathbf{r}+\nabla \phi_{sj}^o+G\sum_{k\neq j}^{n_b}m_k(\frac{\mathbf{r_{ks}}}{r^3_{ks}}-\frac{\mathbf{r_{kj}}}{r^3_{kj}})+\frac{\dot m_s}{m}\frac{d\mathbf{r}}{dt}-\frac{1}{2}\rho v_{rel}^2\frac{C_dA}{m_s}\hat{\mathbf{v}}_{rel}+\frac{P_{SR}C_RA_{sun}}{m_s}\hat{\mathbf{r}}_{sun}+\frac{\mu}{c^2r^3}((4\frac{\mu}{r}-v^2)\mathbf{r}+4(\mathbf{r\cdot v})\mathbf{v})+2(\mathbf{\Omega}\times\mathbf{v})+2\frac{\mu}{c^2r^3}(\frac{3}{r^2}(\mathbf{r\times v})(\mathbf{r \cdot J})+(\mathbf{v\times J}))
\end{align}</script>
这里某几个项的含义是（不一一赘述了）：</p>
<ul>
  <li>$\nabla \phi_{sj}^o$ 中心天体非圆带来的扰动项</li>
  <li><script type="math/tex">G\sum_{k\neq j}^{n_b}m_k(\frac{\mathbf{r_{ks}}}{r^3_{ks}}-\frac{\mathbf{r_{kj}}}{r^3_{kj}})</script>其它天体的引力扰动项</li>
  <li>$\frac{\dot m_s}{m}\frac{d\mathbf{r}}{dt}$发动机推力</li>
  <li><script type="math/tex">\frac{1}{2}\rho v_{rel}^2\frac{C_dA}{m_s}\hat{\mathbf{v}}_{rel}</script>大气阻力</li>
  <li>$\frac{P_{SR}C_RA_{sun}}{m_s}\hat{\mathbf{r}}_{sun}$是太阳辐射光压</li>
  <li>$\frac{\mu}{c^2r^3}((4\frac{\mu}{r}-v^2)\mathbf{r}+4(\mathbf{r\cdot v})\mathbf{v})$为<a href="https://en.wikipedia.org/wiki/Schwarzschild_metric">史瓦西解（Schwarzsehild solution)</a></li>
  <li>$2(\mathbf{\Omega}\times\mathbf{v})$是<a href="https://en.wikipedia.org/wiki/Geodetic_effect">测地线精度(广义相对论造成的空间扭曲形成的误差)</a></li>
  <li>$2\frac{\mu}{c^2r^3}(\frac{3}{r^2}(\mathbf{r\times v})(\mathbf{r \cdot J})+(\mathbf{v\times J}))$是<a href="https://en.wikipedia.org/wiki/Lense%E2%80%93Thirring_precession">兰斯-蒂林效应(Lens-Thirring Precession)</a></li>
</ul>

<p>广义相对论对受力的修正作用就是式(\ref{eqs_force})的最后三项，即[1]
<script type="math/tex">\begin{align}
\mathbf{a}_r=\frac{\mu}{c^2r^3}((4\frac{\mu}{r}-v^2)\mathbf{r}+4(\mathbf{r\cdot v})\mathbf{v})+2(\mathbf{\Omega}\times\mathbf{v})+2\frac{\mu}{c^2r^3}(\frac{3}{r^2}(\mathbf{r\times v})(\mathbf{r \cdot J})+(\mathbf{v\times J}))
\end{align}</script>
如果在J2000坐标系下，那么</p>
<ul>
  <li><script type="math/tex">\mathbf{\Omega}=\frac{3}{2}\mathbf{v}_{B/S}\times(\frac{-\mu\mathbf{r}_{B/S}}{c^2r^3_{B/S}})</script>是一个近似</li>
  <li>$c$是光速</li>
  <li>$\mathbf{r}$是在J2000坐标系下的位置矢量</li>
  <li>$\mathbf{v}$是在J2000坐标系下的速度矢量</li>
  <li>$\mathbf{r}_{B/S}$是中心天体相对于太阳的位置矢量</li>
  <li>$\mathbf{v}_{B/S}$是中心天体相对于太阳的速度矢量</li>
  <li>$\mathbf{J}$是中心天体的单位质量角动量，有$\mathbf{J}=\mathbf{R}^{I/F}_B[0\quad 0\quad \frac{2}{5}R_B^2\omega_B]^T$，而$\mathbf{R}^{I/F}_B$是中心天体的体坐标系到惯性系的旋转矩阵，$R_B$是中心天体的平均赤道半径，$\omega_B$是中心天体的自旋速度。</li>
</ul>

<p>式(\ref{eqs_force})数值求解通常的方法是广义的龙格库塔法，见<a href="https://scienceasdf.github.io/programming/2017/03/27/rigidBody/">我之前的讨论</a>。</p>

<h2 id="混沌系统与李雅普诺夫指数">混沌系统与李雅普诺夫指数</h2>
<p>这个系统我是没怎么看懂。。。设$x$是自变量，$\delta x$是扰动量。扰动量满足线性微分方程，但是是时间相关的：
\begin{equation}
\frac{d\delta x}{dt}=J(x)\delta x
\end{equation}
<a href="https://en.wikipedia.org/wiki/Lyapunov_exponent">李雅普诺夫指数</a>被定义为扰动随指数形式增长的那个对数。如果存在一个李雅普诺夫指数大于0那么扰动会发散，形成混沌。如果所有李雅普诺夫指数都小于0，那么扰动将收敛至一个点。<br />
为了计算李雅普诺夫指数，需要首先求解扰动动力学方程，每过k步后将结果正交化，李雅普诺夫指数可以用取对数的方法得到，再多次计算取平均值。boost::numeric::odeint的test有相关代码。这个东西我是真的没搞明白是什么……</p>

<h2 id="刚性方程">刚性方程</h2>
<p>在数学领域中，<a href="https://en.wikipedia.org/wiki/Stiff_equation">刚性方程</a>是指一个微分方程，其数值分析的解只有在时间间隔很小时才会稳定，只要时间间隔略大，其解就会不稳定。特点是特征值的实部均为负数并且实部最大的的特征值的实部与实部最小的的特征值的实部的比值远大于1。化学反应的动力学方程可能会是这样的方程，如果各个子反应的速率相差非常大。
<script type="math/tex">\begin{align}
\left\{
    \begin{array}{l}
    \frac{dS_1}{dt}=-101S_2-100S_1\\
    \frac{dS_2}{dt}=-S_1 
    \end{array}
\right.
\end{align}</script>
刚性系统需要用Rosenbrock method来求解。boost::numeric::odeint提供了这个算法，然而坑的是必须和boost::ublas一起用。。。odeint的文档提供了一个对比，如果用Rosenbrock算法，只需要71步迭代，而龙格库塔算法，准确说是Dormand-Prince 5算法需要1531次迭代。</p>

<h2 id="stuart-landau振子">Stuart-Landau振子</h2>
<p>微分方程也可以是复数的形式，如下面这个例子，Stuart-Landau oscillator:
\begin{equation}
\frac{d\Psi}{dt}=(1=i\eta)\Psi+(1+i\alpha)|\Psi|^2\Psi 
\end{equation}
这个系统表示了什么，我也不知道。从数值求解来说，这个系统虽然数域是复数域，不过依然可以用4阶龙格库塔算法求解。</p>

<h2 id="网格动力系统">网格动力系统</h2>
<p>一个突出的例子是<a href="https://en.wikipedia.org/wiki/Fermi%E2%80%93Pasta%E2%80%93Ulam%E2%80%93Tsingou_problem">Fermi-Pasta-Ulam系统</a>，这是一个非线性的哈密顿系统，哈密顿函数为
\begin{equation}
H=\sum_i \frac{p_i^2}{2}+\frac{1}{2}(q_{i+1}-q_i)^2+\frac{\beta}{4}(q_{i+1}-q_i)^4
\end{equation}
和太阳系动力系统一样，这个系统也适合用辛求解算法，但是更为简单，因为$\frac{dq_i}{dt}=p_i$.<br />
有纪念意义的是，FPU系统的求解是世界上最早的计算机上的数值实验。在1953年，洛斯阿拉莫斯，在世界上最早的计算机之一（MANIAC I）进行了这项研究，并触发了一个数学物理学的新领域。</p>

<h2 id="振子集合">振子集合</h2>
<p>N-N耦合相位振子（N all-to all coupled phase oscillator）定义为
\begin{equation}
\frac{d\phi_k}{dt}=\omega_k+\frac{\epsilon}{N}\sin(\phi_i-\phi_k)
\end{equation}
各个振子的自然频率满足某种分布，$\epsilon$是耦合强度。如果我们取$\omega_i$的分布为洛伦兹分布（其实就是<a href="https://en.wikipedia.org/wiki/Cauchy_distribution">柯西分布</a>，物理学上一般叫做洛伦兹分布），那么我们会观察到一个有趣的现象：当耦合强度超过某个临界值后，振子间会发生相位转移，伺候振子会以共同的频率运动。这种转移被称为<a href="https://en.wikipedia.org/wiki/Kuramoto_model">Kuramoto transition</a>。这个动力学系统本身的数值求解直接用4阶龙格库塔就行。</p>

<hr />
<h2 id="参考文献">参考文献</h2>
<p>[1]Huang C, Ries J C, Tapley B D, et al. Relativistic effects for near-earth satellite orbit determination[J]. Celestial Mechanics &amp; Dynamical Astronomy, 1990, 48(2):167-185.</p>
]]></content>
      <categories>
        
          <category> Dynamics </category>
        
      </categories>
      <tags>
        
          <tag> 天文 </tag>
        
          <tag> 动力学 </tag>
        
          <tag> 数值算法 </tag>
        
          <tag> boost </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[初窥牛顿平方反比定律和胡克定律的对偶性]]></title>
      <url>/dynamics/2018/04/12/astrodynamics3/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>探讨牛顿平方反比定律与胡克定律的对偶性，研究相关的动力学系统以及共形映射。本文的大多数结论来自于Arnold等人的著作。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />
<h2 id="共形映射">共形映射</h2>
<p>这个是复变函数论的一个重要工具，在这里我们需要以下两个共形映射函数。（吐槽一下，百度的ECharts实在不适合绘制数学函数）</p>
<h3 id="茹科夫斯基函数">茹科夫斯基函数</h3>
<p>\begin{equation}
f(z) = z+\frac{1}{z}
\end{equation}
若$z=|R|&gt;1$，则得到的是焦点为$\pm 2$的椭圆，证明如下：
\begin{equation}
z=R(\cos\theta+i\sin\theta)
\end{equation}
那么有
<script type="math/tex">% <![CDATA[
\begin{align}
f(z)&=z+\frac{1}{z}\\
&=R(\cos\theta+i\sin\theta)+\frac{1}{R(\cos\theta+i\sin\theta)}\\
&=R(\cos\theta+i\sin\theta)+\frac{1}{R}(\cos\theta-i\sin\theta)\\
&=(R+\frac{1}{R})\cos\theta+i(R-\frac{1}{R})\sin\theta
\end{align} %]]></script>
很显然可以得到：<br />
<script type="math/tex">a=R+\frac{1}{R}</script><br />
<script type="math/tex">b=R-\frac{1}{R}</script><br />
<script type="math/tex">c=\sqrt{a^2-b^2}=2</script><br />
<img src="http://localhost:4000/assets//blog_images/Jukowsky.png" width="500px" /></p>

<h3 id="平方函数">平方函数</h3>
<p>\begin{equation}
f(z)=z^2
\end{equation}
设$z$为一个椭圆，$z=a\cos\theta+ib\sin\theta$
则有：
<script type="math/tex">% <![CDATA[
\begin{align}
f(z)&=a^2\cos^2\theta-b^2\sin^2\theta+2ab\cos\theta\sin\theta i\\
&=\frac{a^2(1+\cos 2\theta)}{2}-\frac{b^2(1-\cos{2\theta})}{2}+ab\sin{2\theta}i\\
&=\frac{a^2-b^2}{2}+\frac{a^2+b^2}{2}\cos{2\theta}+ab\sin{2\theta}i
\end{align} %]]></script>
可以得到映射后的图形是其中一个焦点在原点的椭圆<br />
<script type="math/tex">A=\frac{a^2+b^2}{2}</script><br />
<script type="math/tex">B=ab</script><br />
<script type="math/tex">C=\frac{a^2-b^2}{2}</script><br />
<img src="http://localhost:4000/assets//blog_images/square.PNG" width="500px" /></p>

<h2 id="胡克定律">胡克定律</h2>
<p>胡克定律
\begin{equation}
\mathbf{F}=-k\mathbf{x}
\end{equation}
这个东西与椭圆也大有关系。首先，在一维问题中，如果一个小球和弹簧相连，那么会形成简谐振动，而简谐振动的相平面就是椭圆（能量守恒易得）。我们考虑更加复杂的情况：一个弹簧连着一个小球进行二维平面运动，也会得到椭圆的运动轨迹，证明如下<a href="http://www.physics.hmc.edu/~saeta/courses/p111/uploads/Y2011/HSChapter6.pdf">[1]</a>：<br />
将平面运动分解为径向和周向的速度分量，角动量方程为：
\begin{equation}
L=mr^2\dot\theta
\end{equation}
能量方程为：
\begin{equation}
E=\frac{1}{2}m\dot r^2+\frac{L^2}{2mr^2}+U(r)
\end{equation}
根据以上两个方程，可以分别求出$r,\theta$对时间的导数，因此可以得到
\begin{equation}
\frac{dr}{d\theta}=\frac{dr/dt}{d\theta/dt}=\pm\sqrt{\frac{2m}{l^2}}r^2\sqrt{E-l^2/2mr^2-U(r)}
\end{equation}
\begin{equation}
\theta=\int d\theta=\pm\frac{l}{\sqrt{2m}}\int^r\frac{dr/r^2}{\sqrt{E-l^2/2mr^2-U(r)}}
\end{equation}
势能的表达式
\begin{equation}
U=0.5kr^2
\end{equation}
因此可以得到
\begin{equation}
\theta(r)=\pm\frac{i}{\sqrt{2m}}\int^r\frac{dr/r^2}{\sqrt{E-l^2/2mr^2-0.5kr^2}}
\end{equation}
令$z=r^2$，有
\begin{equation}
\theta(z)=\pm\frac{l}{2\sqrt{2m}}\int^z\frac{dz/z}{\sqrt{-l^2/2m+Ez-(k/2)z^2}}
\end{equation}
因为
\begin{equation}
\int^z\frac{dz/z}{\sqrt{a+bz+cz^2}}=\frac{1}{-a}\mathrm{asin}(\frac{bz+2a}{z\sqrt{b^2-4ac}})
\end{equation}
所以有
\begin{equation}
\theta-\theta_0=\pm\frac{1}{2}\mathrm{asin}(\frac{Er^2-l^2/m}{r^2\sqrt{E^2-kl^2/m}})
\end{equation}
反解$r$得到
\begin{equation}
r^2(\theta)=\frac{l^2/m}{E\mp(\sqrt{E^2-kl^2/m})\sin{2(\theta-\theta_0)}}
\end{equation}
显然，这个轨道是闭合的（因为$r^2(\theta+2\pi)=r^2(\theta)$），也可以证明表示的是一个椭圆（把分母有理化）。不过如果我们知道比如长轴的位置速度信息，求短轴就不必这么麻烦，一个角动量守恒方程一个能量守恒方程就可以得到短轴的位置速度。</p>

<h2 id="牛顿平方反比定律与胡克定律的对偶性">牛顿平方反比定律与胡克定律的对偶性</h2>
<p>参考文献为<a href="https://www.researchgate.net/publication/228571130_Planetary_Motion_and_the_Duality_of_Force_Laws">[2]</a>(W. Hall, Rachel &amp; Josic, Kresimir. (2000). Planetary Motion and the Duality of Force Laws. Society for Industrial and Applied Mathematics. 42. 115-124. 10.1137/S0036144598346005. )</p>

<p>考虑胡克定律的动力学形式为复数形式：
\begin{equation}
\ddot w = -Cw
\end{equation}
这里的时间自变量为$t$，假设另一个时间变量$\tau$满足$\tau=\tau(t)$，另外一个运动$z=z(\tau)$，我们会得到$\frac{d^2z}{d\tau^2}=-\tilde{C}\frac{z}{|z|^3}$.<br />
事实上，只要做变换$z=w^2$，并令$\frac{d\tau}{dt}=|w|^2$，就可以得到平方反比的形式，证明如下：
<script type="math/tex">% <![CDATA[
\begin{align}
\frac{d^2z}{d\tau^2}&=\frac{1}{|w|^2}\frac{d}{dt}(\frac{1}{|w|^2}\frac{dw^2}{dt})\\
&=\frac{2}{w\bar w}\frac{d}{dt}(\frac{1}{\bar w}\frac{dw}{dt})\\
&=\frac{2}{w\bar w^3}\frac{dw}{dt}\frac{d\bar w}{dt}+\frac{2}{w\bar w^2}\frac{d^2w}{dt^2}\\
&=-\frac{2}{w\bar w}[\bar w^{-2}\frac{dw}{dt}\bar{\frac{dw}{dt}}+C\frac{w}{\bar w}]\\
&=-2w^{-1}(\bar w)^{-3}[|\dot w|^2+C|w|^2]
\end{align} %]]></script>
现在令$E_w=\frac{1}{2}(|\dot w|^2+C|w|^2)$，可以得到
\begin{equation}
\frac{d^2 z}{d\tau^2}=-4E_ww^{-1}\bar w^{-3}=-4E_w\frac{z}{|z|^3}
\end{equation}
这就是我们想要得到的形式。不得不说，Arnold等人的想法太意识流了，这也能想到。<br />
其实核心就在于上面的那个平方关系的共形映射，让中心在原点的椭圆映射到焦点在原点的椭圆。而那个$\tau,t$的关系是如何得到的呢？事实上，由于角动量守恒，胡克椭圆和开普勒椭圆都会满足面积率。我们记$A_1,A_2$分别是$w(t),z(\tau)$所扫过的面积。$w(t)=(r,\theta)$，而$z=w^2(t)=(r^2,2\theta)$.可以得到
<script type="math/tex">% <![CDATA[
\begin{align}
\mathrm{const}&=\frac{\frac{dA_1}{dt}}{\frac{dA_2}{dt}}\\
&=\frac{r\theta\frac{dr}{dt}+0.5r^2\frac{d\theta}{dt}}{2r^3\theta\frac{dr}{dt}+r^4\frac{d\theta}{dt}}\\
&=\frac{1}{2}\frac{d\tau}{dt}\frac{1}{r^2}\\
&=\frac{1}{2}\frac{d\tau}{dt}\frac{1}{|w|^2}
\end{align} %]]></script>
这样想到的取$\frac{d\tau}{dt}=|w|^2$……<br />
上面这个东西还可以进一步推论：点在幂为$a$的力场中的轨道，在经过适当的变换$w=z^\beta$后变成幂为A的力场中的轨道，则有$A,a,\beta$满足：<br />
<script type="math/tex">(a+3)(A+4)=4,\quad \beta=\frac{a+3}{2}</script><br />
证明过程与刚才类似，不过需要注意的是要选择的$\tau$要满足关系
\begin{equation}
\frac{d\tau}{dt}=\frac{|z(\tau(t))|^2}{|w(t)|^2}=|w(t)|^{2(\beta-1)}
\end{equation}</p>
]]></content>
      <categories>
        
          <category> Dynamics </category>
        
      </categories>
      <tags>
        
          <tag> 天文 </tag>
        
          <tag> 动力学 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[在线绘制星下点轨迹]]></title>
      <url>/programming/2018/04/06/groundTrackPlot/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>自己写了写网页绘制星下点轨迹的代码。</strong></p>

<hr />
<h2 id="算法">算法</h2>
<p>这个算是原创算法了吧，身边没有轨道动力学和弹道导弹学的教材，都是自己瞎琢磨的算法。之前我们分析了<a href="https://scienceasdf.github.io/programming/2017/04/07/astrodynamics1/">轨道动力学中常用的计算机算法</a>,<a href="https://scienceasdf.github.io/programming/2017/04/14/astrodynamics2/">轨道动力学中常用的计算机算法（二）</a>，这些很有用，可以让我们把轨道六根数转化为笛卡尔坐标系的坐标，以及进行轨道外推。</p>

<p>星下点轨迹的具体计算过程如下：每隔时间$dt$后，外推此时的轨道六根数，并得到相应的笛卡尔坐标系坐标。然后经度
\begin{equation}
\lambda = \mathrm{atan2}(y,x)
\end{equation}
纬度
\begin{equation}
\phi = \mathrm{asin}(\frac{z}{r})
\end{equation}
其中
\begin{equation}
r=\sqrt{x^2+y^2+z^2}
\end{equation}
这里就基本完成了。不过还要考虑地球自转的影响，这个很让人头疼，因为atan2函数本身值域没问题,$[-\pi,\pi]$,但是考虑地球自转后需要
\begin{equation}
\lambda = \lambda - t * \omega
\end{equation}
这样$\lambda$的值域就会变化。想了挺长时间，得到这样的一种解决方法</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">geo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">adjust</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="kr">long</span> <span class="o">&gt;</span> <span class="mi">180</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="kr">long</span> <span class="o">&lt;</span> <span class="mi">180</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">theta</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="kr">long</span> <span class="o">*</span> <span class="nx">radPerDeg</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">theta</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">theta</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="kr">long</span> <span class="o">=</span> <span class="nx">res</span> <span class="o">*</span> <span class="nx">degPerRad</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="具体实现">具体实现</h2>
<p>我是javascript的门外汉，把我以前写的C++代码全部移植到javascript很是费劲。不过运算速度比我想象中快多了。这里直接用的是开普勒运动的轨道外推，如果考虑摄动项那就需要用龙格库塔算法了。整个javascript的代码在<a href="https://scienceasdf.github.io/site/js/orbitState.js">orbitState.js</a>，代码是可读的。</p>

<p>UI还是以前的东西，用jQuery Mobile+ECharts做的。最后，绘图的连接在<a href="https://scienceasdf.github.io/site/groundTrackPlot.html">这里</a>。</p>

<hr />
<h2 id="更新2018-4-8">更新（2018-4-8）</h2>
<p>另外自己还做了一个<a href="https://scienceasdf.github.io/site/TLE/index.html">在线解析TLE数据绘制星下点轨迹的网页</a>，这个的算法就不是我写的了，而是用的开源的<a href="https://github.com/shashwatak/satellite-js">satellite.js</a>的SGP4算法，他的代码也写得非常好。网页里面还有试一试功能，就是在NORAD的网站里面按编号随机抓取一个TLE数据，不过再度遇到了跨域访问的问题，这一次的解决方法则是protocol:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> 
  <span class="na">type</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span> 
  <span class="na">url</span><span class="p">:</span> <span class="s1">'https://crossorigin.me/https://celestrak.com/cgi-bin/TLE.pl?CATNR='</span> <span class="o">+</span> <span class="nx">rndSat</span> <span class="o">+</span> <span class="s1">'&amp;callback=?'</span> <span class="p">,</span> 
  <span class="na">cache</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span> 
  <span class="na">dataType</span><span class="p">:</span> <span class="s2">"text"</span><span class="p">,</span> 
  <span class="na">crossDomain</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> 
  <span class="na">headers</span> <span class="p">:</span> <span class="p">{</span><span class="s1">'Origin'</span><span class="p">:</span><span class="s1">'http://foo.example'</span><span class="p">},</span> 
  <span class="na">success</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span> 
    <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">'html'</span> <span class="p">);</span>
    <span class="nx">el</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span> <span class="s1">'BODY'</span> <span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'PRE'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">textContent</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">eachLine</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/</span><span class="se">[\n]</span><span class="sr">/</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">eachLine</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'No TLE found'</span><span class="p">){</span>
      <span class="nx">$</span><span class="p">(</span> <span class="s2">"#myPopup3"</span> <span class="p">).</span><span class="nx">popup</span><span class="p">(</span> <span class="s2">"open"</span> <span class="p">);</span>   
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="kd">var</span> <span class="nx">titleStr</span> <span class="o">=</span> <span class="nx">eachLine</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[\s]</span><span class="sr">deb/ig</span><span class="p">,</span> <span class="s2">"的碎片"</span><span class="p">);</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="s2">"随机得到的卫星名字是"</span> <span class="o">+</span> <span class="nx">titleStr</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">'#areaTLE'</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">eachLine</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s1">'</span><span class="err">\</span><span class="s1">n'</span> <span class="o">+</span> <span class="nx">eachLine</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
      <span class="nx">boolNotGet</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
<p>没错，通过一个crossorigin.me的网站来抓数据，这样就可以实现跨域访问了。但是需要注意的是一定要加上Origin的访问头，否则得不到数据。</p>
<h3 id="2018-4-14更新">2018-4-14更新</h3>
<p>https://crossorigin.me访问不了了，只能登陆http://crossorigin，又是费了很大劲找解决方案。最终找到了一个替代的网站：https://cors-anywhere.herokuapp.com，和crossorigin的使用没什么区别。还有一些不支持https的站点，以及一些用不了的站点，我就不列举在这里了。</p>

<h2 id="航天类开源代码一览">航天类开源代码一览</h2>
<ul>
  <li><a href="https://sourceforge.net/projects/gmat/">GMAT</a>：这个是对我帮助最大的一个软件，C++的代码，软件设计非常好，无论是数学类算法还是从软件工程上说大量设计模式的运用，能够在一定程度上取代STK，不过遗憾的是GUI是用wxWidgets写的，如果是Qt就好了；</li>
  <li><a href="https://github.com/shashwatak/satellite-js">satellite.js</a>：就是我网页里用到的开源代码，写得也很好，可以实现在网页中的计算（如果结合three.js这些3D渲染框架，在网页上还能进行动画演示）；</li>
  <li><a href="http://www.celestrak.com/publications/AIAA/2006-6753/">Vallado的代码</a>：这个Vallodo是天体动力学的祖师级大神，他的代码我虽然没有看过，但是他的代码和学术出版都是对我有很大帮助的，satellite.js的代码就是参考了Vallado的代码的；</li>
</ul>

<p>下面的这些我不太了解了，仅供参考：</p>
<ul>
  <li><a href="http://previsat.sourceforge.net/">PreviSat</a>：还在更新，C++写的，Qt做GUI；</li>
  <li><a href="http://www.gano.name/shawn/JSatTrak/">JSatTrak</a>：Java写的，更新很慢；</li>
  <li><a href="http://jat.sourceforge.net/">JAT</a>：Java写的，没更新了；</li>
  <li><a href="http://odtbx.sourceforge.net/">ODTBX</a>：Java写的，更新很慢；</li>
  <li><a href="https://www.orekit.org/">Orekit</a>：Java写的，更新很慢；</li>
  <li><a href="rhodesmill.org/pyephem/">PyEphem</a>：Python库，很久没更新了；</li>
  <li><a href="https://pypi.python.org/pypi/sgp4/">SGP4</a>：Python库，很久没更新了</li>
</ul>

<p>这些开源的不知道为什么有不少托管在SourceForge上面，按理说GitHub生态更好啊。不更新也可以理解，毕竟航天这个东西生态圈太小了。<br />
另外再给两个在网页上渲染轨道运行的网页的例子，托管在GitHub上的：<a href="https://github.com/koansys/isat">SOT</a>    <a href="https://github.com/daoneil/spacemission">spacemission</a></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> JavaScript </tag>
        
          <tag> 天文 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[在手机上绘制根轨迹（2）]]></title>
      <url>/programming/2018/04/04/easyAuto(2)/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>另一种方式实现手机上绘制根轨迹。并且在手机上绘制螺旋桨性能曲线。</strong></p>

<hr />
<h2 id="在手机上绘制根轨迹">在手机上绘制根轨迹</h2>

<p>上一次写的easyAuto，好倒是挺好的，但是有一个问题：仅仅有安卓的版本，没有iOS版本。这样一来，有很多用户无法得到方便。因此，要么自己买一套iOS的设备，要么换一种方式：网页实现。</p>

<p>网页绘制的好处有很多，可以实现真正的跨平台，每一次代码的更新用户并不需要任何的升级这些，因此好处太多了。没能开发iOS程序一直是我的遗憾，这样也算是一种弥补。现在的前端技术很火，bootcdn上面一大堆js库，都很有意思，没事浏览浏览上面的目录，说不定能发现宝贝。</p>

<p>在上次的文章里我们详细的讨论了算法，又是多项式又是矩阵什么的，比较麻烦。网上找到的轮子有</p>
<ul>
  <li>math.js库，比较强大，但是矩阵不能求特征值</li>
  <li>numerical.js库，很久没有更新了，矩阵能够求特征值，还有样条插值函数</li>
  <li>polynomial.js，比较简陋，就是用来表示多项式的
即使有这些低层次的轮子，要移植我曾经的一大堆专门的数值代码也是非常麻烦的。手写就不说了，自己想想都觉得多。我在网上看到了几种方案：</li>
  <li>emscripten-qt直接移植Qt程序，这个项目已经没有维护了，不可能能移植QtCharts模块</li>
  <li>Qt+WebAssembly，看了几个demo，效果很差</li>
  <li>在网页里面直接运行apk，也没有看见理想的方案</li>
  <li>用emscripten移植数值算法的代码，但是自己本来就完全不会javascript，这样自己也会更麻烦</li>
</ul>

<p>那也没有实现的办法呢？我想到了WolframAlpha，试了试，可以画根轨迹，当然这个问题可以结束了，所有手机要想画根轨迹直接访问WolframAlpha不就完了？！但是还是要自己写程序，看了看有没有WolframAlpha的API，还真有，那就好说。通过API访问https://api.wolframalpha.com/v2/query?input=root+locus+for+transfer+function+(s%5E2%2B3)%2F(s%5E3%2B5)&amp;format=image&amp;output=JSON&amp;appid=DEMO可以得到一个这样的json:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="s2">"queryresult"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
        </span><span class="s2">"numpods"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="s2">"datatypes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ControlSystem"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"timedout"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="s2">"timedoutpods"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="s2">"timing"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.244</span><span class="p">,</span><span class="w">
        </span><span class="s2">"parsetiming"</span><span class="p">:</span><span class="w"> </span><span class="mf">1.397</span><span class="p">,</span><span class="w">
        </span><span class="s2">"parsetimedout"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
        </span><span class="s2">"recalculate"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MSPa3194185g424ef9ic5i8b000031903e0de369bii3"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://www4d.wolframalpha.com"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"15"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"related"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=MSPa3195185g424ef9ic5i8b00002hd488g9fggigd5f3827527191664667052"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.6"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"pods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Input interpretation"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"scanner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Identity"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Input"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"position"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
                </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="s2">"numsubpods"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                </span><span class="s2">"subpods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
                        </span><span class="s2">"img"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                            </span><span class="s2">"src"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://www4d.wolframalpha.com/Calculate/MSP/MSP3196185g424ef9ic5i8b00000e5afg304gfd51fb?MSPStoreType=image/gif&amp;s=15"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"alt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"root locus plot | transfer function  (3 + s^2)/(5 + s^3)"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"root locus plot | transfer function  (3 + s^2)/(5 + s^3)"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"width"</span><span class="p">:</span><span class="w"> </span><span class="mi">314</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"height"</span><span class="p">:</span><span class="w"> </span><span class="mi">55</span><span class="w">
                        </span><span class="p">}</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">]</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Root locus plot"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"scanner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ControlSystems"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RootLocusPlot"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"position"</span><span class="p">:</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w">
                </span><span class="s2">"error"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                </span><span class="s2">"numsubpods"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                </span><span class="s2">"subpods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
                        </span><span class="s2">"img"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                            </span><span class="s2">"src"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://www4d.wolframalpha.com/Calculate/MSP/MSP3197185g424ef9ic5i8b0000445b174i6b48h4ea?MSPStoreType=image/gif&amp;s=15"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"alt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\n</span><span class="s2">(shown for gain between 0 and 10)"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\n</span><span class="s2">(shown for gain between 0 and 10)"</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"width"</span><span class="p">:</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w">
                            </span><span class="s2">"height"</span><span class="p">:</span><span class="w"> </span><span class="mi">318</span><span class="w">
                        </span><span class="p">}</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">],</span><span class="w">
                </span><span class="s2">"states"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Increase range"</span><span class="p">,</span><span class="w">
                        </span><span class="s2">"input"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RootLocusPlot__Increase range"</span><span class="w">
                    </span><span class="p">},</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Decrease range"</span><span class="p">,</span><span class="w">
                        </span><span class="s2">"input"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RootLocusPlot__Decrease range"</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">]</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>这样只用通过javascript进行http的get请求就能行了。理论很美满，显示很骨感，试了大半天，总是会遇到Access-Control-Allow-Origin的问题。上谷歌去查各种方案，都说WolframAlpha的API不能通过javascript访问，要么用服务端代码，要么用proxy，好像没有解决方案。但是，在网上查javascript跨域的问题，也是得到了一大堆奇奇怪怪的解决方法，我最终实现了跨域访问：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">str1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"num"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">str2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"den"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">querystr</span> <span class="o">=</span> <span class="s2">"https://api.wolframalpha.com/v2/query?input=root+locus+for+transfer+function+("</span> <span class="o">+</span>
    <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">str1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">")/("</span><span class="p">)</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">str2</span><span class="p">)</span> <span class="o">+</span>
    <span class="s2">")&amp;format=image&amp;output=JSON&amp;appid=XXXX&amp;callback=?"</span><span class="p">;</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> 
  <span class="na">type</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span> 
  <span class="na">url</span><span class="p">:</span> <span class="nx">querystr</span> <span class="p">,</span> 
  <span class="c1">//是否使用缓存 </span>
  <span class="na">cache</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span> 
  <span class="c1">//数据类型，这里我用的是json </span>
  <span class="na">dataType</span><span class="p">:</span> <span class="s2">"json"</span><span class="p">,</span> 
  <span class="na">crossDomain</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> 
  <span class="c1">//必要的时候需要用JSON.stringify() 将JSON对象转换成字符串 </span>
  <span class="c1">//data: JSON.strigify({key:value}), </span>
  <span class="c1">//data : ""</span>
  <span class="c1">//请求成功的回调函数 success: </span>
  <span class="na">success</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>  
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"res1"</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">queryresult</span><span class="p">.</span><span class="nx">pods</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">subpods</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">img</span><span class="p">.</span><span class="nx">src</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"res2"</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">queryresult</span><span class="p">.</span><span class="nx">pods</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">subpods</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">img</span><span class="p">.</span><span class="nx">src</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
<p>不知道实现了跨域访问的原因到底是在URL里面加了”&amp;callback=?”还是设置了crossDomain为true的原因:cold_sweat:。这样就实现了在网页上绘制根轨迹。不过这个网页的使用体验肯定没有安卓版的easyAuto好，一个是输入格式更为严格，第二个是速度太慢。就这个访问速度，我相信即使是javascript代码也能做到更快把图画出来，不过我是真的不想再去用javascript写数值的代码了。</p>

<h2 id="螺旋桨性能查询网页">螺旋桨性能查询网页</h2>

<p>做这个的原因和上一个一样，想实现彻底的跨平台。之前把demoProp的所有数据全部导入到了一个sqlite文件中，加上索引一共40+MB，正好在网上看到了sql.js项目，这个是emscripten把sqlite直接翻译过来的结果，想试一试，于是把数据库和网页挂在网上，试了试发现访问速度太慢了。而且一不注意，手机用了200+MB的流量，血淋淋的教训啊。我明白这个的意思了：用http请求把url的数据库先下载下来，然后再在内存中运行sql语句。这个代价相比PHP+MySQL的代价的确太大了。我把索引全部删除，数据库的大小还是20+MB，没办法，想了想一般在无人机我们关注的是静拉力，于是删除了所有动拉力数据，仅保留静拉力数据，这下只有600+KB了。再把一些无关的字段删去，sqlite对sql的支持太差，删除字段还需要这样写：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="k">temp</span> <span class="k">as</span> <span class="k">select</span> <span class="n">propName</span><span class="p">,</span><span class="n">RPM</span><span class="p">,</span><span class="n">PWR</span><span class="p">,</span><span class="n">Thrust</span> <span class="k">from</span> <span class="n">propellers</span><span class="p">;</span>  
<span class="k">drop</span> <span class="k">table</span> <span class="n">propellers</span><span class="p">;</span>  
<span class="k">alter</span> <span class="k">table</span> <span class="k">temp</span> <span class="k">rename</span> <span class="k">to</span> <span class="n">propellers</span><span class="p">;</span>  
</code></pre></div></div>
<p>这样数据库只剩300KB了。当然，也可以把所有数据以文本形式保存在网站上，具体对于某个螺旋桨，只需要读取具体的一个数据就行，不过处理文件肯定没有sql语句来得方便。</p>

<p>关于图表的绘制，我使用的是ECharts3.而UI的绘制则是使用jQuery Mobile，都是直接挂的bootcdn，希望服务器不要宕机:stuck_out_tongue_winking_eye:。jQuery Mobile的空间要想更好地适应移动端，需要加上如下代码：</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>最后放上链接：
<a href="https://scienceasdf.github.io/site/rootLocus/index.html">在线绘制根轨迹</a>
<a href="/site/prop/index.html">在线查询螺旋桨数据</a></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> JavaScript </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[将VS code和Sublime Text3的VIM改成behave-mswin-like]]></title>
      <url>/programming/2018/03/31/editorVIM/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>修改sublime和VS code的keymap配置，使其能够有mswin.vim的操作方式。</strong></p>

<hr />

<p>最近学习VIM，但是我一般不直接用VIM，因为配置插件太过于麻烦，而且UI感觉也不美观，因此我用的都是别的IDE/编辑器的VIM操作模式。Qt creator自带的fakeVim感觉非常好用，因为可以直接导入vimrc文件。我平时的习惯还是希望能够有mswin.vim的配置，包括Home和End键，Qt Creator导入很方便。而Kate, Kile虽然也提供导入vimrc文件的功能，但是实现很不完整，还是需要自己手动修改keymap。Kile是一个可以支持vim操作模式的LaTeX的IDE，这一点非常好。</p>

<h2 id="kate和kile">Kate和Kile</h2>
<p>这个一开始就是在设置里面进行手动地输入。也需要改一下热键，Ctrl+Q原本是关闭程序的，我把它改成了Alt+Q。最后得到了一个katevirc的文件，Kile和KDevelop都会按照这个配置来。文件的全文如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Kate Vi Input Mode Settings]
Command Mode Mapping Keys=
Command Mode Mappings=
Command Mode Mappings Recursion=
Insert Mode Mapping Keys=&lt;c-y&gt;,&lt;end&gt;,&lt;c-v&gt;,&lt;c-z&gt;,&lt;home&gt;,&lt;c-a&gt;
Insert Mode Mappings=&lt;c-o&gt;&lt;c-r&gt;,&lt;c-o&gt;$,&lt;esc&gt;"+gPi,&lt;c-o&gt;u,&lt;c-o&gt;^,&lt;esc&gt;ggvG
Insert Mode Mappings Recursion=false,false,false,false,false,false
Macro Completions=
Macro Contents=
Macro Registers=
Map Leader=\\
Normal Mode Mapping Keys=&lt;c-y&gt;,&lt;c-tab&gt;,&lt;c-q&gt;,&lt;end&gt;,&lt;c-v&gt;,&lt;c-s&gt;,&lt;c-z&gt;,&lt;home&gt;,&lt;c-a&gt;,&lt;c-f4&gt;
Normal Mode Mappings=U,&lt;c-w&gt;w,&lt;c-v&gt;,$,"+gP,:w&lt;cr&gt;,u,^,ggvG,&lt;c-w&gt;c
Normal Mode Mappings Recursion=false,false,false,false,false,false,false,false,false,false
Visual Mode Mapping Keys=&lt;c-x&gt;,&lt;end&gt;,&lt;c-v&gt;,&lt;home&gt;,&lt;c-a&gt;,&lt;c-c&gt;
Visual Mode Mappings="+x,$,"+p,^,vggvG,"+y&lt;esc&gt;
Visual Mode Mappings Recursion=false,false,false,false,false,false
</code></pre></div></div>

<h2 id="sublime-text-3">Sublime Text 3</h2>
<p>这个需要安装插件NeoVintageous，别的插件功能太弱。这个插件可以自己写配置文件，不过也不是很强大，imap这些不支持。不过在Insert Mode里面似乎是直接支持相关操作的。另外不知道为什么，Normal Mode里面的Ctrl+S不可用。配置文件全文如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"" backspace in Visual mode deletes selection  
vnoremap &lt;BS&gt; d  
"   
"" CTRL-X and SHIFT-Del are Cut  
vnoremap &lt;C-x&gt; "+x  
"
vnoremap &lt;S-Del&gt; "+x  
"   
"" CTRL-C and CTRL-Insert are Copy  
vnoremap &lt;C-c&gt; "+y  
vnoremap &lt;C-Insert&gt; "+y  
"   
"" CTRL-V and SHIFT-Insert are Paste  
""map &lt;C-v&gt;        p  
noremap &lt;C-v&gt;         "+p 

"" Pasting blockwise and linewise selections is not possible in Insert and  
"" Visual mode "without the +virtualedit feature.  They are pasted as if they  
"" were characterwise instead.  
"" Uses the paste.vim auto"load script.  
"   
vmap &lt;S-Insert&gt;        &lt;C-V&gt;  
"   
"" Use CTRL-Q to do what CTRL-V used to do 
nnoremap &lt;C-q&gt;        &lt;C-v&gt;  
"   
"" Use CTRL-S for saving, also in Insert mode  
"noremap &lt;C-s&gt;        :w   
"vnoremap &lt;C-s&gt;       v:w  
"   

"" CTRL-Z is Undo; not in cmdline though  
noremap &lt;C-z&gt; u  
"   
"" CTRL-Y is Redo (although not repeat); not in cmdline though  
noremap &lt;C-y&gt; &lt;C-r&gt;  
""inoremap &lt;C-Y&gt; &lt;C-O&gt;&lt;C-R&gt;  
"
"" CTRL-A is Select all  
noremap &lt;C-a&gt; ggvG
""onoremap &lt;C-a&gt; &lt;C-C&gt;gggH&lt;C-O&gt;G  
""snoremap &lt;C-a&gt; &lt;C-C&gt;gggH&lt;C-O&gt;G  
vnoremap &lt;C-a&gt; vggvG   
"" CTRL-Tab is Next window  
noremap &lt;C-Tab&gt; &lt;C-W&gt;w  
onoremap &lt;C-Tab&gt; &lt;C-C&gt;&lt;C-W&gt;w   
"
"   
"" CTRL-F4 is Close window  
noremap &lt;C-F4&gt; &lt;C-W&gt;c  
onoremap &lt;C-F4&gt; &lt;C-C&gt;&lt;C-W&gt;c  
"     
nnoremap i i&lt;Ctrl-Shift-1&gt;  
</code></pre></div></div>

<h2 id="vs-code">VS Code</h2>
<p>这个需要同时改一些Key binding和vim插件的配置，用户设置文件如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="s2">"markdown-preview-enhanced.mathRenderingOption"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MathJax"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"emmet.showSuggestionsAsSnippets"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="s2">"[markdown]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"editor.quickSuggestions"</span><span class="p">:</span><span class="kc">true</span><span class="w">    
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"latex-workshop.view.pdf.viewer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tab"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"latex-workshop.view.pdf.hand"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">可变编译方式</span><span class="w"> 
    </span><span class="s2">"latex-workshop.latex.toolchain"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">注意这里是留空的</span><span class="w">
          </span><span class="s2">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"-synctex=1"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"-interaction=nonstopmode"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"-file-line-error"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"%DOC%"</span><span class="w">
          </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"window.zoomLevel"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="s2">"vim.neovimPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">downloads</span><span class="se">\\</span><span class="s2">nvim-win64</span><span class="se">\\</span><span class="s2">Neovim</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">nvim.exe"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"vim.enableNeovim"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="s2">"vim.insertModeKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-v&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"</span><span class="se">\"</span><span class="s2">+gP"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">  
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"vim.insertModeKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-s&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-o&gt;:w"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-z&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-o&gt;u"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">  
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-y&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-o&gt;&lt;C-r&gt;"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-a&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-o&gt;gg&lt;C-o&gt;gH&lt;C-o&gt;G"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
         </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-Tab&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-O&gt;&lt;C-W&gt;w"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
         </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-F4&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-O&gt;&lt;C-W&gt;c"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">       
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"vim.otherModesKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-s&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">":w"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-z&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"u"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-y&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-r&gt;"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-a&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"gggH&lt;C-O&gt;G"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">  
          </span><span class="s2">"before"</span><span class="p">:[</span><span class="s2">"&lt;C-F4&gt;"</span><span class="p">],</span><span class="w">  
          </span><span class="s2">"after"</span><span class="p">:[</span><span class="s2">"&lt;C-w&gt;c"</span><span class="p">],</span><span class="w">  
        </span><span class="p">},</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"vim.otherModesKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Key Binding的配置文件如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">将键绑定放入此文件中以覆盖默认值</span><span class="w">
</span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+q"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.quickOpenView"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+q"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-workbench.action.quickOpenView"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+q"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.quickOpenNavigateNextInViewPicker"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"inQuickOpen &amp;&amp; inViewsPicker"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+q"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-workbench.action.quickOpenNavigateNextInViewPicker"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"inQuickOpen &amp;&amp; inViewsPicker"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+y"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"extension.vim_ctrl+y"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+y"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_ctrl+y"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-y&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+a"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"extension.vim_ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-a&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-a&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+c"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"extension.vim_ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.overrideCtrlC &amp;&amp; vim.use&lt;C-c&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.overrideCtrlC &amp;&amp; vim.use&lt;C-c&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+q"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"extension.vim_ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-v&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;C-v&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h2 id="其他">其他</h2>
<p>还是没有解决输入法切换的Keymap:disappointed:。还有为什么Jekyll的右边生成的目录排版有时会抽风啊？</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 编辑器 </tag>
        
          <tag> Vim </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[利用AutoHotKey实现VI编辑模式下ESC键自动切换至英文输入法]]></title>
      <url>/programming/2018/03/26/vimIME/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>利用AutoHotKey实现ESC自动切换输入法。</strong></p>

<hr />

<p>最近学习VIM，然而大多数情况下都是用的各种编辑器的VIM模式，我一般不会去使用GVim。然而每次的输入法切换非常影响键入。因此在知乎上搜索到了如下的解决方案：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#Persistent ;一直运行
~esc::

Send, {ESC}

; 下方代码可只保留一个
SwitchIME(0x04090409) ; 英语(美国) 美式键盘
SwitchIME(0x08040804) ; 中文(中国) 简体中文-美式键盘
return


SwitchIME(dwLayout){
    HKL:=DllCall("LoadKeyboardLayout", Str, dwLayout, UInt, 1)
    ControlGetFocus,ctl,A
    SendMessage,0x50,0,HKL,%ctl%,A
}
</code></pre></div></div>
<blockquote>
  <p>作者：杜立涛
链接：https://www.zhihu.com/question/41446565/answer/91110371
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
不过这个还存在一些不方便的地方，看以后我是渐渐习惯了这些麻烦还是自己又继续来深入AutoHotKey:</p>
  <ul>
    <li>重新回到INSERT模式时，我希望回到中文输入法</li>
    <li>在不是编辑器的窗口里，我希望ESC键是一个正常的功能</li>
  </ul>
</blockquote>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> AutoHotKey </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[一个点球大战游戏的开发]]></title>
      <url>/programming/2018/03/24/penaltyShootout/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>开发了一个点球大战的手机小游戏。</strong></p>

<hr />

<p>开发了一个点球大战的小游戏，实现了游戏引擎与GUI的分离。</p>

<h2 id="球员类">球员类</h2>
<h3 id="射手类">射手类</h3>
<p>类的定义如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">striker</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">striker</span><span class="p">(){}</span>
    <span class="n">striker</span><span class="p">(</span><span class="kt">bool</span> <span class="n">AI</span><span class="p">);</span>

    <span class="kt">double</span> <span class="n">pShootLeft</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">pShootRight</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">pShootCenter</span><span class="p">;</span>

    <span class="n">QString</span> <span class="n">name</span><span class="p">;</span>

    <span class="n">direction</span> <span class="n">shoot</span><span class="p">();</span>

    <span class="kt">bool</span> <span class="n">isAI</span><span class="p">;</span>

<span class="p">};</span>
</code></pre></div></div>
<p>这里需要考虑的一个问题是：为了追求尽可能模拟现实，因此罚点球射向左边、右边的概率会远大于射向中间的概率，因此对于一个非用户操控的球员（即AI操控的球员），概率如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="n">seed1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">system_clock</span><span class="o">::</span><span class="n">now</span><span class="p">().</span><span class="n">time_since_epoch</span><span class="p">().</span><span class="n">count</span><span class="p">();</span>
<span class="n">std</span><span class="o">::</span><span class="n">mt19937</span> <span class="n">generator</span><span class="p">(</span><span class="n">seed1</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">uniform_real_distribution</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">dis</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
<span class="k">auto</span> <span class="n">dice</span><span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">dis</span><span class="p">,</span><span class="n">generator</span><span class="p">);</span>
<span class="n">isAI</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">l</span> <span class="o">=</span> <span class="n">dice</span><span class="p">();</span>
<span class="kt">double</span> <span class="n">c</span> <span class="o">=</span> <span class="n">dice</span><span class="p">();</span>
<span class="kt">double</span> <span class="n">r</span> <span class="o">=</span> <span class="n">dice</span><span class="p">();</span>
<span class="n">pSaveLeft</span> <span class="o">=</span> <span class="p">(</span><span class="mf">.95</span> <span class="o">*</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mf">.95</span> <span class="o">*</span> <span class="n">l</span> <span class="o">+</span> <span class="mf">.95</span> <span class="o">*</span> <span class="n">r</span> <span class="o">+</span> <span class="mf">.1</span> <span class="o">*</span> <span class="n">c</span><span class="p">);</span>
<span class="n">pSaveRight</span> <span class="o">=</span> <span class="p">(</span><span class="mf">.95</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mf">.95</span> <span class="o">*</span> <span class="n">l</span> <span class="o">+</span> <span class="mf">.95</span> <span class="o">*</span> <span class="n">r</span> <span class="o">+</span> <span class="mf">.1</span> <span class="o">*</span> <span class="n">c</span><span class="p">);</span>
<span class="n">pSaveCenter</span> <span class="o">=</span> <span class="p">(</span><span class="mf">.1</span> <span class="o">*</span> <span class="n">c</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mf">.95</span> <span class="o">*</span> <span class="n">l</span> <span class="o">+</span> <span class="mf">.95</span> <span class="o">*</span> <span class="n">r</span> <span class="o">+</span> <span class="mf">.1</span> <span class="o">*</span> <span class="n">c</span><span class="p">);</span>
</code></pre></div></div>
<p>MinGW都没有实现std::default_random_device，因此用了种子的方法生成随机数。</p>

<p>守门员和这个类似，就不再赘述了。</p>

<h2 id="游戏引擎">游戏引擎</h2>

<p>这是第一次对这个东西进行了架构，与GUI分离后，实现松耦合后能够很容易地编码。不过由于也是第一次架构，因此也存在一些或许不合理的地方。实际上用设计模式应该会收到更好的效果。</p>

<h3 id="回合类">回合类</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">rounds</span><span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">direction</span> <span class="n">direc</span><span class="p">;</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">rounds</span><span class="p">(</span><span class="n">striker</span> <span class="o">*</span><span class="n">st1</span><span class="p">,</span> <span class="n">goalKeeper</span> <span class="o">*</span><span class="n">gk1</span><span class="p">,</span> <span class="n">game</span><span class="o">*</span> <span class="n">eng</span><span class="p">);</span>
    <span class="n">rounds</span><span class="p">(</span><span class="n">striker</span> <span class="o">*</span><span class="n">st1</span><span class="p">,</span> <span class="n">goalKeeper</span> <span class="o">*</span><span class="n">gk1</span><span class="p">,</span> <span class="n">direction</span> <span class="n">direct</span><span class="p">,</span> <span class="n">game</span><span class="o">*</span> <span class="n">eng</span><span class="p">);</span>

    <span class="n">QString</span> <span class="n">string1</span><span class="p">;</span>
    <span class="n">QString</span> <span class="n">string2</span><span class="p">;</span>
    <span class="n">QString</span> <span class="n">string3</span><span class="p">;</span>

    <span class="n">striker</span><span class="o">*</span> <span class="n">st</span><span class="p">;</span>
    <span class="n">goalKeeper</span><span class="o">*</span> <span class="n">gk</span><span class="p">;</span>

    <span class="n">game</span><span class="o">*</span> <span class="n">m_game</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">goal</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="引擎类">引擎类</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">game</span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">game</span><span class="p">(</span><span class="kt">bool</span> <span class="n">youAreKnown</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">youCanKonwAll</span><span class="p">,</span> <span class="kt">int</span> <span class="n">userTurn</span><span class="p">);</span>

    <span class="c1">// The round number represents the already finished rounds counter
</span>    <span class="kt">int</span> <span class="n">redRound</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">redScore</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">blueRound</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">blueScore</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">usrTurn</span><span class="p">;</span>
    <span class="n">goalKeeper</span> <span class="n">redGK</span><span class="p">;</span>
    <span class="n">goalKeeper</span> <span class="n">blueGK</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">striker</span><span class="o">&gt;</span> <span class="n">stsRed</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">striker</span><span class="o">&gt;</span> <span class="n">stsBlue</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">youKnowAll</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">redFirst</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">usrNeedInput</span><span class="p">();</span>
    <span class="kt">void</span> <span class="n">nextRound</span><span class="p">();</span>
    <span class="kt">void</span> <span class="n">nextRound</span><span class="p">(</span><span class="n">direction</span> <span class="n">dir</span><span class="p">);</span>
    <span class="n">gameState</span> <span class="n">getGameState</span><span class="p">();</span>
    <span class="n">roundState</span> <span class="n">getRoundState</span><span class="p">();</span>

    <span class="n">QString</span> <span class="n">string1</span><span class="p">;</span>
    <span class="n">QString</span> <span class="n">string2</span><span class="p">;</span>
    <span class="n">QString</span> <span class="n">string3</span><span class="p">;</span>

<span class="c1">//private:
</span>    <span class="n">allStr</span> <span class="n">stringEngine</span><span class="p">;</span>

<span class="p">};</span>
</code></pre></div></div>
<p>game类里面主要就是nextRound成员函数构造round类并进行模拟。这里也是有一些设计的有一些欠妥当，导致round类的构造函数需要一个game的指针，以让关于游戏信息的字符串传回去。</p>

<p>在点球大战中还需要专门判断点球大战是否提前结束了，这样才更符合真实的点球大战，因为如果某一方劣势已经确定就不会踢满5轮点球大战了。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gameState</span> <span class="n">game</span><span class="o">::</span><span class="n">getGameState</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">redRound</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="n">blueRound</span> <span class="o">==</span> <span class="n">redRound</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">redScore</span> <span class="o">==</span> <span class="n">blueScore</span><span class="p">)</span> <span class="k">return</span> <span class="n">notFinished</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">redScore</span> <span class="o">&gt;</span> <span class="n">blueScore</span><span class="p">)</span> <span class="k">return</span> <span class="n">redWin</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">redScore</span> <span class="o">&lt;</span> <span class="n">blueScore</span><span class="p">)</span> <span class="k">return</span> <span class="n">blueWin</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">redRound</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">||</span> <span class="n">blueRound</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">notFinished</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">redScore</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">5</span> <span class="o">-</span> <span class="n">blueRound</span> <span class="o">+</span> <span class="n">blueScore</span><span class="p">)){</span>
        <span class="k">return</span> <span class="n">redWin</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">blueScore</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">5</span> <span class="o">-</span> <span class="n">redRound</span> <span class="o">+</span> <span class="n">redScore</span><span class="p">)){</span>
        <span class="k">return</span> <span class="n">blueWin</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">notFinished</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="字符串引擎">字符串引擎</h3>
<p>为了实现松耦合，需要专门设计一个字符串处理的类，类的定义如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">allStr</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">allStr</span><span class="p">();</span>

    <span class="n">QString</span> <span class="n">getPrologue</span><span class="p">();</span>
    <span class="n">QString</span> <span class="n">getStIntro</span><span class="p">();</span>
    <span class="n">QString</span> <span class="n">getRedWinStr</span><span class="p">();</span>
    <span class="n">QString</span> <span class="n">getBlueWinStr</span><span class="p">();</span>
    <span class="n">QString</span> <span class="n">getPenaltyStr</span><span class="p">(</span><span class="n">direction</span> <span class="n">shootDirection</span><span class="p">,</span> <span class="n">direction</span> <span class="n">saveDirection</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">outside</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">goal</span><span class="p">);</span>

<span class="c1">//private:
</span>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">redGkName</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">redStName</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">blueGkName</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">blueStName</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">prologue1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">prologue2</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">prologue3</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">stIntro1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">stIntro2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">redWinStr1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">redWinStr2</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">blueWinStr1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">blueWinStr2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">sameNoGoal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">sameNoGoal2</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">sameAndGoal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">sameAndGoal2</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lrOutside1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lrOutside2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_c_goal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_c_goal2</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_c_noGoal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_c_noGoal2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_wrongSave1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">lr_wrongSave2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_outside</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_lr_goal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_lr_goal2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_c1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_c2</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_lr_noGoal1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">QString</span><span class="o">&gt;</span> <span class="n">c_lr_noGoal2</span><span class="p">;</span>

<span class="p">};</span>
</code></pre></div></div>
<p>这些字符串在构造函数里面将所有的字符串插入并使用std::shuffle打乱，通过获取字符串的成员函数可以返回一些随机的但是能够组合在一起的句子，成为游戏中的解说信息。</p>

<h2 id="总结">总结</h2>
<p>这里写得很少，但是完成这个小游戏还是费挺大劲，遇到了各种各样奇奇怪怪的坑。什么定时器的使用，各种结果的处理，还是挺麻烦的。另外这里我还是没有考虑到点球大战踢满11轮的情况，一旦踢满11轮程序按理说会崩溃，但是现在晚了这么久我还没有遇到哪一次踢满了11轮:satisfied:。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 蒙特卡洛方法 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[实现Qt程序的新版本检查]]></title>
      <url>/programming/2017/12/17/updateCheck/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>利用GitHub提供的API,实现程序的新版本检查功能。</strong></p>

<hr />

<h2 id="github的开发者api">GitHub的开发者API</h2>
<p>对于GitHub上的仓库，我们可以发布Release，每个Release除了源代码以外还可以附加编译后的二进制文件。发布Release之后便可以通过API获取一些有用的信息。不过需要注意的是，如下图所示，发布的Release是不能勾选“This is a pre-release”选项的。
<img src="http://localhost:4000/assets//blog_images/release.png" width="450px" height="200px" />
例如对于我的easyAuto仓库，那么API是<a href="https://api.github.com/repos/scienceasdf/accoutAssist/releases/latest">https://api.github.com/repos/scienceasdf/accoutAssist/releases/latest</a>。在浏览器中打开，可以看出这里提供json格式的许多信息。当然，如果是pre-release版本的话，就会得到下面的结果：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "message": "Not Found",
  "documentation_url": "https://developer.github.com/v3/repos/releases/#get-the-latest-release"
}
</code></pre></div></div>
<h2 id="qt的https请求与处理">Qt的HTTPS请求与处理</h2>
<p>首先需要在.pro文件中加上这两句，分别是加上网络模块和版本号的宏定义：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">QT</span>      <span class="o">+=</span> <span class="p">...</span> <span class="n">network</span>
<span class="n">DEFINES</span> <span class="o">+=</span> <span class="s">"VERSION=2.2"</span>
</code></pre></div></div>
<p>接下来就是具体实现的代码：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;QtNetwork&gt;
</span><span class="c1">// ...
</span><span class="kt">void</span> <span class="n">accountAssit</span><span class="o">::</span><span class="n">on_checkUpdate_clicked</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">QNetworkAccessManager</span> <span class="n">networkManager</span><span class="p">;</span>


    <span class="n">QUrl</span> <span class="n">url</span><span class="p">(</span><span class="s">"https://api.github.com/repos/scienceasdf/accoutAssist/releases/latest"</span><span class="p">);</span>
    <span class="n">QNetworkRequest</span> <span class="n">request</span><span class="p">;</span>
    <span class="n">request</span><span class="p">.</span><span class="n">setUrl</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>

    <span class="n">m_currentReply</span> <span class="o">=</span> <span class="n">networkManager</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>  <span class="c1">// GET
</span>    <span class="n">connect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">networkManager</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">finished</span><span class="p">(</span><span class="n">QNetworkReply</span><span class="o">*</span><span class="p">)),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">onResultUpdate</span><span class="p">(</span><span class="n">QNetworkReply</span><span class="o">*</span><span class="p">)));</span>
    <span class="n">QEventLoop</span> <span class="n">eventLoop</span><span class="p">;</span>
    <span class="n">QObject</span><span class="o">::</span><span class="n">connect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">networkManager</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">QNetworkAccessManager</span><span class="o">::</span><span class="n">finished</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eventLoop</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">QEventLoop</span><span class="o">::</span><span class="n">quit</span><span class="p">);</span>
    <span class="n">eventLoop</span><span class="p">.</span><span class="n">exec</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">accountAssit</span><span class="o">::</span><span class="n">onResultUpdate</span><span class="p">(</span><span class="n">QNetworkReply</span> <span class="o">*</span> <span class="n">reply</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">m_currentReply</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">()</span> <span class="o">!=</span> <span class="n">QNetworkReply</span><span class="o">::</span><span class="n">NoError</span><span class="p">){</span>
        <span class="c1">//qDebug()&lt;&lt;"ERROR!";
</span>        <span class="k">return</span><span class="p">;</span>  <span class="c1">// ...only in a blog post
</span>    <span class="p">}</span>

    <span class="n">QString</span> <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">QString</span><span class="p">)</span> <span class="n">reply</span><span class="o">-&gt;</span><span class="n">readAll</span><span class="p">();</span>
    <span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">data</span><span class="p">;</span>
    <span class="n">QJsonDocument</span> <span class="n">d</span> <span class="o">=</span> <span class="n">QJsonDocument</span><span class="o">::</span><span class="n">fromJson</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">toUtf8</span><span class="p">());</span>
    <span class="n">QJsonObject</span> <span class="n">sett2</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">object</span><span class="p">();</span>
    <span class="n">QJsonValue</span> <span class="n">value</span> <span class="o">=</span> <span class="n">sett2</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="n">QString</span><span class="p">(</span><span class="s">"tag_name"</span><span class="p">));</span>
    <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">toDouble</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">VERSION</span><span class="p">){</span>
        <span class="n">QMessageBox</span><span class="o">::</span><span class="n">StandardButton</span> <span class="n">button</span><span class="p">;</span>
        <span class="n">button</span> <span class="o">=</span> <span class="n">QMessageBox</span><span class="o">::</span><span class="n">question</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">tr</span><span class="p">(</span><span class="s">"有新的版本"</span><span class="p">),</span>
                <span class="n">QString</span><span class="p">(</span><span class="n">tr</span><span class="p">(</span><span class="s">"是否下载新的版本？"</span><span class="p">)),</span>
                <span class="n">QMessageBox</span><span class="o">::</span><span class="n">Yes</span> <span class="o">|</span> <span class="n">QMessageBox</span><span class="o">::</span><span class="n">No</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">button</span> <span class="o">==</span> <span class="n">QMessageBox</span><span class="o">::</span><span class="n">Yes</span><span class="p">){</span>

        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="n">QMessageBox</span><span class="o">::</span><span class="n">information</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"更新检查"</span><span class="p">,</span><span class="s">"此版本已经是最新发布版本"</span><span class="p">,</span> <span class="n">QMessageBox</span><span class="o">::</span><span class="n">Yes</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在代码中，accountAssist是一个窗体，里面有一个类型为QNetworkReply*的重要成员：m_currentReply，用来保存网络是否正常的状态。当在获取HTTPS内容时，使用QEventLoop不阻塞GUI线程。当全文获取之后，转到槽函数onResultUpdate，对收到的所有内容进行处理。Qt自带了QJson的处理，非常的方便。如果发现最新版的release版本号大于宏定义的版本号，那么就提示有新的版本。不过这个也太简单粗暴了，如果版本号是从2.1更新到了2.10，这种方法就不奏效。解决方法也很简单，定义大版本号和小版本号，分别比较。比如“2.10”，QString自带了split函数，其实之前做easyAuto还可以用这个方法</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">QStringList</span> <span class="n">list</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="s">"2.10"</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="n">foreach</span><span class="p">(</span><span class="n">QString</span> <span class="n">str</span><span class="p">,</span> <span class="n">list</span><span class="p">){</span>
	<span class="c1">//...
</span><span class="p">}</span>
</code></pre></div></div>
<p>最后值得注意的是，在安卓程序里，必须要SSL连接，所以需要在网上下载libcrypto.so和libssl.so，并在.pro文件里加上</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>android {
  ANDROID_EXTRA_LIBS += $$PWD/libcrypto.so
  ANDROID_EXTRA_LIBS += $$PWD/libssl.so
}
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 网络 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[实现Qt程序的滑动手势]]></title>
      <url>/programming/2017/12/16/swipeGesture/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>Copy了一份实现单指滑动手势的源码。</strong></p>

<hr />
<p>Qt的SwipeGesture居然是要三个手指同时操作（这里是说用widget而不是用quick控件，实际上quick控件才是Qt为移动开发打造的）。把源码拿出来看了半天，看是能够看懂，可以就是改了就无法编译了。在GitHub上用搜索功能，终于找到了<a href="https://github.com/digifant/multidisplay-app/blob/b0921e1b0f0c728c58427029374bef072d0c4382/src/mobile/SwipeGestureRecognizer.h">直接可用的方案</a>（神奇的GitHub）：<br />
头文件,这里面的宏定义MINIMUM_DISTANCE = 50是可以根据需要修改的</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// customGesture.h
</span><span class="cp">#ifndef CUSTOMGESTURE_H
#define CUSTOMGESTURE_H
#include &lt;QGesture&gt;
#include &lt;QGestureRecognizer&gt;
#include &lt;QSwipeGesture&gt;
</span>
<span class="cm">/**

 * @brief The SwipeGestureRecognizer class

 * needed because the defalt implementation of swipe is a little bit odd: it only triggers on 3 finger swipes! (5.3)

 *

 * http://developer.android.com/design/patterns/gestures.html

 * http://qt-project.org/doc/qt-5/gestures-overview.html

 */</span>

<span class="k">class</span> <span class="nc">SwipeGestureRecognizer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QGestureRecognizer</span>

<span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="n">SwipeGestureRecognizer</span><span class="p">();</span>





<span class="k">private</span><span class="o">:</span>

    <span class="cp">#ifdef FOR_DESKTOP
</span>   <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MINIMUM_DISTANCE</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
<span class="cp">#endif
#ifdef FOR_MOBILE
</span>   <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MINIMUM_DISTANCE</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
<span class="cp">#endif
</span>

   <span class="k">typedef</span> <span class="n">QGestureRecognizer</span> <span class="n">parent</span><span class="p">;</span>



   <span class="kt">bool</span> <span class="n">IsValidMove</span><span class="p">(</span><span class="kt">int</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">);</span>



   <span class="n">qreal</span> <span class="n">ComputeAngle</span><span class="p">(</span><span class="kt">int</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">);</span>



   <span class="k">virtual</span> <span class="n">QGesture</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">QObject</span><span class="o">*</span> <span class="n">pTarget</span><span class="p">);</span>



   <span class="k">virtual</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">Result</span> <span class="n">recognize</span><span class="p">(</span><span class="n">QGesture</span><span class="o">*</span> <span class="n">pGesture</span><span class="p">,</span> <span class="n">QObject</span> <span class="o">*</span><span class="n">pWatched</span><span class="p">,</span> <span class="n">QEvent</span> <span class="o">*</span><span class="n">pEvent</span><span class="p">);</span>



   <span class="kt">void</span> <span class="n">reset</span> <span class="p">(</span><span class="n">QGesture</span> <span class="o">*</span><span class="n">pGesture</span><span class="p">);</span>

<span class="p">};</span>





<span class="k">class</span> <span class="nc">SwipeGestureUtil</span> <span class="p">{</span>

<span class="k">public</span><span class="o">:</span>

    <span class="k">static</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">SwipeDirection</span> <span class="n">GetHorizontalDirection</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">pSwipeGesture</span><span class="p">);</span>

    <span class="k">static</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">SwipeDirection</span> <span class="n">GetVerticalDirection</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">pSwipeGesture</span><span class="p">);</span>


<span class="p">};</span>

<span class="cp">#endif // CUSTOMGESTURE_H
</span></code></pre></div></div>
<hr />
<p>源文件</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// customGesture.cpp
</span><span class="cp">#include &lt;QMouseEvent&gt;
</span>
<span class="cp">#include &lt;QDebug&gt;
</span>


<span class="cp">#include &lt;cmath&gt;
</span>
<span class="cp">#include "customgesture.h"
</span>


<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">SwipeGestureRecognizer</span><span class="p">()</span>

<span class="p">{</span>

<span class="p">}</span>



<span class="kt">bool</span>

<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">IsValidMove</span><span class="p">(</span><span class="kt">int</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">)</span>

<span class="p">{</span>

   <span class="c1">// The moved distance is to small to count as not just a glitch.
</span>
   <span class="k">if</span> <span class="p">((</span><span class="n">qAbs</span><span class="p">(</span><span class="n">dx</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MINIMUM_DISTANCE</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">qAbs</span><span class="p">(</span><span class="n">dy</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MINIMUM_DISTANCE</span><span class="p">))</span> <span class="p">{</span>

      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>

<span class="p">}</span>





<span class="c1">// virtual
</span>
<span class="n">QGesture</span><span class="o">*</span>

<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">QObject</span><span class="o">*</span> <span class="n">pTarget</span><span class="p">)</span>

<span class="p">{</span>

   <span class="c1">//qDebug("SwipeGestureRecognizer::create() called");
</span>
   <span class="n">QGesture</span> <span class="o">*</span><span class="n">pGesture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QSwipeGesture</span><span class="p">(</span><span class="n">pTarget</span><span class="p">);</span>

   <span class="k">return</span> <span class="n">pGesture</span><span class="p">;</span>

<span class="p">}</span>





<span class="c1">// virtual
</span>
<span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">Result</span>

<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">recognize</span><span class="p">(</span><span class="n">QGesture</span><span class="o">*</span> <span class="n">pGesture</span><span class="p">,</span> <span class="n">QObject</span> <span class="o">*</span><span class="n">pWatched</span><span class="p">,</span> <span class="n">QEvent</span> <span class="o">*</span><span class="n">pEvent</span><span class="p">)</span>

<span class="p">{</span>

   <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">Ignore</span><span class="p">;</span>

   <span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">pSwipe</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QSwipeGesture</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pGesture</span><span class="p">);</span>



   <span class="k">switch</span><span class="p">(</span><span class="n">pEvent</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">())</span> <span class="p">{</span>

      <span class="k">case</span> <span class="n">QEvent</span><span class="p">:</span><span class="o">:</span><span class="n">MouseButtonPress</span><span class="o">:</span> <span class="p">{</span>

         <span class="n">QMouseEvent</span><span class="o">*</span> <span class="n">pMouseEvent</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QMouseEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pEvent</span><span class="p">);</span>

<span class="cp">#if QT_VERSION &lt; QT_VERSION_CHECK(5, 0, 0)
</span>
         <span class="n">pSwipe</span><span class="o">-&gt;</span><span class="n">setProperty</span><span class="p">(</span><span class="s">"startPoint"</span><span class="p">,</span> <span class="n">pMouseEvent</span><span class="o">-&gt;</span><span class="n">posF</span><span class="p">());</span>

<span class="cp">#else
</span>
         <span class="n">pSwipe</span><span class="o">-&gt;</span><span class="n">setProperty</span><span class="p">(</span><span class="s">"startPoint"</span><span class="p">,</span> <span class="n">pMouseEvent</span><span class="o">-&gt;</span><span class="n">localPos</span><span class="p">());</span>

<span class="cp">#endif
</span>
         <span class="n">result</span> <span class="o">=</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">MayBeGesture</span><span class="p">;</span>

         <span class="c1">//qDebug() &lt;&lt; "Swipe gesture started (start point=" &lt;&lt;  pSwipe-&gt;property("startPoint").toPointF() &lt;&lt;  ")";
</span>
      <span class="p">}</span>

      <span class="k">break</span><span class="p">;</span>

      <span class="k">case</span> <span class="n">QEvent</span><span class="p">:</span><span class="o">:</span><span class="n">MouseButtonRelease</span><span class="o">:</span> <span class="p">{</span>

         <span class="n">QMouseEvent</span><span class="o">*</span> <span class="n">pMouseEvent</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QMouseEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pEvent</span><span class="p">);</span>

         <span class="k">const</span> <span class="n">QVariant</span><span class="o">&amp;</span> <span class="n">propValue</span> <span class="o">=</span> <span class="n">pSwipe</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">(</span><span class="s">"startPoint"</span><span class="p">);</span>

         <span class="n">QPointF</span> <span class="n">startPoint</span> <span class="o">=</span> <span class="n">propValue</span><span class="p">.</span><span class="n">toPointF</span><span class="p">();</span>

<span class="cp">#if QT_VERSION &lt; QT_VERSION_CHECK(5, 0, 0)
</span>
         <span class="n">QPointF</span> <span class="n">endPoint</span> <span class="o">=</span> <span class="n">pMouseEvent</span><span class="o">-&gt;</span><span class="n">posF</span><span class="p">();</span>

<span class="cp">#else
</span>
         <span class="n">QPointF</span> <span class="n">endPoint</span> <span class="o">=</span> <span class="n">pMouseEvent</span><span class="o">-&gt;</span><span class="n">localPos</span><span class="p">();</span>

<span class="cp">#endif
</span>


         <span class="c1">// process distance and direction
</span>
         <span class="kt">int</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">endPoint</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">-</span> <span class="n">startPoint</span><span class="p">.</span><span class="n">x</span><span class="p">();</span>

         <span class="kt">int</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">endPoint</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">-</span> <span class="n">startPoint</span><span class="p">.</span><span class="n">y</span><span class="p">();</span>



         <span class="c1">//bugfix: startPoint.isNull because we sometimes get false events with startpoint 0 -&gt; wrong swipe detected!
</span>
         <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="o">!</span><span class="n">IsValidMove</span><span class="p">(</span><span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span> <span class="n">startPoint</span><span class="p">.</span><span class="n">isNull</span><span class="p">()</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>

            <span class="c1">// Just a click, so no gesture.
</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">CancelGesture</span><span class="p">;</span>

            <span class="c1">//qDebug("Swipe gesture canceled");
</span>
         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="c1">// Compute the angle.
</span>
             <span class="c1">//qDebug() &lt;&lt; " startPoint= " &lt;&lt; startPoint &lt;&lt; " endPoint=" &lt;&lt; endPoint &lt;&lt; " dx=" &lt;&lt; dx &lt;&lt; " dy=" &lt;&lt; dy;
</span>
            <span class="n">qreal</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">ComputeAngle</span><span class="p">(</span><span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">);</span>

            <span class="n">pSwipe</span><span class="o">-&gt;</span><span class="n">setSwipeAngle</span><span class="p">(</span><span class="n">angle</span><span class="p">);</span>

            <span class="n">result</span> <span class="o">=</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">FinishGesture</span><span class="p">;</span>

            <span class="c1">//qDebug("Swipe gesture finished");
</span>
         <span class="p">}</span>

      <span class="p">}</span>

      <span class="k">break</span><span class="p">;</span>

      <span class="k">default</span><span class="o">:</span>

        <span class="k">break</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">return</span> <span class="n">result</span><span class="p">;</span>

<span class="p">}</span>



<span class="kt">void</span>

<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">reset</span><span class="p">(</span><span class="n">QGesture</span> <span class="o">*</span><span class="n">pGesture</span><span class="p">)</span>

<span class="p">{</span>

   <span class="n">pGesture</span><span class="o">-&gt;</span><span class="n">setProperty</span><span class="p">(</span><span class="s">"startPoint"</span><span class="p">,</span> <span class="n">QVariant</span><span class="p">(</span><span class="n">QVariant</span><span class="o">::</span><span class="n">Invalid</span><span class="p">));</span>

   <span class="n">parent</span><span class="o">::</span><span class="n">reset</span><span class="p">(</span><span class="n">pGesture</span><span class="p">);</span>

<span class="p">}</span>



<span class="n">qreal</span>

<span class="n">SwipeGestureRecognizer</span><span class="o">::</span><span class="n">ComputeAngle</span><span class="p">(</span><span class="kt">int</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">)</span>

<span class="p">{</span>

   <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="mf">3.14159265</span><span class="p">;</span>



   <span class="c1">// Need to convert from screen coordinates direction
</span>
   <span class="c1">// into classical coordinates direction.
</span>
   <span class="n">dy</span> <span class="o">=</span> <span class="o">-</span><span class="n">dy</span><span class="p">;</span>



   <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">dy</span><span class="p">,</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">dx</span><span class="p">)</span> <span class="p">;</span>

   <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span> <span class="o">*</span> <span class="mi">180</span><span class="p">)</span> <span class="o">/</span> <span class="n">PI</span><span class="p">;</span>



   <span class="c1">// Always return positive angle.
</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

      <span class="n">result</span> <span class="o">+=</span> <span class="mi">360</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">return</span> <span class="n">result</span><span class="p">;</span>

<span class="p">}</span>







<span class="cm">/*

==========================================================================

*/</span>



<span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">SwipeDirection</span>

<span class="n">SwipeGestureUtil</span><span class="o">::</span><span class="n">GetHorizontalDirection</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">pSwipeGesture</span><span class="p">)</span>

<span class="p">{</span>

   <span class="n">qreal</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">pSwipeGesture</span><span class="o">-&gt;</span><span class="n">swipeAngle</span><span class="p">();</span>

   <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">angle</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;=</span> <span class="mi">45</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Right</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">if</span> <span class="p">(</span><span class="mi">135</span> <span class="o">&lt;=</span> <span class="n">angle</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;=</span> <span class="mi">225</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Left</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">if</span> <span class="p">(</span><span class="mi">315</span> <span class="o">&lt;=</span> <span class="n">angle</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;=</span> <span class="mi">360</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Right</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">NoDirection</span><span class="p">;</span>

<span class="p">}</span>



<span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">SwipeDirection</span>

<span class="n">SwipeGestureUtil</span><span class="o">::</span><span class="n">GetVerticalDirection</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">pSwipeGesture</span><span class="p">)</span>

<span class="p">{</span>

   <span class="n">qreal</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">pSwipeGesture</span><span class="o">-&gt;</span><span class="n">swipeAngle</span><span class="p">();</span>



   <span class="k">if</span> <span class="p">(</span><span class="mi">45</span> <span class="o">&lt;</span> <span class="n">angle</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;</span> <span class="mi">135</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Up</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">if</span> <span class="p">(</span><span class="mi">225</span> <span class="o">&lt;</span> <span class="n">angle</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;</span> <span class="mi">315</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Down</span><span class="p">;</span>

   <span class="p">}</span>



   <span class="k">return</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">NoDirection</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>
<p>使用代码就很简单了，比如某个窗体的头文件</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">rangeReport</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QWidget</span>
<span class="p">{</span>
    <span class="n">Q_OBJECT</span>
    <span class="c1">// ...
</span><span class="nl">private:</span>
    <span class="c1">// ...
</span>    <span class="n">SwipeGestureRecognizer</span> <span class="o">*</span><span class="n">fftRecognizer</span><span class="p">;</span>
    <span class="n">Qt</span><span class="o">::</span><span class="n">GestureType</span> <span class="n">fftType</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">swipeTriggered</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">gesture</span><span class="p">);</span>

    <span class="kt">bool</span> <span class="n">event</span><span class="p">(</span><span class="n">QEvent</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>

    <span class="kt">bool</span> <span class="n">gestureEvent</span><span class="p">(</span><span class="n">QGestureEvent</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">currentGraph</span><span class="p">;</span>
    <span class="kt">void</span> <span class="n">registerGesture</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>
<p>而源文件就是要注册这个手势识别器，并实现手势之后的响应</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rangeReport</span><span class="o">::</span><span class="n">rangeReport</span><span class="p">(</span><span class="n">rangeType</span> <span class="n">type</span><span class="p">)</span><span class="o">:</span>
    <span class="n">ui</span><span class="p">(</span><span class="k">new</span> <span class="n">Ui</span><span class="o">::</span><span class="n">rangeReport</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ui</span><span class="o">-&gt;</span><span class="n">setupUi</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="n">registerGesture</span><span class="p">();</span>
    <span class="c1">// ...
</span><span class="p">}</span>
<span class="c1">// ...
</span><span class="kt">bool</span> <span class="n">rangeReport</span><span class="o">::</span><span class="n">event</span><span class="p">(</span><span class="n">QEvent</span> <span class="o">*</span><span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">()</span> <span class="o">==</span> <span class="n">QEvent</span><span class="o">::</span><span class="n">Gesture</span><span class="p">){</span>
        <span class="c1">//qDebug()&lt;&lt;"grab!";
</span>        <span class="k">return</span> <span class="n">gestureEvent</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QGestureEvent</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">event</span><span class="p">));</span>
    <span class="p">}</span>
        <span class="k">return</span> <span class="n">QWidget</span><span class="o">::</span><span class="n">event</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">rangeReport</span><span class="o">::</span><span class="n">swipeTriggered</span><span class="p">(</span><span class="n">QSwipeGesture</span> <span class="o">*</span><span class="n">gesture</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">gesture</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">()</span> <span class="o">==</span> <span class="n">Qt</span><span class="o">::</span><span class="n">GestureFinished</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">if</span> <span class="p">(</span><span class="n">gesture</span><span class="o">-&gt;</span><span class="n">horizontalDirection</span><span class="p">()</span> <span class="o">==</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Left</span>
               <span class="o">||</span> <span class="n">gesture</span><span class="o">-&gt;</span><span class="n">verticalDirection</span><span class="p">()</span> <span class="o">==</span> <span class="n">QSwipeGesture</span><span class="o">::</span><span class="n">Up</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="n">currentGraph</span> <span class="o">!=</span> <span class="n">chart</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span>
                   <span class="n">currentGraph</span> <span class="o">++</span><span class="p">;</span>
                   <span class="n">ui</span><span class="o">-&gt;</span><span class="n">graph1</span><span class="o">-&gt;</span><span class="n">setChart</span><span class="p">(</span><span class="n">chart</span><span class="p">[</span><span class="n">currentGraph</span><span class="p">]);</span>
               <span class="p">}</span>
           <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="n">currentGraph</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                   <span class="n">currentGraph</span> <span class="o">--</span><span class="p">;</span>
                   <span class="n">ui</span><span class="o">-&gt;</span><span class="n">graph1</span><span class="o">-&gt;</span><span class="n">setChart</span><span class="p">(</span><span class="n">chart</span><span class="p">[</span><span class="n">currentGraph</span><span class="p">]);</span>
               <span class="p">}</span>                          <span class="c1">//?ui-&gt;tabWidget-&gt;count():ui-&gt;tabWidget-&gt;currentIndex() + 1 );
</span>           <span class="p">}</span>
           <span class="n">update</span><span class="p">();</span>
       <span class="p">}</span>
<span class="p">}</span>


<span class="kt">bool</span> <span class="n">rangeReport</span><span class="o">::</span><span class="n">gestureEvent</span><span class="p">(</span><span class="n">QGestureEvent</span> <span class="o">*</span><span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//qDebug() &lt;&lt; "gestureEvent():" &lt;&lt; event;
</span>    <span class="k">if</span> <span class="p">(</span><span class="n">QGesture</span> <span class="o">*</span><span class="n">swipe</span> <span class="o">=</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">gesture</span><span class="p">(</span><span class="n">Qt</span><span class="o">::</span><span class="n">SwipeGesture</span><span class="p">))</span>
        <span class="n">swipeTriggered</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">QSwipeGesture</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">swipe</span><span class="p">));</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">QGesture</span> <span class="o">*</span><span class="n">pan</span> <span class="o">=</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">gesture</span><span class="p">(</span><span class="n">Qt</span><span class="o">::</span><span class="n">PanGesture</span><span class="p">))</span>
        <span class="c1">//panTriggered(static_cast&lt;QPanGesture *&gt;(pan));
</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">rangeReport</span><span class="o">::</span><span class="n">registerGesture</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">fftRecognizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SwipeGestureRecognizer</span><span class="p">();</span>
    <span class="n">fftType</span> <span class="o">=</span> <span class="n">QGestureRecognizer</span><span class="o">::</span><span class="n">registerRecognizer</span><span class="p">(</span><span class="n">fftRecognizer</span><span class="p">);</span>
    <span class="n">grabGesture</span><span class="p">(</span><span class="n">fftType</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>最后还是要吐槽一下sqlite:我觉得这个数据库的性能特别好，查询速度很快，占用资源也少。不过为什么不支持全外连接语句:angry:让我用连接和并集写全外连接不是白白增加工作量吗？:facepunch:</p>

]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[easyAuto的单元测试]]></title>
      <url>/programming/2017/11/16/easyautoTest/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>出于各种考虑，在easyAuto里面我第一次写了单元测试。</strong></p>

<hr />

<h2 id="单元测试">单元测试</h2>
<p>以前写代码从来不注重单元测试，不过这次在easyAuto项目里我觉得有必要进行单元测试了。因为包括计算各种穿越频率、处理输入输出这些，常常会修改算法，即使是小改，也不敢保证一切正常。程序刚写出来的时候是我自己输入并看结果是否符合预期。不过这样实在很费精力，因此自己写了单元测试，也是我第一次写单元测试:trollface:。</p>

<blockquote>
  <p>代码是为了什么，当然是为了重复运行。如何保持unit test代码的稳定？主要靠好的API设计。API切实正确切割了需求，那么在重构的时候API就基本不用变化，unit test也不用重写。以后你重构的时候，只要你的unit test覆盖的够好，基本跑一遍就知道有没有改成**。可以节省大量的时间。</p>

  <p>作者：vczh<br />
链接：https://www.zhihu.com/question/28729261/answer/94964928<br />
来源：知乎<br />
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>

<p>虽然单元测试有许多现成的框架，例如<a href="https://github.com/boostorg/test">Boost::test</a>,<a href="http://doc.qt.io/qt-5/qtest-overview.html">Qt单元测试框架</a>,<a href="https://github.com/catchorg/Catch2">catch2</a>这些，但是从减少折腾成本考虑，我就直接用assert来做单元测试，毕竟在C++之父在他的书里也是用这样的方法进行单元测试的:grin:。</p>

<h2 id="对传递函数相关代码进行单元测试">对传递函数相关代码进行单元测试</h2>
<p>首先，由于这个代码以及未来的大量代码都需要对数值进行检验，所以定义如下函数</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
<span class="kt">bool</span> <span class="n">fuzzyEqual</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">,</span> <span class="n">T</span> <span class="n">relativeErr</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">((</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">*</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">+</span> <span class="n">relativeErr</span><span class="p">))</span> <span class="o">*</span>
       <span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="o">*</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="n">relativeErr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>传递函数相关的需要测试以下的内容：</p>
<ul>
  <li>多项式相乘是否正确；</li>
  <li>大量的从自动控制原理的书上找来的传递函数，来测试是否能够正确输出穿越频率、各种裕度；</li>
  <li>若传递函数表示的线性系统有两个180°穿越频率，给定猜测初值计算能否收敛，不给定初值是否收敛到任意一个值？</li>
</ul>

<h2 id="对处理用户输入输出相关代码进行测试">对处理用户输入输出相关代码进行测试</h2>
<p>需要测试的内容包括：</p>
<ul>
  <li>将用户输入的内容进行分割，并转换为正确的多项式</li>
  <li>将多项式以富文本的形式输出，包括按照平时书写习惯正确处理系数是0,1以及正负号的问题</li>
</ul>

<h2 id="集成测试">集成测试</h2>
<p>最后写两个大的用例，进行整个完整功能的测试（根轨迹的输出我实在不知道如何测试）</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "comprehensiveTest.h"
#include "util.h"
#include "../strop.h"
#include "../trans.h"
</span>
<span class="cp">#include &lt;cassert&gt;
#include &lt;fstream&gt;
</span>
<span class="k">const</span> <span class="kt">double</span> <span class="n">genericErr</span> <span class="o">=</span> <span class="mf">1e-3</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">compTestCase1</span><span class="p">();</span>
<span class="kt">void</span> <span class="n">compTestCase2</span><span class="p">();</span>

<span class="kt">void</span> <span class="nf">comprehensiveTest</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">compTestCase1</span><span class="p">();</span>
    <span class="n">compTestCase2</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">compTestCase1</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">numStr</span> <span class="o">=</span> <span class="s">"5*12.5 1"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">denStr</span> <span class="o">=</span> <span class="s">"1 0*1 1*0.5 1*111.111 1"</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="n">polyFromRawText</span><span class="p">(</span><span class="n">numStr</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">den</span> <span class="o">=</span> <span class="n">polyFromRawText</span><span class="p">(</span><span class="n">denStr</span><span class="p">);</span>

    <span class="n">trans</span> <span class="n">tsfunc</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">den</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">phaseMargin</span><span class="p">,</span> <span class="n">freq1</span><span class="p">;</span>
    <span class="n">tsfunc</span><span class="p">.</span><span class="n">phaseMargin</span><span class="p">(</span><span class="o">&amp;</span><span class="n">phaseMargin</span><span class="p">,</span><span class="o">&amp;</span><span class="n">freq1</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">gainMargin</span><span class="p">,</span> <span class="n">freq2</span><span class="p">;</span>
    <span class="n">tsfunc</span><span class="p">.</span><span class="n">gainMargin</span><span class="p">(</span><span class="o">&amp;</span><span class="n">gainMargin</span><span class="p">,</span><span class="o">&amp;</span><span class="n">freq2</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">fuzzyEqual</span><span class="p">(</span><span class="n">phaseMargin</span><span class="p">,</span><span class="mf">41.6</span><span class="p">,</span><span class="n">genericErr</span><span class="p">));</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">fuzzyEqual</span><span class="p">(</span><span class="n">freq1</span><span class="p">,</span><span class="mf">0.4955</span><span class="p">,</span><span class="n">genericErr</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">compTestCase2</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">numStr</span> <span class="o">=</span> <span class="s">"95.238 286.6759"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">denStr</span> <span class="o">=</span> <span class="s">"1 15.3339 110.5719 286.6759"</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="n">polyFromRawText</span><span class="p">(</span><span class="n">numStr</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">den</span> <span class="o">=</span> <span class="n">polyFromRawText</span><span class="p">(</span><span class="n">denStr</span><span class="p">);</span>

    <span class="n">trans</span> <span class="n">tsfunc</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">den</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">res</span> <span class="o">=</span> <span class="n">tsfunc</span><span class="p">.</span><span class="n">unitStepResponse</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">fout</span><span class="p">(</span><span class="s">"D:/out.txt"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fout</span><span class="p">.</span><span class="n">is_open</span><span class="p">()</span> <span class="o">==</span> <span class="nb">false</span><span class="p">){</span>

    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">fout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>第二个用例是计算系统响应的，这里还是把结果输出到了一个文件中，然后我来检查:disappointed:。应该在这里也实现自动化的测试。<br />
在测试项目的main.cpp里只需写如下代码：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "transTest.h"
#include "stroptest.h"
#include "comprehensiveTest.h"
</span>
<span class="cp">#include &lt;cassert&gt;
#include &lt;iostream&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">transTest</span><span class="p">();</span>

    <span class="n">strOpTest</span><span class="p">();</span>

    <span class="n">comprehensiveTest</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>每次修改过源文件中的某些函数，只要接口不变，就可以立即重新编译测试项目并运行，看看在修改代码之后代码是否还能正常工作。不过绘制根轨迹这个我是实在不知道如何构造测试用例啊:dizzy_face:！</p>

]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 自动控制 </tag>
        
          <tag> 单元测试 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[在手机上绘制根轨迹]]></title>
      <url>/programming/2017/11/15/easyauto/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>写了一个能够绘制线性系统根轨迹、响应曲线、计算幅值裕度、相位裕度等的手机APP。下载地址在文末。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<h2 id="算法">算法</h2>
<h3 id="各种裕度的计算">各种裕度的计算</h3>
<p>很简单，就是用弦截法计算各种穿越频率，然后计算裕度。具体的代码以及API设计可以见GitHub，不过弦截法
需要给出猜测初值，在手机里这个程序也就只能在几个初值里面试，如果这个初值迭代不收敛就换另一个初值
。目前的算法能够通过所有我写的测试用例，不过不知道是否有不对的情况。</p>
<h3 id="与绘制各种根轨迹相关的算法">与绘制各种根轨迹相关的算法</h3>
<h4 id="多项式求根算法">多项式求根算法</h4>
<p>非常美妙的事情是，NDK虽然是个大坑，不过Eigen库还是能够使用的。<br />
多项式的求根可以转化为它的companion matrix的特征值问题来求解：<br />
$p(t)=c_{0}+c_{1}t+\cdots +c_{n-1}t^{n-1}+t^{n}$的companion matrix是<br />
<script type="math/tex">% <![CDATA[
\begin{equation} \tag{a}
C(p)=\begin{bmatrix}
0 & 0 & \dots & 0 & -c_{0}\\
1 & 0 & \dots & 0 & -c_{1}\\
0 & 1 & \dots & 0 & -c_{2}\\
\vdots & \vdots & \ddots & \vdots & \vdots \\
0 & 0 & \dots & 1 & -c_{n-1}
\end{bmatrix}
\end{equation} %]]></script>
这样就可以将多项式求根问题转化为矩阵的特征值问题，然后利用Eigen库求解。</p>
<h4 id="排序算法">排序算法</h4>
<p>由于Eigen求出特征值是无序的，而绘图时是按照方程的根的离散点连线绘制，因此可能会造成各条轨迹交织的情况。为了避免这种情况，需要对根进行排序，即这组点到上组点的距离分别最近进行排序。
这个没有想到更好的点子，实现的算法复杂度为$O(n^2)$，但是在手机上没有卡过，代码如下：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">matsz</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
 <span class="err"> </span> <span class="err"> </span><span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">min_element</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
 <span class="err"> </span> <span class="err"> </span><span class="p">[</span><span class="o">&amp;</span><span class="n">i</span><span class="p">](</span><span class="n">std</span><span class="o">::</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="err"> </span> 
 <span class="err"> </span> <span class="err"> </span><span class="c1">// static variables don't need to be captured
</span>    <span class="p">{</span><span class="k">return</span> <span class="n">norm</span><span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">norm</span><span class="p">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">]);}));</span>
 <span class="err">  </span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="计算响应的算法">计算响应的算法</h3>
<p>这个一开始想用矩阵的幂来进行计算，但是发现许多时候线性系统的$\mathbf{A}$矩阵都是奇异的，没办法，
还是只能用RK45算法，好在现在手机处理器性能很强，没有任何卡的迹象。</p>

<h2 id="处理用户输入">处理用户输入</h2>
<p>为了让用户能够有更好的交互体验，设计的输入格式比较宽送。处理用户输入用了Boost::tokenizer库，这是一个Header-only的库，不需要编译（当然我也自己编译了Boost库，除了Math库编译不了，别的都可以编译，具体能不能用还没有认真试过）。NDK真的是一个大坑，GOOGLE官方对GCC值支持到GCC4.9，然而Qt for Android是GCC编译的，而GCC4.9对C++14支持不全不说，有的C++11的东西都没法用，比如std::stod,std::to_string，所以先自己实现一个。。。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifdef FOR_MOBILE
</span><span class="k">namespace</span> <span class="n">std</span> <span class="p">{</span>

    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_string</span><span class="p">(</span><span class="n">T</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">os</span> <span class="p">;</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">value</span> <span class="p">;</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">()</span> <span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//template &lt;typename T&gt;
</span>    <span class="kt">double</span> <span class="n">stod</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">double</span> <span class="n">res</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">istringstream</span> <span class="p">(</span> <span class="n">str</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="cp">#endif
</span></code></pre></div></div>
<p>用户的输入可以是这样的格式：“1 2 3 * -3 1 * 2,-1*2,-1 0”，通常用户的输入都是以各个零极点为根的多项式之积，*是各个相乘多项式之间的分隔符, 而空白和英文逗号可以作为多项式中各个系数
 之间的分隔符，表示的多项式就是(s<sup>2</sup>+2s+3)(-3s+1)(2s-1)(2s<sup>2</sup>-s).于是采用Boost::tokenizer将字符串进行两层分割：第一层是乘法运算符*，第二层则是空格和英文逗号。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">#include &lt;boost/tokenizer.hpp&gt;
</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">poly</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">myString</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sep</span><span class="p">(</span><span class="s">" ,"</span><span class="p">);</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">tok</span><span class="p">(</span><span class="n">myString</span><span class="p">,</span> <span class="n">sep</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">iterator</span> <span class="n">beg</span> <span class="o">=</span>
             <span class="n">tok</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
         <span class="n">beg</span> <span class="o">!=</span> <span class="n">tok</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">beg</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">stod</span><span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">reverse</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">polyFromRawText</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">rawText</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">};</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sep</span><span class="p">(</span><span class="s">"*"</span><span class="p">);</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">tok</span><span class="p">(</span><span class="n">rawText</span><span class="p">,</span> <span class="n">sep</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;::</span><span class="n">iterator</span> <span class="n">beg</span> <span class="o">=</span>
             <span class="n">tok</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
         <span class="n">beg</span> <span class="o">!=</span> <span class="n">tok</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">beg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">vec</span> <span class="o">=</span> <span class="n">poly</span><span class="p">(</span><span class="o">*</span><span class="n">beg</span><span class="p">);</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">convolution</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">vec</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这段代码的作用是将用户输入分割，并且返回成一个多项式。在这里我自己实现了一个多项式的std::vector<double>用来表示多项式的系数，并实现乘法运算convolution，并且在线性系统的类中也有两个多项式成员：传递函数的分子和分母。</double></p>

<p>实际上使用Boost::tokenizer是一种比较简单可行的方式，也可以用Boost::splitter或者用正则表达式匹配甚至直接自己写一个简单parser都可以实现功能。</p>

<h2 id="多项式的富文本输出">多项式的富文本输出</h2>
<p>为了让用户直观地知道输入的格式代表的多项式，应该在QLabel中将多项式以富文本的形式输出，而且应该<strong><em>同时输出多项式相乘和多项式展开的形式</em></strong>，这里多项式输出时为了追求完美，符合平时的习惯，应该特别注意系数为0,1以及正负号的问题。具体代码太长，见<a href="https://github.com/scienceasdf/easyAuto">GitHub仓库</a>。</p>
<h2 id="截图">截图</h2>
<p><img src="http://localhost:4000/assets//blog_images/shot1.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/shot2.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/shot3.png" width="350px" height="200px" /></p>
<h2 id="其他">其他</h2>
<ul>
  <li>这个APP的创意出自我的室友，他觉得每次做完自动控制原理的题之后又要打开电脑开MATLAB去检验非常麻烦，这个APP就能够解决这样的问题</li>
  <li>APP中绘制根轨迹的增益K是用户输入的，而且绘图时是从0到K线性地取1000个点进行计算绘制，这样的效果并不一定是最好的。在MATLAB中绘制根轨迹的增益取值算法值得借鉴</li>
  <li>本来用的是QCustomPlot来绘制曲线的，结果这个东西在手机上的渲染效果很差，于是改成了
QtCharts，发现这个模块优点很多，而且在手机上显示的效果很好</li>
  <li>虽然GOOGLE的NDK非常坑，不过有一个替代方案据说还是不错的：Crystax NDK，不过自从2017年就没有发布新版本了，社区也不太活跃（GitHub上的代码倒还在改）</li>
</ul>

<hr />

<p><a href="https://github.com/scienceasdf/easyAuto/releases/download/v1.1/easyAuto.apk">APK下载地址（GitHub镜像）</a>
<a href="https://pan.baidu.com/s/1c4ewHnM">APK下载地址（百度网盘镜像）</a></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 自动控制 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[太阳高度角与方位角的计算]]></title>
      <url>/programming/2017/10/22/soalrAngle/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<link href="https://cdn.bootcss.com/highlight.js/6.12.0/styles/qtcreator_light.min.css" rel="stylesheet" />

<script src="https://cdn.bootcss.com/highlight.js/9.12.0/highlight.min.js"></script>

<script>hljs.initHighlightingOnLoad();</script>

<p><strong>探讨太阳高度角与方位角的计算，并写了个手机程序用于计算此时此刻此地（也可以是任意时刻，任意地点）的太阳高度角与方位角.</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<h2 id="基本算法">基本算法</h2>
<p>就是一大堆玄学（或者叫天文学）的概念了。</p>
<h3 id="当地正午时间">当地正午时间</h3>
<p>给定经度$\Phi$（都假设是东经，主要研究中国国土范围内的问题），那么当地的正午时间在北京时间下的时间可以表示成：（这个感觉用代码比公式更加直观）</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">timeType</span> <span class="nf">getNoonTime</span><span class="p">(</span><span class="kt">double</span> <span class="n">longitude</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// assume in the eastern semi-sphere
</span>    <span class="c1">// expressed in UTC+8 time
</span>    <span class="c1">// longtitude expressed in degrees
</span>    <span class="kt">int</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="mf">120.0</span> <span class="o">-</span> <span class="n">longitude</span><span class="p">));</span>
    <span class="n">timeType</span> <span class="n">t1</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">t1</span> <span class="o">+=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">t1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="太阳时角">太阳时角</h3>
<p>太阳时角是指日面中心的时角，即从观测点天球子午圈沿天赤道量至太阳所在时圈的角距离。计算公式为
\begin{equation}
h=15\times (ST-12)
\end{equation}
$ST$为真太阳时。然而平常我们通常都使用北京时间，因此太阳时角的计算公式如下：（还是感觉代码比公式更直观）</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">getHourAngle</span><span class="p">(</span><span class="kt">double</span> <span class="n">longitude</span><span class="p">,</span> <span class="k">const</span> <span class="n">timeType</span> <span class="o">&amp;</span><span class="n">t1</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// The results return the angle expressed in degrees
</span>    <span class="c1">// also UTC+8
</span>    <span class="n">timeType</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">getNoonTime</span><span class="p">(</span><span class="n">longitude</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">t1</span> <span class="o">-</span> <span class="n">t2</span><span class="p">;</span>
    <span class="k">return</span> <span class="mf">.25</span> <span class="o">*</span> <span class="n">dt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="太阳赤纬">太阳赤纬</h3>
<p>太阳赤纬，是地球赤道平面与太阳和地球中心的连线之间的夹角。赤纬角以年为周期，在+23 °26′与-23 °26′的范围内移动，成为季节的标志。最简单的方法是将
赤纬的变化考虑为线性变化。在一篇参考文献上，给出了更为近似的计算方式：按照三角函数变化规律计算。我在这里也按照这种方式计算。而百度百科还给出了一
个更加精确的公式:
\begin{equation} \label{preci}
\delta=0.006918-0.399912 \cos (b)+0.070257 \sin (b)-0.006758 \cos (2b)+ 0.000907\sin (2b)-0.002697\cos (3b)+0.00148\sin (3b)
\end{equation}
其中</p>
<ul>
  <li>$\delta$的单位为度(deg)；</li>
  <li>$\pi$=3.1415926为圆周率；</li>
  <li>$b=2\pi (N-1)/365$，单位为弧度；</li>
  <li>$N$为日数，自每年1月1日开始计算。  <br />
有空去把程序改成这个公式再去跑跑。</li>
</ul>

<h3 id="太阳高度角的计算">太阳高度角的计算</h3>
<p>\begin{equation}
\sin \theta_\mathrm{s} = \cos h \cos \delta \cos \Phi + \sin \delta \sin \Phi \,,
\end{equation}
此处</p>
<ul>
  <li>$\theta_\mathrm{s}$是太阳高度角，</li>
  <li>$h$是以地方恒星时系统下的时角，</li>
  <li>$\delta$是目前的太阳赤纬，</li>
  <li>$\Phi$是当地的纬度。</li>
</ul>

<h3 id="太阳方位角的计算">太阳方位角的计算</h3>
<p>在维基百科上查到的是如下的近似公式
\begin{equation}
\cos \phi _\mathrm {s}=\frac {\sin \delta -\sin \theta _\mathrm {s}\sin \Phi }{cos\theta _\mathrm {s}\cos \Phi }
\end{equation}</p>

<h2 id="程序相关">程序相关</h2>
<p>前面的代码也可以看出，这个问题需要自己实现时间类timeType和日期类dateType，包括一些基本的运算操作，不过也可以用Boost库的或者用Qt的。编程的时候需要特别小心角度与弧度的换算。在安卓程序中需要实现对设备的经纬度定位，还是要感谢Qt，让一切变得十分方便。<br />
类Widget作为主窗体，定义如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Widget</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QWidget</span> <span class="p">{</span>
    <span class="n">Q_OBJECT</span>

<span class="k">public</span><span class="o">:</span>
    <span class="k">explicit</span> <span class="n">Widget</span><span class="p">(</span><span class="n">QWidget</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
    <span class="o">~</span><span class="n">Widget</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">Ui</span><span class="o">::</span><span class="n">Widget</span> <span class="o">*</span><span class="n">ui</span><span class="p">;</span>

    <span class="n">QGeoPositionInfoSource</span> <span class="o">*</span><span class="n">source</span><span class="p">;</span>

<span class="k">public</span> <span class="n">slots</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">realtimeUpdated</span><span class="p">(</span><span class="n">QGeoPositionInfo</span> <span class="n">info</span><span class="p">);</span>
<span class="k">private</span> <span class="n">slots</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">on_updateButton_clicked</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>
<p>具体定位的代码如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">(</span><span class="n">QWidget</span> <span class="o">*</span><span class="n">parent</span><span class="p">)</span> <span class="o">:</span> <span class="n">QWidget</span><span class="p">(</span><span class="n">parent</span><span class="p">),</span> <span class="n">ui</span><span class="p">(</span><span class="k">new</span> <span class="n">Ui</span><span class="o">::</span><span class="n">Widget</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="n">QGeoPositionInfoSource</span> <span class="o">*</span><span class="n">source2</span> <span class="o">=</span>
        <span class="n">QGeoPositionInfoSource</span><span class="o">::</span><span class="n">createDefaultSource</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">source2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">source2</span><span class="o">-&gt;</span><span class="n">setUpdateInterval</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
        <span class="n">connect</span><span class="p">(</span><span class="n">source2</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">positionUpdated</span><span class="p">(</span><span class="n">QGeoPositionInfo</span><span class="p">)),</span> <span class="k">this</span><span class="p">,</span>
                <span class="n">SLOT</span><span class="p">(</span><span class="n">realtimeUpdated</span><span class="p">(</span><span class="n">QGeoPositionInfo</span><span class="p">)));</span>
        <span class="n">source2</span><span class="o">-&gt;</span><span class="n">startUpdates</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...
</span><span class="p">}</span>

<span class="kt">void</span> <span class="n">Widget</span><span class="o">::</span><span class="n">realtimeUpdated</span><span class="p">(</span><span class="n">QGeoPositionInfo</span> <span class="n">info</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">double</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="n">coordinate</span><span class="p">().</span><span class="n">latitude</span><span class="p">();</span>
    <span class="kt">double</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">info</span><span class="p">.</span><span class="n">coordinate</span><span class="p">().</span><span class="n">longitude</span><span class="p">();</span>

    <span class="n">QTime</span> <span class="n">time1</span> <span class="o">=</span> <span class="n">QTime</span><span class="o">::</span><span class="n">currentTime</span><span class="p">();</span>
    <span class="n">timeType</span> <span class="n">td1</span><span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">hour</span><span class="p">(),</span> <span class="n">time1</span><span class="p">.</span><span class="n">minute</span><span class="p">());</span>

    <span class="n">QDate</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">QDate</span><span class="o">::</span><span class="n">currentDate</span><span class="p">();</span>

    <span class="kt">double</span> <span class="n">timeAngle</span> <span class="o">=</span> <span class="n">getHourAngle</span><span class="p">(</span><span class="n">longitude</span><span class="p">,</span> <span class="n">td1</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">elevAngle</span> <span class="o">=</span>
        <span class="n">getSolarElevationAngle</span><span class="p">(</span><span class="n">getSolarDeclination</span><span class="p">(</span><span class="n">d1</span><span class="p">),</span> <span class="n">latitude</span><span class="p">,</span> <span class="n">timeAngle</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">azimuth</span> <span class="o">=</span> <span class="n">getSolarAzimuthAngle</span><span class="p">(</span><span class="n">getSolarDeclination</span><span class="p">(</span><span class="n">d1</span><span class="p">),</span> <span class="n">latitude</span><span class="p">,</span>
                                          <span class="n">timeAngle</span><span class="p">,</span> <span class="n">elevAngle</span><span class="p">);</span>
    <span class="c1">// ...
</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="应用">应用</h2>
<ul>
  <li>和Stellarium里面的太阳高度角、方位角进行了对比，虽然在这里的计算中有些是近似公式，但是误差也不会超过1°</li>
  <li>这个程序，这种方法让我在外地，只要有晴天，就能找到东西南北</li>
  <li>这个程序还可以应用于一些太阳能实验上，如太阳能飞机的动力试车，大概选在哪些月份，哪些时刻，或者说如何调整电池片的方向以使电池片接收到最多的太阳光强能够心里有数</li>
</ul>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 天文 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[浅谈螺旋桨航模（无人机）的动力系统选配（二）]]></title>
      <url>/programming/2017/08/17/propulsion2/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>探讨了螺旋桨无人机动力系统的相关理论，并开发手机与电脑版程序解决相关问题。下载地址在文末。</strong></p>

<hr />
<p>上一篇文章我们讲了螺旋桨无人机动力系统相关的理论，这篇文章说说程序的设计。</p>

<h2 id="数据来源">数据来源</h2>
<p>所有的数据都来自于APC官网的数据。由于APC螺旋桨高效率的优点（正品APC桨的效率非常高，接近0.9），以及APC在其官网公布了所有型号的理论性能数据文件，故下载所有其官网上的五百个左右性能数据文件，其文件已经存储为固定的格式。先在官网上下载索引文件PER2_TITLEDAT.txt，再用wget批量将所有的螺旋桨性能数据文件下载下来。一共五百来个文件，中间下载是否有连接错误导致文件没有下载完整我也不知道:sweat:。APC的桨型号很齐全，基本覆盖了航模级别常用的尺寸，从几英寸到26英寸的都有，如果在这些型号以外的型号那就没办法了。。。数据全部都是dat格式的，用std::ifstream读文件非常耗时。对于开发的安卓版本，肯定不会用External folder里面包含所有的数据，只能用Qt资源文件+QDataStream来读写（不支持std::ifstream)，这样速度更快，不过缺点在于如果数据变动、扩展会不太方便。在写完所有程序之后，我还把所有数据迁移到了一个sqlite数据库文件中，并加上索引，访问速度大大提升，不过目前是不想重构sqlite的版本了。</p>

<h2 id="功能介绍">功能介绍</h2>
<p>程序分为PC版和移动（安卓）版，主要以介绍PC版为主。PC版共有两个程序：DemoProp，用于计算无刷电机动力系统的工作状况并给出一定的建议；PropChart，用于计算电动和油动动力系统的工作状况并绘制图表。</p>
<h3 id="筛选功能">筛选功能</h3>
<p>程序可以对给定的工作状况下的符合要求（如拉力、效率等条件）的螺旋桨进行筛选。DemoProp的筛选界面如下图所示，可以输入电机、电源、减速组等相关信息。
<img src="http://localhost:4000/assets//blog_images/fig2.png" width="350px" height="200px" />
PropChart的筛选界面如下图所示，这里运用的模型是给定转速或者给定输入功率，这样就既能够用于求解电动系统的工作状况，也适用于求解油动系统的工作状况。
<img src="http://localhost:4000/assets//blog_images/fig4.png" width="350px" height="200px" /></p>

<h3 id="分析功能">分析功能</h3>
<p>DemoProp能够对具体的电动系统选配提出指导意见，可以判断当前电机、电源、螺旋桨、减速组的组合究竟是轻载、超载还是正常载荷，如下图所示。
<img src="http://localhost:4000/assets//blog_images/fig3.png" width="350px" height="200px" /></p>

<h3 id="图表功能">图表功能</h3>
<p>PropChart能够绘制螺旋桨的拉力曲线、效率曲线等等，这里我用的是QCustomPlot进行绘制，如下图所示。
<img src="http://localhost:4000/assets//blog_images/fig5.png" width="350px" height="200px" /></p>

<h3 id="移动版">移动版</h3>
<p>一直苦于在室外进行动力试验的时候，不方便将测量的数据与仿真数据进行校对、不知道动力系统应该怎么调整。感谢伟大的Qt的跨平台特性，让我能够将程序移植到安卓系统上（实际上移植到iOS上也可以，不过就是我没有苹果电脑与手机），极大地方便了在外场的实验。针对手机的一些特点，在功能上进行了一些改进，例如取消筛选功能，并增加绘制能量分析饼图的功能。手机版的交互体验应该比电脑版的好太多了。截图如下：
<img src="http://localhost:4000/assets//blog_images/scr2.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/scr3.png" width="350px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/scr1.png" width="350px" height="200px" /></p>
<h2 id="数据验证">数据验证</h2>
<h3 id="静拉力实测数据验证">静拉力实测数据验证</h3>
<p>测试仿APC12X6E螺旋桨,飓风2820电机，$K_v=920$
，内阻28mOhm，静拉力1.7千克力，电流47-48安，转速8300RPM。仿真结果为静拉力2.3千克力，转速8830RPM。考虑到APC官网的数据本来比实际值偏高（参考文献的风洞实验数据有验证），误差与使用偏高值以及没有使用正品APC螺旋桨有关。</p>
<h3 id="应用于太阳能飞机动力系统的例子">应用于太阳能飞机动力系统的例子</h3>
<p>某翼展为5米的太阳能无人机，没有储能装置，太阳能提供动力系统的所有能量。机翼上的电池片大约提供110瓦电能。实验测试测得电池片能够提供的电压大约不超过13V，电流不超过8A。最早使用KV值1000的电机驱动20英寸的自制螺旋桨，静拉力输出很难超过1千克力。换用340KV电机带20英寸以上的木桨，静拉力能够超过10千克力。经计算表明，电机KV值在200附近时驱动20$\sim$22英寸螺旋桨能够有更高效率，换用200KV螺旋桨，以及APC22X10E的螺旋桨，静拉力为1.35千克力。</p>
<h2 id="存在的问题">存在的问题</h2>
<ul>
  <li>筛选功能卡在IO上比较耗时间。当然，MSVC编译的程序能够明显快于MINGW编译的程序。解决方法有很多，只是我不想去重构了</li>
  <li>电脑版的交互体验非常差</li>
  <li>电脑版没有对UI进行多分辨率的调整</li>
</ul>

<hr />
<p><a href="https://pan.baidu.com/s/1QaN9CxFEfJz0RHewitcCgg">安卓版程序下载地址</a><br />
<a href="https://pan.baidu.com/s/1W5DtxZFxC6SmjRxvO9F_tA">Windows版程序下载地址（32位）</a></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 无人机 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[浅谈螺旋桨航模（无人机）的动力系统选配（一）]]></title>
      <url>/programming/2017/08/17/propulsion1/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>探讨了螺旋桨无人机动力系统的相关理论，并开发手机与电脑版程序解决相关问题。下载地址在文末。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<h2 id="动力系统的数学模型">动力系统的数学模型</h2>
<h3 id="无刷电机的数学模型">无刷电机的数学模型</h3>
<p>有<br />
<script type="math/tex">\begin{equation} \label{eqs:1} \tag{a}
\left \{
\begin{array}{l}
U=r_a I+\frac{n}{K_v}\\
I=\frac{M_{em}}{K_m}
\end{array}
\right.
\end{equation}</script>
其中，$r_a$为电机内阻，$U$为电机两端电压，$I$为通过电机的电流，$K_v$为电机Kv值，$K_m$为电机转矩常数，$n$为电机转速(RPM)，$M_{em}$是电机的电磁转矩。<br />
电机的输出转矩为
\begin{equation}
M_{mot}=M_{em}-M_{R}=k_m(I-I_0)
\end{equation}
$K_v$的量纲为RPM/V，$K_m$的量纲是N$\cdot$m/A，在国际单位制下电机的$K_v$与$K_m$满足关系
\begin{equation}
K_m=\frac{60}{2\pi K_v }
\end{equation}
电机的输入功率为
\begin{equation}
P_{in}=UI
\end{equation}
输出功率为
\begin{equation}
P_{out}=\frac{2\pi nM_{mot}}{60}
\end{equation}
电机的效率为
\begin{equation}
%\eta=\frac{P_{out}}{P_{in}}=\frac{2\pi nM_{mot}}{60UI}
\eta =\frac{P_{out}}{P_{in}}=\frac{2\pi nM_{mot}}{60UI}
\end{equation}</p>

<h3 id="螺旋桨的数学模型">螺旋桨的数学模型</h3>
<p>对于螺旋桨，转矩$M$、拉力$T$、功率$P$、效率$\eta$都是空速$v$、螺旋桨转速$n$的函数
<script type="math/tex">\begin{equation} \label{basics} \tag{b}
\left\{
\begin{array}{l}
M=M(v,n)\\
T=T(v,n)=C_T(v,n)\cdot\rho n^2 D^4\\
P=P(v,n)=C_P(v,n)\cdot\rho n^3 D^5\\
\eta=\eta(v,n)
\end{array}
\right.
\end{equation}</script><br />
$C_T$是拉力系数、$C_P$是功率系数，且有$P=M\cdot\frac{2\pi n}{60}$，$\eta=\frac{Tv}{P}$。<br />
定义一个无量纲参数进动比(advance ratio)
\begin{equation} J=\frac{v}{nD}\end{equation}
$D$为螺旋桨直径。<br />
通常，$\eta$与$J$的变化关系如下图所示。在进行初步分析的手工计算中，可以认为$J$是一个相似性判定的参数，如果同一螺旋桨，工作在1状况$(v_1,n_1)$与2状况$(v_2,n_2)$，满足进动比相同，即$\frac{v_1}{n_1}=\frac{v_2}{n_2}$，则可以认为工作状况下的效率$\eta$、拉力系数$C_T$、功率系数$C_P$均相同。如果要估算某一工作状况$(v,n)$的工作参数，仅需先计算进动比$J=\frac{v}{nD}$，然后查找对应进动比的相关$\eta,C_T\text{和}C_P$，然后按照式(\ref{basics})计算拉力、转矩、效率与功率。
<img src="http://localhost:4000/assets//blog_images/fig1.png" width="350px" height="200px" />
实际上，由于低雷诺数的影响，对于进动比相同的两种工作状况，$\eta,C_T\text{和}C_P$并不一定对应相等。通常高雷诺数的工作状况下螺旋桨的工作效率更高。</p>
<h3 id="电源模型">电源模型</h3>
<p>通常，无人机上使用的电源为蓄电池。蓄电池电源的伏安特性关系为：
\begin{equation} \label{eqs:src1}
U=U_0-Ir_0 <br />
\end{equation}
其中$r_0$为蓄电池内阻。
 对于太阳能无人机，通常是太阳能电池直接为蓄电池充电，由蓄电池驱动直流电机，那么电机两端的电压电流关系满足式(\ref{eqs:src1}).而若太阳能无人机有特殊的要求(如某些太阳能飞机竞赛),那么设计的飞机会是太阳能电池片组直接为动力系统供电。太阳能电池片组的伏安特性关系为
\begin{equation}\label{solar_array} 
I=I_{sc}[1-A(e^{U/BU_{oc}})-1]
\end{equation}
其中，<script type="math/tex">A=(1-\frac{I_m}{I_{sc}})e^{-U_m/(BU_{oc})}</script><br />
<script type="math/tex">B=(\frac{U_m}{U_{oc}}-1)[\ln(1-\frac{I_m}{I_{sc}})]</script><br />
$I_{sc}$为电池组的短路电流;<br />
$U_{oc}$为电池组的开路电压;<br />
$U_m,I_m$为最大功率点处的太阳能电池的输出电压与电流.</p>

<h3 id="综合模型及其求解">综合模型及其求解</h3>
<p>已知飞机的飞行速度$v$，无刷电机的$K_v$值，内阻$r_a$与10V下空载电流$i_0$，以及螺旋桨对应的性能数据，则利用电机转矩等于螺旋桨转矩的关系，求解在电压与电流下的转速$n$，其它参数则可对应求解。电源的电压和电流可以符合某种伏安特性曲线,如式(\ref{eqs:src1})、(\ref{solar_array})，求解过程则为弦截法对转速迭代求解。电源也可能是具有限流或限压值，也可以给出电源电压与电流的上限，求解时取转速上限恰好同时满足不超过电源电压与电流的上限。</p>
<h3 id="非平凡模型">非平凡模型</h3>
<h4 id="引入减速组">引入减速组</h4>
<p>设减速组减速比为$K$，机械效率为$\eta_g$，则有<br />
<script type="math/tex">\begin{equation} \tag{c}
\left\{
\begin{array}{l}
n_{prop}=\frac{n_{mot}}{K}\\
T_{prop}=K\cdot T_{mot}\cdot\eta_g
\end{array}
\right.
\end{equation}</script>
考虑$\eta_g=1$的理想减速器，与电机形成的系统可以等效为一个$K_v$值折合为原电机$K_v$值$\frac{1}{K}$的新电机。通常高效率螺旋桨的特征都是低负载、大直径、大桨距（相对于直径）、低速运行，所以为了动力系统的效率最大化应该用大直径螺旋桨。由于带动大直径螺旋桨所需的转矩大，如果需要使电机工作在最大电流以下，可以使用减速组或使用低$K_v$值的电机。然而低$K_v$值得电机内阻会比高$K_v$值得电机内阻大，使用减速组会有机械能损失。而且大直径螺旋桨的重量大，且能驱动大直径螺旋桨的电机或减速器通常重量也较大。故具体应选用的方案，应考虑效率、重量、成本、加工装配难度等多方面考虑。</p>

<h4 id="单电机驱动两个螺旋桨">单电机驱动两个螺旋桨</h4>
<p>在这种情况下，有<br />
<script type="math/tex">\begin{equation} \label{eqs:12} \tag{d}
\left\{
\begin{array}{l}
n_{prop}=n_{mot}\\
M_{prop}=\frac{M_{mot}}{2}
\end{array}
\right.
\end{equation}</script>
求解上式则可以求出电机的转速。双电机驱动单螺旋桨及其它类似情况可以按照类似的方法列出公式求解。</p>
<h3 id="内燃机的特性">内燃机的特性</h3>
<p>无人机上使用的内燃机通常可分为两行程发动机和四行程发动机。两行程发动机与四行程发动机相比，优点是功率大，可动零件少，维护简便，价格便宜；缺点是油料燃烧不充分，燃料消耗大。两行程发动机还有两个显著特点：</p>
<ul>
  <li>使用这类发动机的无人机，爬升时经常可以听到转速明显下降的声音，俯冲时可以明显听到转速明显升高的声音，原因是这种发动机的扭矩小，对负载的变化较敏感。为了减小这种影响，两行程发动机一般使用大直径小桨距螺旋桨。</li>
  <li>两行程发动机转速普遍较高，也只有在高速下才能发挥出全部功率，所以厂家提供的功率数据也是要达到一定转速。二行程发动机最大的缺点是油门非线性。</li>
</ul>

<p>四行程发动机的优点是油门线性好，扭矩大，转速稳定，声音柔和，可以使用大桨距的螺旋桨，提高效率。四行程发动机工作室燃料燃烧充分。无人机爬升时，转速稳定、爬升有力、声音无变化。而四行程的缺点是价格昂贵，重量较大，维护不便。同样的工作容积，普通的四行程发动机输出功率理论上只有两行程发动机的一半，但是实际上不同于二行程发动机，四行程发动机的最大输出功率是在一般使用中可以达到要求的转速范围内的。<br />
由参考文献,对于高亚音速的飞机，内燃机的功率会随着速度的增加而增大；而对于大多数慢速飞机，内燃机的功率可以认为不变。大多数无人机的巡航速度下发动机的功率可以认为近似不变，那么对应其最大输出功率、最大输出转矩，通常需要一个合适的转速，否则发动机性能无法得到最大发挥。</p>

<hr />
<p><a href="https://pan.baidu.com/s/1QaN9CxFEfJz0RHewitcCgg">安卓版程序下载地址</a><br />
<a href="https://pan.baidu.com/s/1W5DtxZFxC6SmjRxvO9F_tA">Windows版程序下载地址（32位）</a><br />
由于博文过长会导致浏览器加载、渲染速度降低，故后续讨论请看下一篇文章。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 无人机 </tag>
        
          <tag> 安卓开发 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[让多种编辑器支持LaTeX的补全]]></title>
      <url>/programming/2017/04/21/snippets/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>在Qt creator, Sublime Text 3, VS Code中添加相关的snippets，让这些编辑器可以得心应手的处理LaTeX公式。</strong></p>

<hr />

<p>最近用LaTeX写作业，包括在博客里面用MathJax，输入公式总需要一个自动补全的编辑器。用TeX Studio用着很不顺手，因为它的自动补全是用回车键，而我习惯TAB键。于是只能用别的编辑器来替代了。</p>
<h2 id="sublime-text-3">Sublime Text 3</h2>
<p>首先是Sublime Text 3，这个有相应的LaTeX插件LaTeX Tools，比较方便。为了让它自动补全更加智能，需要在用户设置中增加下面一条语句：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"auto_complete_selector"</span><span class="p">:</span><span class="w"> </span><span class="s2">"source, text"</span><span class="p">,</span><span class="w">
</span></code></pre></div></div>
<p>不过这样仅仅是针对.tex文件，为了让平时写Markdown文件时也能有自动补全，还需要自己写sublime的sublime-completions文件。这个文件可以存储多个snippet，而一个sublime-snippet文件只能存储一个snippet.在文件中加入如下语句：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
   </span><span class="err">//</span><span class="s2">"scope"</span><span class="p">:</span><span class="w"> </span><span class="s2">"text.html - source - meta.tag, punctuation.definition.tag.begin"</span><span class="p">,</span><span class="w">

   </span><span class="s2">"completions"</span><span class="p">:</span><span class="w">
   </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="s2">"trigger"</span><span class="p">:</span><span class="w"> </span><span class="s2">"frac"</span><span class="p">,</span><span class="w"> </span><span class="s2">"contents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"frac{$1}{$2}$0"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="s2">"trigger"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bmatrix"</span><span class="p">,</span><span class="w"> </span><span class="s2">"contents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\\</span><span class="s2">begin{matrix}</span><span class="se">\n</span><span class="s2">${1}</span><span class="se">\n\\</span><span class="s2">end{matrix}</span><span class="se">\n</span><span class="s2">$0"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="s2">"trigger"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mathbf"</span><span class="p">,</span><span class="w"> </span><span class="s2">"contents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mathbf{$1}{$2}$0"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="s2">"trigger"</span><span class="p">:</span><span class="w"> </span><span class="s2">"equaton"</span><span class="p">,</span><span class="w"> </span><span class="s2">"contents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\\</span><span class="s2">begin{equation}</span><span class="se">\n</span><span class="s2">${1}</span><span class="se">\n\\</span><span class="s2">end{equation}</span><span class="se">\n</span><span class="s2">$0"</span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="s2">"trigger"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\\</span><span class="s2">begin"</span><span class="p">,</span><span class="w"> </span><span class="s2">"contents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\\</span><span class="s2">begin{$1}</span><span class="se">\n</span><span class="s2">${2}</span><span class="se">\n\\</span><span class="s2">end{$1}</span><span class="se">\n</span><span class="s2">$0"</span><span class="p">}</span><span class="w">
   </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>大体上常用的也就是这些了，这样能够大大提升写作效率。</p>

<h2 id="qt-creator">Qt Creator</h2>
<p>没错，这是一个IDE，但是也可以充分挖掘它的文字编辑器功能。用Qt Creator打开一个Markdown文件，这个时候它会问你是否加载高亮方案，选择加载可以发现很多可以用的高亮格式，是基于Kate编辑器的所以非常齐全，把SQL, Markdown, LaTeX等等常用的高亮方案都下载下来。</p>

<p>接着就是设置snippet了，在Qt中可以不用手动地自己编写xml文件，只需要工具-选项-文本编辑器-片段里面自己设置一些snippet.最后生成的xml文件如下：</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;snippets&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"begin"</span> <span class="na">id=</span><span class="s">""</span> <span class="na">complement=</span><span class="s">""</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"false"</span><span class="nt">&gt;</span>begin{$environment$}
$$
\\end{$environment$}
$next$<span class="nt">&lt;/snippet&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"bmatrix"</span> <span class="na">id=</span><span class="s">""</span> <span class="na">complement=</span><span class="s">""</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"false"</span><span class="nt">&gt;</span>\\begin{bmatrix}
$$
\\end{bmatrix}
$next$<span class="nt">&lt;/snippet&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"equation"</span> <span class="na">id=</span><span class="s">""</span> <span class="na">complement=</span><span class="s">""</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"false"</span><span class="nt">&gt;</span>\\begin{equation}
$$
\\end{equation}
$next$<span class="nt">&lt;/snippet&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"frac"</span> <span class="na">id=</span><span class="s">""</span> <span class="na">complement=</span><span class="s">""</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"false"</span><span class="nt">&gt;</span>frac{$num$}{$den$}$$<span class="nt">&lt;/snippet&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"global"</span> <span class="na">id=</span><span class="s">"text_global"</span> <span class="na">complement=</span><span class="s">"example"</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"true"</span><span class="nt">&gt;</span>// This is available in all editors.<span class="nt">&lt;/snippet&gt;</span>
    <span class="nt">&lt;snippet</span> <span class="na">group=</span><span class="s">"Text"</span> <span class="na">trigger=</span><span class="s">"mathbf"</span> <span class="na">id=</span><span class="s">""</span> <span class="na">complement=</span><span class="s">""</span> <span class="na">removed=</span><span class="s">"false"</span> <span class="na">modified=</span><span class="s">"false"</span><span class="nt">&gt;</span>mathbf{$$}$next$
<span class="nt">&lt;/snippet&gt;</span>
<span class="nt">&lt;/snippets&gt;</span>
</code></pre></div></div>

<p>其实还可以自己开发Qt Creator的插件，实现LaTeX文件的编译、预览这些。不过总的来说，Qt Creator的功能稍差些。但是我平时使用这个IDE的机会比较多，偶尔也会用这个处理一些文件。</p>

<h2 id="vs-code">VS Code</h2>
<p>这个也是比较容易设置的，代码如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">Place</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">global</span><span class="w"> </span><span class="err">snippets</span><span class="w"> </span><span class="err">here.</span><span class="w"> </span><span class="err">Each</span><span class="w"> </span><span class="err">snippet</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">defined</span><span class="w"> </span><span class="err">under</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">snippet</span><span class="w"> </span><span class="err">name</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">has</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">scope</span><span class="p">,</span><span class="w"> </span><span class="err">prefix</span><span class="p">,</span><span class="w"> </span><span class="err">body</span><span class="w"> </span><span class="err">and</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">description.</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">comma</span><span class="w"> </span><span class="err">separated</span><span class="w"> </span><span class="err">ids</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">languages</span><span class="w"> </span><span class="err">where</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">snippet</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">applicable</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">scope</span><span class="w"> </span><span class="err">field.</span><span class="w"> </span><span class="err">If</span><span class="w"> </span><span class="err">scope</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">left</span><span class="w"> </span><span class="err">empty</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">omitted</span><span class="p">,</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">snippet</span><span class="w"> </span><span class="err">gets</span><span class="w"> </span><span class="err">applied</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">languages.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">prefix</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">what</span><span class="w"> </span><span class="err">is</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">trigger</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">snippet</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">body</span><span class="w"> </span><span class="err">will</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">expanded</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">inserted.</span><span class="w"> </span><span class="err">Possible</span><span class="w"> </span><span class="err">variables</span><span class="w"> </span><span class="err">are</span><span class="p">:</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">$</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="err">$</span><span class="mi">2</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">tab</span><span class="w"> </span><span class="err">stops</span><span class="p">,</span><span class="w"> </span><span class="err">$</span><span class="mi">0</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">final</span><span class="w"> </span><span class="err">cursor</span><span class="w"> </span><span class="err">position</span><span class="p">,</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">$</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="err">label</span><span class="p">},</span><span class="w"> </span><span class="err">$</span><span class="p">{</span><span class="mi">2</span><span class="p">:</span><span class="err">another</span><span class="p">}</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">placeholders.</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">Placeholders</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">same</span><span class="w"> </span><span class="err">ids</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">connected.</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="err">Example</span><span class="p">:</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="s2">"Print to console"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">//</span><span class="w"> 	</span><span class="s2">"scope"</span><span class="p">:</span><span class="w"> </span><span class="s2">"javascript,typescript"</span><span class="p">,</span><span class="w">
        </span><span class="err">//</span><span class="w"> 	</span><span class="s2">"prefix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"log"</span><span class="p">,</span><span class="w">
        </span><span class="err">//</span><span class="w"> 	</span><span class="s2">"body"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="err">//</span><span class="w"> 		</span><span class="s2">"console.log('$1');"</span><span class="p">,</span><span class="w">
        </span><span class="err">//</span><span class="w"> 		</span><span class="s2">"$2"</span><span class="w">
        </span><span class="err">//</span><span class="w"> 	</span><span class="p">],</span><span class="w">
        </span><span class="err">//</span><span class="w"> 	</span><span class="s2">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Log output to console"</span><span class="w">
        </span><span class="err">//</span><span class="w"> </span><span class="p">}</span><span class="w">
        </span><span class="s2">"eqn"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="s2">"prefix"</span><span class="p">:</span><span class="w"> </span><span class="s2">"equation"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"body"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                        </span><span class="s2">"</span><span class="se">\\</span><span class="s2">begin{equation}</span><span class="se">\n</span><span class="s2">$1</span><span class="se">\n\\</span><span class="s2">end{equation}"</span><span class="w">
                </span><span class="p">],</span><span class="w">
                </span><span class="s2">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A LaTeX equation"</span><span class="w">
        </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>不过一开始我很奇怪，同样设置了snippet，在LaTeX文件中就会提示，但是Markdown文件中就不提示。GOOGLE了一把，发现原因是：</p>
<blockquote>
  <p>Full extensions get auto (7x24) completion by default (e.g. latex, cake), some built-in extensions like Markdown do not.</p>
</blockquote>

<p>所以需要进行特定语言设置：敲击Ctrl+Shift+P，输入Configure language specific settings，输入Markdown，进行下面的设置：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"[markdown]"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"editor.quickSuggestions"</span><span class="p">:</span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<hr />

<p>更新：我发现了支持TAB键补全的LaTeX编辑器：TeXMaker，在写tex文件时就用TeXMaker了，不过在写Markdown文件时还是这些文本编辑器更好用，因为有时还需要打开别的类型的文件。</p>

]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> LaTeX </tag>
        
          <tag> 编辑器 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[轨道动力学中常用的计算机算法（二）]]></title>
      <url>/programming/2017/04/14/astrodynamics2/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>这里是一些轨道动力学中常见物理量的计算机算法的总结。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />
<p><img src="http://localhost:4000/assets//blog_images/orbitalElement.svg" width="600px" /></p>
<h2 id="偏近点角">偏近点角</h2>
<ul>
  <li>已知：$\nu,e$</li>
  <li>求：$EA$</li>
</ul>

<p>如果$e&gt;(1-10\times{-11})$，那么$EA=0$，否则
\begin{equation}\sin(EA)=\frac{\sqrt{1-e^2}\sin\nu}{1+e\cos\nu}\end{equation}
\begin{equation}\cos(EA)=\frac{e+\cos\nu}{1+e\cos\nu}\end{equation}
\begin{equation} \label{EA}
EA=atan2(\sin EA,\cos EA)\end{equation}</p>

<p>在资料里还查到了双曲线的Hyperbolic Anomaly(HA)，因为是双曲线轨道，先不写在这里了。</p>

<h2 id="平近点角">平近点角</h2>
<ul>
  <li>已知：$\nu,e$</li>
  <li>求：$MA$</li>
</ul>

<p>对于椭圆轨道($e\leq 10\times{-11}$)，首先按照式(\ref{EA})算出偏近点角，然后
\begin{equation} MA=EA-e\sin EA\end{equation}
这个公式是和平均角速度的公式混合食用的：
\begin{equation}
n=\sqrt{\frac{\mu}{\pm a^3}}\end{equation}
正负号是因为双曲线的半长轴是负的。</p>

<h2 id="偏近点角到真近点角">偏近点角到真近点角</h2>
<ul>
  <li>已知：$EA,e$</li>
  <li>求：$\nu$</li>
</ul>

<p>\begin{equation}\sin\nu=\frac{\sqrt{1-e^2}\sin EA}{1-e\cos EA} \end{equation}
\begin{equation}\cos\nu=\frac{\cos EA -e}{1-e\cos EA} \end{equation}
\begin{equation}\nu=atan2(\sin\nu,\cos\nu)\end{equation}</p>

<h2 id="平近点角到偏近点角">平近点角到偏近点角</h2>
<ul>
  <li>已知：$MA,e$</li>
  <li>求：$EA$</li>
</ul>

<p>就是一个牛顿迭代法，这里直接给出实现的代码</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">MA2EA</span><span class="p">(</span><span class="kt">double</span> <span class="n">MA</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ecc</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ecc</span> <span class="o">&lt;</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// elliptic orbit case
</span>        <span class="kt">double</span> <span class="n">E</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">MA</span> <span class="o">&lt;</span> <span class="mf">.0</span> <span class="o">&amp;&amp;</span> <span class="n">MA</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">pi</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">MA</span> <span class="o">&gt;</span> <span class="n">pi</span><span class="p">))</span>
            <span class="n">E</span> <span class="o">=</span> <span class="n">MA</span> <span class="o">-</span> <span class="n">ecc</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">E</span> <span class="o">=</span> <span class="n">MA</span> <span class="o">+</span> <span class="n">ecc</span><span class="p">;</span>

        <span class="kt">double</span> <span class="n">E_</span> <span class="o">=</span> <span class="n">MA</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">E</span> <span class="o">-</span> <span class="n">E_</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">1e-8</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">E_</span> <span class="o">=</span> <span class="n">E</span><span class="p">;</span>
            <span class="n">E</span> <span class="o">=</span> <span class="n">E</span> <span class="o">+</span> <span class="p">(</span><span class="n">MA</span> <span class="o">-</span> <span class="n">E</span> <span class="o">+</span> <span class="n">ecc</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">E</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">ecc</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">E</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">E</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="轨道外推的算法">轨道外推的算法</h2>
<p>根据上面各个角之间的转换关系，就可以实现轨道外推。写一个类，封装轨道六根数：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">KeplerianState</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">SMA</span><span class="p">;</span> <span class="c1">// semimajor axis, a
</span>    <span class="kt">double</span> <span class="n">ECC</span><span class="p">;</span> <span class="c1">// eccentricity, e
</span>    <span class="kt">double</span> <span class="n">INC</span><span class="p">;</span> <span class="c1">// inclination, i
</span>    <span class="kt">double</span> <span class="n">AOP</span><span class="p">;</span> <span class="c1">// argument of periapsis, \omega
</span>    <span class="kt">double</span> <span class="n">RAAN</span><span class="p">;</span> <span class="c1">// right ascension of the ascending node, \Omega
</span>    <span class="kt">double</span> <span class="n">TA</span><span class="p">;</span> <span class="c1">// true anomaly, \phi
</span>
    <span class="n">KeplerianState</span><span class="p">()</span> <span class="p">{}</span>
    <span class="n">KeplerianState</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">e</span><span class="p">,</span> <span class="kt">double</span> <span class="n">i</span><span class="p">,</span> <span class="kt">double</span> <span class="n">omega</span><span class="p">,</span> <span class="kt">double</span> <span class="n">Omega</span><span class="p">,</span>
                   <span class="kt">double</span> <span class="n">phi</span><span class="p">,</span> <span class="kt">double</span> <span class="n">mu</span> <span class="o">=</span> <span class="mf">3.986004415e14</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">SMA</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">ECC</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="n">INC</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">AOP</span><span class="p">(</span><span class="n">omega</span><span class="p">),</span> <span class="n">RAAN</span><span class="p">(</span><span class="n">Omega</span><span class="p">),</span> <span class="n">TA</span><span class="p">(</span><span class="n">phi</span><span class="p">),</span>
          <span class="n">gravityConst</span><span class="p">(</span><span class="n">mu</span><span class="p">)</span> <span class="p">{}</span>
    <span class="o">~</span><span class="n">KeplerianState</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">toCartesian</span><span class="p">(</span><span class="n">vec3</span> <span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">*</span><span class="n">vel</span><span class="p">);</span>
    <span class="kt">void</span> <span class="n">step</span><span class="p">(</span><span class="kt">double</span> <span class="n">t</span><span class="p">);</span>

    <span class="k">static</span> <span class="n">KeplerianState</span> <span class="n">fromR_V</span><span class="p">(</span><span class="k">const</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="k">const</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">,</span>
                                  <span class="kt">double</span> <span class="n">mu</span> <span class="o">=</span> <span class="mf">3.98600445e14</span><span class="p">);</span>

<span class="k">public</span><span class="o">:</span>
    <span class="kt">double</span> <span class="n">gravityConst</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<p>轨道外推就是用平均角速度乘时间得到平近点角，然后再转化至真近点角：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">KeplerianState</span><span class="o">::</span><span class="n">step</span><span class="p">(</span><span class="kt">double</span> <span class="n">t</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kt">double</span> <span class="n">MA</span> <span class="o">=</span> <span class="n">TA2MA</span><span class="p">(</span><span class="n">TA</span><span class="p">,</span> <span class="n">ECC</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">n</span> <span class="o">=</span> <span class="n">pow</span><span class="p">(</span><span class="n">gravityConst</span> <span class="o">/</span> <span class="n">SMA</span> <span class="o">/</span> <span class="n">SMA</span> <span class="o">/</span> <span class="n">SMA</span><span class="p">,</span> <span class="mf">.5</span><span class="p">);</span>
    <span class="n">MA</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">t</span><span class="p">;</span> <span class="c1">// t seconds later
</span>    <span class="n">TA</span> <span class="o">=</span> <span class="n">MA2TA</span><span class="p">(</span><span class="n">MA</span><span class="p">,</span> <span class="n">ECC</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="近地点远地点速度">近地点、远地点速度</h2>
<ul>
  <li>已知：$a,e,\mu$</li>
  <li>求：$v_a,v_p$</li>
</ul>

<p>如果$e &gt; ( 1 - 10\times{−12} )$，那么$v_a=0$，否则
\begin{equation}v_a=\sqrt{\frac{\mu}{a}(\frac{1-e}{1+e})}
\end{equation}
\begin{equation}v_p=\sqrt{\frac{\mu}{a}(\frac{1+e}{1-e})}
\end{equation}</p>

<hr />
<p><strong>注意这些公式带入运算时都是要化成弧度的！！！</strong></p>

]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 天文 </tag>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[轨道动力学中常用的计算机算法]]></title>
      <url>/programming/2017/04/07/astrodynamics1/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>这里是一些轨道动力学中常见物理量的计算机算法的总结。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<p>最近专业课又是轨道动力学又是姿态动力学什么的，非常有意思。在航天器动力学里面有太多的算法可以讲，从时间转换、坐标系的转换到轨道外推这些，刚体动力学其实还可以借鉴游戏引擎的一些思路。自己最近借学习这些课程的机会，自己实现了3维向量、3阶方阵、四元数的轮子。关于刚体动力学，在航天中也就是姿态动力学的探讨不在本文。这篇文章总结一些轨道动力学常见物理量的算法。</p>

<h2 id="笛卡尔坐标系转换到轨道六根数">笛卡尔坐标系转换到轨道六根数</h2>
<p><img src="http://localhost:4000/assets//blog_images/Keplerian.png" width="600px" height="400px" /></p>
<ul>
  <li>已知：$\mathbf{r},\mathbf{v}$和引力常数$\mu$</li>
  <li>求：$a,e,i,\omega,\Omega,\nu$</li>
</ul>

<p>\begin{equation} \mathbf{h} = \mathbf{r}\times\mathbf{v}\end{equation}
\begin{equation} h = ||\mathbf{h}||\end{equation}
升交线方向的矢量是
\begin{equation} \mathbf{n}=[0,0,1]^T\times\mathbf{h}\end{equation}
\begin{equation} n = ||\mathbf{n}||\end{equation}
轨道的离心率和能量通过以下式子计算
\begin{equation} \mathbf{e} = \frac{(v^2-\frac{\mu}{r})\mathbf{r}-(\mathbf{r}\cdot\mathbf{v})\mathbf{v}}{\mu}\end{equation}
\begin{equation}e=||\mathbf{e}||\end{equation}
\begin{equation}\xi = \frac{v^2}{2}-\frac{\mu}{r}\end{equation}
对于抛物线轨道，半长轴是正无穷而能量是0.这里要做的工作是检查轨道是否是近抛物线轨道。如果$|1-e|&lt;10^{-7}$，就要另外讨论了。<br />
半长轴的计算公式为
\begin{equation}a=-\frac{\mu}{2\xi}\end{equation}
轨道倾角：
\begin{equation}i=\arccos(\frac{h_z}{h})\end{equation}
计算升交点赤经，近地点角距，真近点角需要分四种情况处理<br />
<strong><em>情况1：对于非圆，非赤道平面的轨道</em></strong><br />
如果$(e \geq 10^{−11}),(10^{−11} \leq i \leq \pi − 10^{−11})$,升交点赤经
\begin{equation}\Omega=\arccos(\frac{n_x}{n})\end{equation}
但是如果$n_y&lt;0$，那么$\Omega = 2\pi-\Omega$<br />
近地点角距
\begin{equation}\omega=\arccos(\frac{\mathbf{n}\cdot\mathbf{e}}{ne})\end{equation}
如果$e_z&lt;0$，那么$\omega = 2\pi-\omega$ <br />
真近点角
\begin{equation}\nu=\arccos(\frac{\mathbf{e}\cdot\mathbf{r}}{er})\end{equation}
如果$\mathbf{r}\cdot\mathbf{v}&lt;0$，那么$\nu=2\pi-\nu$<br />
<strong><em>情况2：对于非圆，在赤道平面的轨道</em></strong> <br />
如果$(e \geq 10^{−11}),(10^{−11} \geq i)|(i \geq \pi − 10^{−11})$，那么
\begin{equation}\Omega=0\end{equation}
\begin{equation}\omega=\arccos(\frac{\mathbf{n}\cdot\mathbf{e}}{ne})\end{equation}
但是如果$e_y&lt;0$，那么$\omega = 2\pi-\omega$ <br />
\begin{equation}\nu=\arccos(\frac{\mathbf{e}\cdot\mathbf{r}}{er})\end{equation}
如果$\mathbf{r}\cdot\mathbf{v}&lt;0$，那么$\nu=2\pi-\nu$<br />
<strong><em>情况3：对于圆，非赤道平面的轨道</em></strong><br />
如果$(e \leq 10^{−11}),(10^{−11} \leq i \leq \pi − 10^{−11})$，那么
\begin{equation}\Omega=\arccos(\frac{n_x}{n})\end{equation}
但是如果$n_y&lt;0$，那么$\Omega = 2\pi-\Omega$ <br />
\begin{equation}\omega=0\end{equation}
\begin{equation}\nu=\arccos(\frac{\mathbf{e}\cdot\mathbf{r}}{er})\end{equation}
如果$r_z&lt;0$，那么$\nu=2\pi-\nu$<br />
<strong><em>情况4：对于圆，在赤道平面的轨道</em></strong><br />
如果$(e \leq 10^{−11}),(10^{−11} \geq i)|(i \geq \pi − 10^{−11})$，那么
\begin{equation}\Omega=0\end{equation}
\begin{equation}\omega=0\end{equation}
\begin{equation}\nu=\arccos(\frac{r_x}{r})\end{equation}
如果$r_y&lt;0$，那么$\nu=2\pi-\nu$</p>

<h2 id="轨道六根数转换到笛卡尔坐标系">轨道六根数转换到笛卡尔坐标系</h2>
<ul>
  <li>已知：$a,e,i,\omega,\Omega,\nu$ 和引力常数$\mu$</li>
  <li>求： $\mathbf{r},\mathbf{v}$</li>
</ul>

<p>首先是焦准距
\begin{equation}p=a(1-e^2)\end{equation}
\begin{equation}r=\frac{p}{1+e\cos\nu}\end{equation}
\begin{equation}x=r(\cos(\omega+\nu)\cos\Omega-\cos i\sin(\omega+\nu)\sin\Omega)\end{equation}
\begin{equation}y=r(\cos(\omega+\nu)\sin\Omega+\cos i\sin(\omega+\nu)\cos\Omega)\end{equation}
\begin{equation}z=r[\sin(\omega+\nu)\sin i]\end{equation}
这个算法计算计算速度向量的前提是非抛物线轨道，也就是当($||\mathbf{p}||\geq1e-30$)，有
\begin{equation}\dot x=\sqrt\frac{\mu}{p}(\cos\nu+e)(-\sin\omega\cos\Omega-\cos i\sin\Omega\cos\omega)-\sqrt\frac{\mu}{p}\sin{\nu}(\cos\omega\cos\Omega-\cos  i\sin\Omega\sin\omega)\end{equation}
\begin{equation}\dot y=\sqrt\frac{\mu}{p}(\cos\nu+e)(-\sin\omega\sin\Omega+\cos i\cos\Omega\cos\omega)-\sqrt\frac{\mu}{p}\sin{\nu}(\cos\omega\sin\Omega+\cos i \cos\Omega\sin\omega)\end{equation}
\begin{equation}\dot z=\sqrt\frac{\mu}{p}[(\cos\nu+e)\sin i\cos\omega-\sin\nu\sin i\sin\omega]\end{equation}</p>

<hr />
<p><strong>注意这些公式带入运算时都是要化成弧度的！！！</strong></p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 天文 </tag>
        
          <tag> 数值算法 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[姿态动力学仿真系统]]></title>
      <url>/programming/2017/03/27/rigidBody/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
  							TeX: { equationNumbers: {  autoNumber: "AMS"  },
     							   extensions: ["AMSmath.js"]}
  		});
		</script>

<script type="text/javascript" src="https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>实现了一个卫星姿态动力学的仿真程序，包括动力学的仿真以及3维显示。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<p>这篇文章参考了不少叶劲峰（Milo Yip）大神翻译的经典著作《游戏引擎架构》，以及SimTK引擎的文档。</p>

<h2 id="常见算法">常见算法</h2>
<p>刚体动力学问题里面最容易遇到的就是微分方程，数值求解微分方程最经典的方法莫过于欧拉法和RK4方法，这里就不多说了。不过，游戏引擎里还经常有一种算法：韦尔莱积分（Verlet intergration）。</p>

<h3 id="韦尔莱积分">韦尔莱积分</h3>
<p>推导如下：<br />
<script type="math/tex">r(t_1+\Delta t)=r(t_1)+\dot r\Delta t+\frac{1}{2}\ddot r(t_1)\Delta t^2+\frac{1}{6}\dddot r(t_1)\Delta t^3+o(\Delta t^4)</script><br />
<script type="math/tex">r(t_1-\Delta t)=r(t_1)-\dot r\Delta t+\frac{1}{2}\ddot r(t_1)\Delta t^2-\frac{1}{6}\dddot r(t_1)\Delta t^3+o(\Delta t^4)</script><br />
<script type="math/tex">r(t_1+\Delta t)=2r(t_1)-r(t_1-\Delta t)+a(t_1)\Delta t^2+o(\Delta t^4)</script><br />
<script type="math/tex">r(t_1+\Delta t)=2r(t_1)-r(t_1-\Delta t)+\frac{F(t_1)}{m}(t_1)\Delta t^2+o(\Delta t^4)</script><br />
这里速度就被消去了。</p>

<p>还有一种速度韦尔莱：</p>
<ol>
  <li>$r(t_1+\Delta t)=r(t_1)+v(t_1)\Delta t+\frac{1}{2}a(t_1)\Delta t^2$</li>
  <li>$v(t_1+\frac{1}{2}\Delta t)=v(t_1) + \frac{1}{2}a(t_1)\Delta t$</li>
  <li>$a(t_1+\Delta t) = m^{-1}F(t_2,r(t_2),v(t_2))$</li>
  <li>$v(t_1+\Delta t) = r(t_1+\frac{1}{2}\Delta t) + \frac{1}{2}a(t_1+\Delta t)\Delta t$</li>
</ol>

<p>这个第三步实际上也用的是近似值，我感觉和CFD中的麦考马克法有些类似。虽然这里是速度，位移，但是同样适用于角度，角速度的情况。</p>

<h3 id="龙格库塔算法">龙格库塔算法</h3>
<p>韦尔莱积分具有兼顾速度和精度的特点，因此在游戏引擎中得到了大量运用。但是如果对于需要精确预测的问题，或许还是需要龙格库塔算法。经典龙格库塔法我就不写了，这里写一下更一般的龙格库塔方法。</p>

<p>令初值问题表述如下。</p>

<script type="math/tex; mode=display">y'=f(t,y),\quad    y(t_{0})=y_{0}</script>

<p>那么
<script type="math/tex">y_{n+1}=y_{n}+h\sum _{i=1}^{s}b_{i}k_{i},</script>
其中<br />
<script type="math/tex">k_{1}=f(t_{n},y_{n}),</script><br />
<script type="math/tex">k_{2}=f(t_{n}+c_{2}h,y_{n}+a_{21}hk_{1}),</script><br />
<script type="math/tex">k_{3}=f(t_{n}+c_{3}h,y_{n}+a_{31}hk_{1}+a_{32}hk_{2}),</script><br />
<script type="math/tex">\vdots</script><br />
<script type="math/tex">k_{s}=f(t_{n}+c_{s}h,y_{n}+a_{s1}hk_{1}+a_{s2}hk_{2}+\cdots +a_{s,s-1}hk_{s-1}).</script><br />
要给定一个特定的方法，必须提供整数$s$（级数），以及系数 $a_{ij}$（对于1 ≤ $j &lt; i$ ≤ s）,$b_i$（对于$i = 1, 2, …, s$）和$c_i$（对于$i = 2, 3, …, s$）。这些数据通常排列在一个助记工具中，称为Butcher tableau（得名自John C. Butcher）：<br />
<img src="http://localhost:4000/assets//blog_images/rk_method.jpg" width="300px" height="200px" />
例如，RK4法可以表示为
<img src="http://localhost:4000/assets//blog_images/rk4.jpg" width="200px" height="200px" /><br />
欧拉法可以表示为：
<img src="http://localhost:4000/assets//blog_images/Euler.jpg" width="50px" height="400px" />
而下面给出的是Prince-Dormand 45系数：
<img src="http://localhost:4000/assets//blog_images/RK_n1.jpg" width="600px" height="400px" />
Runge-Kutta-Fehlberg 56系数：
<img src="http://localhost:4000/assets//blog_images/RK_n2.jpg" width="600px" height="400px" /></p>

<h3 id="四元数">四元数</h3>
<p>\begin{equation}
q = [\mathbf{q}_v\quad q_s]=[\mathbf{a}\sin\frac{\theta}{2}\quad\cos\frac{\theta}{2}]
\end{equation}
其中：</p>
<ul>
  <li>$\mathbf{a}$是旋转轴，模长单位化</li>
  <li>$\frac{\theta}{2}$是旋转半角</li>
</ul>

<p>四元数的共轭四元数是
\begin{equation}
q^{*}=[-\mathbf{q}_v\quad q_s]
\end{equation}
容易证明，当$|q|=1$时，$q^{-1}=q^{*}$</p>

<p>四元数表示向量的旋转：例如将向量$\mathbf{v}$写成四元数$v=[\mathbf{v}\quad 0]=[v_x\quad v_y\quad v_z 0]$，则有
\begin{equation}
v^{\prime}=rotate(q,\mathbf{v}) = qvq^{-1}
\end{equation}
对于刚体，在刚体坐标系下取例如$\mathbf{F_M}=[0\quad 0\quad 1]$，则在惯性系中，
<script type="math/tex">F_w=qF_Mq^{-1}=q[0\quad 0\quad 1\quad 0]q^{-1}</script></p>

<h3 id="刚体的姿态动力学方程及求解算法">刚体的姿态动力学方程及求解算法</h3>
<p>就算一个刚体在没有外力的情况下旋转，在三维旋转动力学中，其角速度矢量$\mathbf{\omega}$可能并不是常亮，转轴会不停地改变方向。以长方体为例，其绕最短或最长轴旋转时，能产生均角速度矢量，而以中间长度的轴旋转，$\mathbf{\omega}$的方向就会改变。<br />
刚体的角动量守恒
\begin{equation}
\mathbf{L}=\mathbf{I\omega(t)}
\end{equation}
而$\mathbf{\omega}$不守恒。<br />
三维旋转不能直接求解$\mathbf{\omega}$，而应该按照如下方式求解：
\begin{equation}
\mathbf{\dot L}(t)=\mathbf{N}(t)
\end{equation}
\begin{equation}
\mathbf{\omega}(t)=\mathbf{I^{-1}L}(t)
\end{equation}
下面两个方程是四元数的方程：
\begin{equation}
\omega(t)=[\omega_x\quad \omega_y\quad \omega_z\quad 0]
\end{equation}
\begin{equation}
\frac{1}{2}\omega(t)q(t)=\dot q(t) 
\end{equation}
$q$是定向四元数，表示刚体的定向，$\omega$是角速度四元数。</p>

<p>而惯性张量的坐标变换则是
\begin{equation}
\mathbf{I^{\prime}=AIA^T}
\end{equation}</p>

<h3 id="齐次坐标">齐次坐标</h3>
<p>如果定义齐次坐标，则平移运算也可以转化为旋转运算：$\mathbf{r}=[r_x\quad r_y\quad r_z\quad 1]$，若在$\mathbf{r}$向量上平移$\mathbf{s}$，则可以表示为 <br />
<script type="math/tex">% <![CDATA[
\begin{equation} \tag{a}
[\mathbf{r}\quad 1]\begin{bmatrix}
\mathbf{I} & \mathbf{0} \\
\mathbf{t} & 1 
\end{bmatrix}
=[(\mathbf{r+t})\quad 1]
\end{equation} %]]></script></p>

<h3 id="别的观点">别的观点</h3>
<p>一个刚体的质量特性包括刚体的质量$m$，质心的位置向量$\mathbf{p}$，以及惯性张量$\mathbf{I}$或者$\mathbf{J}$.如果定义回转张量$\mathbf{G}$满足$\mathbf{J}=m\mathbf{G}$，那么一个刚体的特性可以被如下的$6\times6$矩阵描述：
<script type="math/tex">% <![CDATA[
\begin{equation} \tag{b}
 M = m \begin{bmatrix}
 \mathbf{G} & \mathbf{p_{\times}} \\
 \mathbf{p_{\times}} & \mathbf{I_3}
 \end{bmatrix}
 \end{equation} %]]></script>
类似的，定义关于质心的空间速度矢量$V^C=\begin{bmatrix}\mathbf{\omega}\ \mathbf{V_C}\end{bmatrix}$，就可以类似的定义动量$P^C=M^CV^C$和动能$KE=\frac{1}{2}V^TMV$
这样定义以后，关于空间坐标转换有一些好的性质，不过这些公式较为复杂，MathJax的渲染能力有限，我就不写在这里了。具体可以参见SimTK的文档。</p>

<h2 id="编写程序">编写程序</h2>
<p>对于姿态动力学问题，还是需要求解微分方程，需要用到龙格库塔算法。<br />
定义一个简单的，但以后还可以扩展的刚体类</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">rigidBody</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">rigidBody</span><span class="p">();</span>
    <span class="n">rigidBody</span><span class="p">(</span><span class="kt">double</span> <span class="n">Ix</span><span class="p">,</span> <span class="kt">double</span> <span class="n">Iy</span><span class="p">,</span> <span class="kt">double</span> <span class="n">Iz</span><span class="p">,</span> <span class="n">mat33</span> <span class="o">&amp;</span><span class="n">cosineMat</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">omega</span><span class="p">,</span>
              <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">vec3</span><span class="p">(</span><span class="n">vec3</span> <span class="o">&amp;</span><span class="p">,</span> <span class="n">mat33</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">double</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">mome</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">m_Ix</span><span class="p">(</span><span class="n">Ix</span><span class="p">),</span> <span class="n">m_Iy</span><span class="p">(</span><span class="n">Iy</span><span class="p">),</span> <span class="n">m_Iz</span><span class="p">(</span><span class="n">Iz</span><span class="p">),</span> <span class="n">m_inertia</span><span class="p">(</span><span class="n">mat33</span><span class="o">::</span><span class="n">fromDiag</span><span class="p">(</span><span class="n">Ix</span><span class="p">,</span> <span class="n">Iy</span><span class="p">,</span> <span class="n">Iz</span><span class="p">)),</span>
          <span class="n">m_cosMat</span><span class="p">(</span><span class="n">cosineMat</span><span class="p">),</span> <span class="n">m_omega</span><span class="p">(</span><span class="n">omega</span><span class="p">),</span> <span class="n">m_time</span><span class="p">(</span><span class="mf">.0</span><span class="p">),</span> <span class="n">moment</span><span class="p">(</span><span class="n">mome</span><span class="p">)</span> <span class="p">{}</span>
    <span class="o">~</span><span class="n">rigidBody</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">do_step</span><span class="p">(</span><span class="kt">double</span> <span class="n">dt</span><span class="p">);</span> <span class="c1">// calculate the state after time dt
</span>
    <span class="kt">double</span> <span class="n">getRotKineticEnergy</span><span class="p">();</span>
    <span class="n">vec3</span> <span class="n">getAngularMomentum</span><span class="p">();</span> <span class="c1">// expressed in the inertial frame
</span>    <span class="n">vec3</span> <span class="n">getOmega</span><span class="p">();</span>           <span class="c1">// expressed in the inertial frame
</span>    <span class="n">mat33</span> <span class="n">getInertiaTensor</span><span class="p">();</span>  <span class="c1">// expressed in the inertial frame
</span>    <span class="n">mat33</span> <span class="n">getCosineMat</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>
    <span class="c1">// double m_mass;
</span>    <span class="kt">double</span> <span class="n">m_Ix</span><span class="p">,</span> <span class="n">m_Iy</span><span class="p">,</span> <span class="n">m_Iz</span><span class="p">;</span>
    <span class="n">mat33</span> <span class="n">m_inertia</span><span class="p">;</span> <span class="c1">// expressed in the body frame
</span>    <span class="n">mat33</span> <span class="n">m_cosMat</span><span class="p">;</span>
    <span class="c1">// vec3 m_pos;
</span>    <span class="n">vec3</span> <span class="n">m_omega</span><span class="p">;</span> <span class="c1">// expressed in the body frame
</span>    <span class="c1">// vec3 m_speed;
</span>    <span class="kt">double</span> <span class="n">m_time</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">vec3</span><span class="p">(</span><span class="n">vec3</span> <span class="o">&amp;</span><span class="p">,</span> <span class="n">mat33</span> <span class="o">&amp;</span><span class="p">,</span> <span class="kt">double</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">moment</span><span class="p">;</span>
    <span class="c1">// suppose M=M(omega,cosineMatrix,t), expressed in the body frame
</span>    <span class="c1">// vec3 force(parameters);
</span>
    <span class="kt">void</span> <span class="n">func</span><span class="p">(</span><span class="kt">double</span> <span class="n">t</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">omega</span><span class="p">,</span> <span class="n">mat33</span> <span class="o">&amp;</span><span class="n">cosMat</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">resVec</span><span class="p">,</span>
              <span class="n">mat33</span> <span class="o">&amp;</span><span class="n">resMat</span><span class="p">);</span>
    <span class="c1">// get the diff format of the moment dynamics
</span><span class="p">};</span>


</code></pre></div></div>
<p>代码中都有具体的注释解释。我实现的动力学的时间步进代码如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">rigidBody</span><span class="o">::</span><span class="n">func</span><span class="p">(</span><span class="kt">double</span> <span class="n">t</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">vec</span><span class="p">,</span> <span class="n">mat33</span> <span class="o">&amp;</span><span class="n">cosMat</span><span class="p">,</span> <span class="n">vec3</span> <span class="o">&amp;</span><span class="n">resVec</span><span class="p">,</span>
                     <span class="n">mat33</span> <span class="o">&amp;</span><span class="n">resMat</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vec3</span> <span class="n">M</span> <span class="o">=</span> <span class="n">moment</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="n">cosMat</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">dwx</span> <span class="o">=</span>
        <span class="n">M</span><span class="p">.</span><span class="n">getX</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Ix</span> <span class="o">+</span> <span class="n">vec</span><span class="p">.</span><span class="n">getY</span><span class="p">()</span> <span class="o">*</span> <span class="n">vec</span><span class="p">.</span><span class="n">getZ</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Ix</span> <span class="o">*</span> <span class="p">(</span><span class="n">m_Iz</span> <span class="o">-</span> <span class="n">m_Iy</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">dwy</span> <span class="o">=</span>
        <span class="n">M</span><span class="p">.</span><span class="n">getY</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Iy</span> <span class="o">+</span> <span class="n">vec</span><span class="p">.</span><span class="n">getX</span><span class="p">()</span> <span class="o">*</span> <span class="n">vec</span><span class="p">.</span><span class="n">getZ</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Iy</span> <span class="o">*</span> <span class="p">(</span><span class="n">m_Ix</span> <span class="o">-</span> <span class="n">m_Iz</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">dwz</span> <span class="o">=</span>
        <span class="n">M</span><span class="p">.</span><span class="n">getZ</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Iz</span> <span class="o">+</span> <span class="n">vec</span><span class="p">.</span><span class="n">getX</span><span class="p">()</span> <span class="o">*</span> <span class="n">vec</span><span class="p">.</span><span class="n">getY</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_Iz</span> <span class="o">*</span> <span class="p">(</span><span class="n">m_Iy</span> <span class="o">-</span> <span class="n">m_Ix</span><span class="p">);</span>
    <span class="n">resVec</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="n">dwx</span><span class="p">,</span> <span class="n">dwy</span><span class="p">,</span> <span class="n">dwz</span><span class="p">);</span>

    <span class="n">resMat</span> <span class="o">=</span> <span class="n">crossProductMat3</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span> <span class="o">*</span> <span class="n">cosMat</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">rigidBody</span><span class="o">::</span><span class="n">do_step</span><span class="p">(</span><span class="kt">double</span> <span class="n">dt</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// using RK4 algorithm
</span>
    <span class="k">static</span> <span class="n">vec3</span> <span class="n">vk1</span><span class="p">,</span> <span class="n">vk2</span><span class="p">,</span> <span class="n">vk3</span><span class="p">,</span> <span class="n">vk4</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">mat33</span> <span class="n">mk1</span><span class="p">,</span> <span class="n">mk2</span><span class="p">,</span> <span class="n">mk3</span><span class="p">,</span> <span class="n">mk4</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">vec3</span> <span class="n">resV</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">mat33</span> <span class="n">resM</span><span class="p">;</span>

    <span class="kt">double</span> <span class="n">t</span> <span class="o">=</span> <span class="n">m_time</span><span class="p">;</span>

    <span class="n">func</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">m_omega</span><span class="p">,</span> <span class="n">m_cosMat</span><span class="p">,</span> <span class="n">vk1</span><span class="p">,</span> <span class="n">mk1</span><span class="p">);</span>
    <span class="n">mk1</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">vk1</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">resV</span> <span class="o">=</span> <span class="n">m_omega</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">vk1</span><span class="p">;</span>
    <span class="n">resM</span> <span class="o">=</span> <span class="n">m_cosMat</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">mk1</span><span class="p">;</span>

    <span class="n">func</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">dt</span><span class="p">,</span> <span class="n">resV</span><span class="p">,</span> <span class="n">resM</span><span class="p">,</span> <span class="n">vk2</span><span class="p">,</span> <span class="n">mk2</span><span class="p">);</span>
    <span class="n">mk2</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">vk2</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">resV</span> <span class="o">=</span> <span class="n">m_omega</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">vk2</span><span class="p">;</span>
    <span class="n">resM</span> <span class="o">=</span> <span class="n">m_cosMat</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">mk2</span><span class="p">;</span>

    <span class="n">func</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mf">.5</span> <span class="o">*</span> <span class="n">dt</span><span class="p">,</span> <span class="n">resV</span><span class="p">,</span> <span class="n">resM</span><span class="p">,</span> <span class="n">vk3</span><span class="p">,</span> <span class="n">mk3</span><span class="p">);</span>
    <span class="n">mk3</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">vk3</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">resV</span> <span class="o">=</span> <span class="n">m_omega</span> <span class="o">+</span> <span class="n">vk3</span><span class="p">;</span>
    <span class="n">resM</span> <span class="o">=</span> <span class="n">m_cosMat</span> <span class="o">+</span> <span class="n">mk3</span><span class="p">;</span>

    <span class="n">func</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="n">dt</span><span class="p">,</span> <span class="n">resV</span><span class="p">,</span> <span class="n">resM</span><span class="p">,</span> <span class="n">vk4</span><span class="p">,</span> <span class="n">mk4</span><span class="p">);</span>
    <span class="n">mk4</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">vk4</span> <span class="o">*=</span> <span class="n">dt</span><span class="p">;</span>

    <span class="n">m_time</span> <span class="o">+=</span> <span class="n">dt</span><span class="p">;</span>
    <span class="n">m_omega</span> <span class="o">+=</span> <span class="p">(</span><span class="mf">.16666666666666666666666666666666666666666666666666666666666</span> <span class="o">*</span>
                <span class="p">(</span><span class="n">vk1</span> <span class="o">+</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">vk2</span> <span class="o">+</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">vk3</span> <span class="o">+</span> <span class="n">vk4</span><span class="p">));</span>
    <span class="n">m_cosMat</span> <span class="o">+=</span> <span class="p">(</span><span class="mf">.16666666666666666666666666666666666666666666666666666666666</span> <span class="o">*</span>
                 <span class="p">(</span><span class="n">mk1</span> <span class="o">+</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">mk2</span> <span class="o">+</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">mk3</span> <span class="o">+</span> <span class="n">mk4</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后需要绘制3维的动画，这一点也很麻烦。首先需要写一个sceneModifier来显示三维模型：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SceneModifier</span><span class="o">::</span><span class="n">SceneModifier</span><span class="p">(</span><span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QEntity</span> <span class="o">*</span><span class="n">rootEntity</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">m_rootEntity</span><span class="p">(</span><span class="n">rootEntity</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Cylinder shape data
</span>    <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QCylinderMesh</span> <span class="o">*</span><span class="n">cylinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QCylinderMesh</span><span class="p">();</span>
    <span class="n">cylinder</span><span class="o">-&gt;</span><span class="n">setRadius</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">cylinder</span><span class="o">-&gt;</span><span class="n">setLength</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">cylinder</span><span class="o">-&gt;</span><span class="n">setRings</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="n">cylinder</span><span class="o">-&gt;</span><span class="n">setSlices</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>

    <span class="c1">// CylinderMesh Transform
</span>    <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">cylinderTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span><span class="p">();</span>
    <span class="n">cylinderTransform</span><span class="o">-&gt;</span><span class="n">setScale</span><span class="p">(</span><span class="mf">1.5</span><span class="n">f</span><span class="p">);</span>
    <span class="n">cylinderTransform</span><span class="o">-&gt;</span><span class="n">setRotation</span><span class="p">(</span>
        <span class="n">QQuaternion</span><span class="o">::</span><span class="n">fromAxisAndAngle</span><span class="p">(</span><span class="n">QVector3D</span><span class="p">(</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">),</span> <span class="mf">20.0</span><span class="n">f</span><span class="p">));</span>
    <span class="n">cylinderTransform</span><span class="o">-&gt;</span><span class="n">setTranslation</span><span class="p">(</span><span class="n">QVector3D</span><span class="p">(</span><span class="o">-</span><span class="mf">5.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.5</span><span class="p">));</span>

    <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QPhongMaterial</span> <span class="o">*</span><span class="n">cylinderMaterial</span> <span class="o">=</span>
        <span class="k">new</span> <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QPhongMaterial</span><span class="p">();</span>
    <span class="n">cylinderMaterial</span><span class="o">-&gt;</span><span class="n">setDiffuse</span><span class="p">(</span><span class="n">QColor</span><span class="p">(</span><span class="n">QRgb</span><span class="p">(</span><span class="mh">0x928327</span><span class="p">)));</span>

    <span class="c1">// Cylinder
</span>    <span class="n">m_satEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QEntity</span><span class="p">(</span><span class="n">m_rootEntity</span><span class="p">);</span>
    <span class="n">m_satEntity</span><span class="o">-&gt;</span><span class="n">addComponent</span><span class="p">(</span><span class="n">cylinder</span><span class="p">);</span>
    <span class="n">m_satEntity</span><span class="o">-&gt;</span><span class="n">addComponent</span><span class="p">(</span><span class="n">cylinderMaterial</span><span class="p">);</span>
    <span class="n">m_satEntity</span><span class="o">-&gt;</span><span class="n">addComponent</span><span class="p">(</span><span class="n">cylinderTransform</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这个例子是从Qt3D的一个example改过来的，Qt3D可以让我们更加方便地绘制3D模型。具体的调用方法很简单，其中光线、材质渲染与这里讨论的主题关系不大，可以不用管。主要是需要对动画涉及的刚体的transform需要制作动画。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">SceneModifier</span><span class="o">::</span><span class="n">setSome</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="n">m_satEntity</span><span class="p">;</span>
    <span class="n">m_satEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QEntity</span><span class="p">(</span><span class="n">m_rootEntity</span><span class="p">);</span>

    <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QPhongMaterial</span> <span class="o">*</span><span class="n">satMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DExtras</span><span class="o">::</span><span class="n">QPhongMaterial</span><span class="p">();</span>
    <span class="n">satMaterial</span><span class="o">-&gt;</span><span class="n">setDiffuse</span><span class="p">(</span><span class="n">QColor</span><span class="p">(</span><span class="n">QRgb</span><span class="p">(</span><span class="mh">0x928327</span><span class="p">)));</span>

    <span class="c1">// satMesh Transform
</span>    <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">satTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span><span class="p">();</span>
    <span class="n">satTransform</span><span class="o">-&gt;</span><span class="n">setScale</span><span class="p">(</span><span class="mf">1.5</span><span class="n">f</span><span class="p">);</span>

    <span class="n">satTransform</span><span class="o">-&gt;</span><span class="n">setTranslation</span><span class="p">(</span><span class="n">QVector3D</span><span class="p">(</span><span class="o">-</span><span class="mf">5.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">4.0</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.5</span><span class="p">));</span>
    <span class="n">TransformController</span> <span class="o">*</span><span class="n">ctrl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TransformController</span><span class="p">(</span><span class="n">satTransform</span><span class="p">);</span>
    <span class="n">ctrl</span><span class="o">-&gt;</span><span class="n">setType</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>
    <span class="n">ctrl</span><span class="o">-&gt;</span><span class="n">setTarget</span><span class="p">(</span><span class="n">satTransform</span><span class="p">);</span>
    <span class="n">ctrl</span><span class="o">-&gt;</span><span class="n">setTime</span><span class="p">(</span><span class="mf">.0</span><span class="n">f</span><span class="p">);</span>

    <span class="n">QPropertyAnimation</span> <span class="o">*</span><span class="n">animation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QPropertyAnimation</span><span class="p">(</span><span class="n">satTransform</span><span class="p">);</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setTargetObject</span><span class="p">(</span><span class="n">ctrl</span><span class="p">);</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setPropertyName</span><span class="p">(</span><span class="s">"time"</span><span class="p">);</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDuration</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setStartValue</span><span class="p">(</span><span class="n">QVariant</span><span class="o">::</span><span class="n">fromValue</span><span class="p">(</span><span class="mf">.0</span><span class="p">));</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setEndValue</span><span class="p">(</span><span class="n">QVariant</span><span class="o">::</span><span class="n">fromValue</span><span class="p">(</span><span class="mi">800000000</span><span class="p">));</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setLoopCount</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">();</span>

    <span class="c1">// sat
</span>    <span class="n">m_satEntity</span><span class="o">-&gt;</span><span class="n">addComponent</span><span class="p">(</span><span class="n">satTransform</span><span class="p">);</span>
    <span class="n">m_satEntity</span><span class="o">-&gt;</span><span class="n">addComponent</span><span class="p">(</span><span class="n">satMaterial</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>
<p>因此我们需要定义一个TransformController的类：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformController</span> <span class="o">:</span> <span class="k">public</span> <span class="n">QObject</span> <span class="p">{</span>
    <span class="n">Q_OBJECT</span>
    <span class="n">Q_PROPERTY</span><span class="p">(</span><span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">target</span> <span class="n">READ</span> <span class="n">target</span> <span class="n">WRITE</span> <span class="n">setTarget</span> <span class="n">NOTIFY</span>
                   <span class="n">targetChanged</span><span class="p">)</span>
    <span class="n">Q_PROPERTY</span><span class="p">(</span><span class="kt">float</span> <span class="n">time</span> <span class="n">READ</span> <span class="n">time</span> <span class="n">WRITE</span> <span class="n">setTime</span> <span class="n">NOTIFY</span> <span class="n">timeChanged</span><span class="p">)</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">TransformController</span><span class="p">(</span><span class="n">QObject</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>

    <span class="kt">void</span> <span class="n">setTarget</span><span class="p">(</span><span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">target</span><span class="p">);</span>
    <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">target</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">setTime</span><span class="p">(</span><span class="kt">float</span> <span class="n">time</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">time</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>

<span class="n">signals</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">targetChanged</span><span class="p">();</span>
    <span class="kt">void</span> <span class="n">timeChanged</span><span class="p">();</span>

<span class="k">protected</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">updateQuat</span><span class="p">();</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">m_target</span><span class="p">;</span>
    <span class="n">QQuaternion</span> <span class="n">m_quat</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">m_time</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">dt</span><span class="p">;</span>

    <span class="n">rigidBody</span> <span class="n">m_body</span><span class="p">;</span>

    <span class="cm">/*mat33 tensor;
    vec3 omega;
    vec3 angularM;
    mat33 cosineMat;*/</span>
<span class="p">};</span>
</code></pre></div></div>
<p>TransformController中比较关键的几个代码如下：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">TransformController</span><span class="o">::</span><span class="n">setTarget</span><span class="p">(</span><span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">m_target</span> <span class="o">!=</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">m_target</span> <span class="o">=</span> <span class="n">target</span><span class="p">;</span>
        <span class="n">emit</span> <span class="n">targetChanged</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">Qt3DCore</span><span class="o">::</span><span class="n">QTransform</span> <span class="o">*</span><span class="n">TransformController</span><span class="o">::</span><span class="n">target</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_target</span><span class="p">;</span> <span class="p">}</span>

<span class="kt">void</span> <span class="n">TransformController</span><span class="o">::</span><span class="n">setTime</span><span class="p">(</span><span class="kt">float</span> <span class="n">time</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">qFuzzyCompare</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">m_time</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">dt</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span> <span class="o">-</span> <span class="n">m_time</span><span class="p">)</span> <span class="o">/</span> <span class="mf">12000000.0</span><span class="p">;</span> <span class="c1">// 1000.0;
</span>        <span class="c1">// dt=.01;
</span>        <span class="n">m_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">;</span>
        <span class="n">updateQuat</span><span class="p">();</span>
        <span class="n">emit</span> <span class="n">timeChanged</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">float</span> <span class="n">TransformController</span><span class="o">::</span><span class="n">time</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">m_time</span><span class="p">;</span> <span class="p">}</span>

<span class="kt">void</span> <span class="n">TransformController</span><span class="o">::</span><span class="n">updateQuat</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">m_body</span><span class="p">.</span><span class="n">do_step</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span>
    <span class="n">m_quat</span> <span class="o">=</span> <span class="n">fromMat33</span><span class="p">(</span><span class="n">m_body</span><span class="p">.</span><span class="n">getCosineMat</span><span class="p">());</span>
    <span class="n">m_target</span><span class="o">-&gt;</span><span class="n">setRotation</span><span class="p">(</span><span class="n">m_quat</span><span class="p">);</span>

    <span class="k">static</span> <span class="n">vec3</span> <span class="n">am</span><span class="p">,</span> <span class="n">omega</span><span class="p">,</span> <span class="n">z_</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">vec3</span> <span class="n">z</span><span class="p">(</span><span class="mf">.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">.0</span><span class="p">);</span>
    <span class="n">z_</span> <span class="o">=</span> <span class="n">m_body</span><span class="p">.</span><span class="n">getCosineMat</span><span class="p">().</span><span class="n">transpose</span><span class="p">()</span> <span class="o">*</span> <span class="n">z</span><span class="p">;</span>
    <span class="c1">// express the vector in the inertial frame
</span>    <span class="n">am</span> <span class="o">=</span> <span class="n">m_body</span><span class="p">.</span><span class="n">getAngularMomentum</span><span class="p">();</span>

    <span class="c1">// omega=m_body.getOmega();
</span>    <span class="n">omega</span> <span class="o">=</span> <span class="n">m_body</span><span class="p">.</span><span class="n">m_omega</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">T</span> <span class="o">=</span> <span class="n">m_body</span><span class="p">.</span><span class="n">getRotKineticEnergy</span><span class="p">(),</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">angle</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">z_</span><span class="p">)</span> <span class="o">*</span> <span class="n">degPerRad</span><span class="p">;</span>
    <span class="c1">// theta is called the nutation angle
</span><span class="p">}</span>
</code></pre></div></div>
<p>由于TransformController的类定义有这样一条语句：<code class="highlighter-rouge">Q_PROPERTY(float time READ time WRITE setTime NOTIFY timeChanged)</code>,因此如果时间变化，就会调用setTime函数，setTime函数会调用updateQuat函数，在updateQuat函数中进行动力学的时间步进求解，而m_target就保存的是刚体的旋转四元数信息，更新之后就会用新的旋转四元数渲染三维模型。</p>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 刚体动力学 </tag>
        
          <tag> 天文 </tag>
        
          <tag> 数值算法 </tag>
        
          <tag> Qt </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[红警坦克作战效能模拟平台]]></title>
      <url>/programming/2015/11/02/tank/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">
  		MathJax.Hub.Config({
            tex2jax: {
                inlineMath: [['$','$'], ['\\(','\\)']]
            },
  			TeX: { 
                equationNumbers: {  
                    autoNumber: "AMS"  
                },
     		    extensions: ["AMSmath.js"]
            },
            CommonHTML: { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            "HTML-CSS": { 
                linebreaks: { 
                    automatic: true 
                } 
            },
            SVG: { 
                linebreaks: { 
                    automatic: true 
                } 
            }
  		});
		</script>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p><strong>编写程序使用蒙特卡洛方法以模拟计算游戏《红色警戒2》中坦克集群间交战的所有可能交换比和双方的获胜概率。通过计算，得到了一些可以修正兰彻斯特方程的结果，对指挥官的战前分析决策具有实际意义。</strong></p>

<hr />
<p><strong>本文公式较多，在浏览器中将会花较长时间用于渲染公式。</strong></p>

<hr />

<h2 id="兰彻斯特方程">兰彻斯特方程</h2>
<p>该理论于一战前期的1914年，由英国人弗雷德里克·威廉·兰彻斯特首先创立。
它采用数学演绎战术原则，将数学与军事战术学结合起来。兰彻斯特最先提出了一个关于空战战术的尝试性数学模型，描述作战双方兵力变化过程的数学微分方程。
这个理论属于确定性数学模型，一般认为可宏观地描述双方战斗的毁伤过程。常用于优选步兵作战兵力的投放、西方研究战争的定量、科学的常用方法。<br />
在近代战斗条件下，红、蓝两军交战，双方各自装备同类武器，相互通视，并在武器射程范围内进行直接瞄准射击；双方每一战斗单位射击对方每一战斗单位的机会大致相同。将双方在战斗中尚存的战斗单位数作为连续的状态变量，以m(t)、n(t)表示在战斗开始后t时刻蓝方、红方在战斗中尚存的作战单位数，可用下列微分方程组来描述战斗过程中双方兵力随时间的损耗关系：
\begin{equation}
\frac{dm(t)}{dn(t)} = \frac{-\beta{n(t)}}{-\alpha{n(t)}}
\end{equation}
式中α、β分别为蓝方、红方在单位时间内每一战斗单位毁伤对方战斗单位的数目， 简称为蓝方、 红方的毁伤率系数。<br />
这是一个连续的方程，它的通解形式、它的实际意义，例如平方率、线性率什么的在网上均有大量论述，这里不再陈述。</p>

<h2 id="红警的伤害机制">红警的伤害机制</h2>
<p>《红色警戒》是一款经典的RTS游戏。我们可以研究红警中的伤害机制，并编写交战模拟平台的程序，从而验证兰彻斯特方程，为交战提供策略。红警作战主要以坦克战为主，因此我们这里的研究对象也就是坦克了。<br />
红警里面有一个Rulesmd.ini文件，用来定义单位的各种属性。红警中坦克分为轻甲、中甲和重甲。武器对对方的伤害是<strong><em>杀伤力乘上对这种装甲的伤害系数</em></strong>。坦克在受到攻击后，血条便减少相应的伤害值。此外，我们在模拟平台中还要体现装弹间隔时间。红警里面部分单位还有自动回血能力，例如天启坦克、基洛夫空艇、武装采矿车等。这里以对战中的头号杀器：犀牛坦克为例，列举这些属性的值：</p>
<ul>
  <li>制造成本：900</li>
  <li>杀伤力：90</li>
  <li>对轻甲、中甲、重甲的伤害分别为：75%，100%，100%</li>
  <li>体力：400</li>
  <li>装弹间隔时间：65</li>
  <li>不具有自动回血能力</li>
</ul>

<p>编写如下的代码：</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">TANK</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">atk</span><span class="p">;</span>  <span class="c1">//攻击力
</span>    <span class="kt">int</span> <span class="n">target</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">time</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">once</span><span class="p">;</span>  <span class="c1">//判断临死一击
</span>    <span class="kt">int</span> <span class="n">cover</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">armor</span><span class="p">;</span>  <span class="c1">//1、 轻甲 2、中甲 3、重甲
</span>    <span class="kt">int</span> <span class="n">ps</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="p">};</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">TANK</span> <span class="n">tank</span><span class="p">;</span>
</code></pre></div></div>

<p>剩下的就是编写程序模拟作战过程了。以一个循环的计数器作为时间线，坦克在最初随意地寻找攻击目标，在锁定目标之后便每间隔一次装填时间完成一次对目标的进攻（以及每经过一次回血周期便恢复一定的血量）。在红警中可能会出现许多个坦克攻击同一辆坦克，导致坦克在毁灭的时刻遭受了远远大于其残余血量的伤害，这个在模拟中也要得到体现。因此，临死一击以及临死所受伤害是一个相对不太好处理的地方。程序里把常见的八种坦克的数据收录进去：灰熊坦克、犀牛坦克、天启坦克、幻影坦克、光棱坦克、遥控坦克、坦克杀手、武装采矿车，用户不用手动输入坦克的属性。根据蒙特卡洛方法的思想，对作战过程总共进行1500次模拟。</p>

<p>程序运行的截图如下所示：
<img src="http://localhost:4000/assets//blog_images/tank1.png" width="450px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/tank2.png" width="450px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/tank3.png" width="450px" height="200px" />
<img src="http://localhost:4000/assets//blog_images/tank4.png" width="450px" height="200px" /><br />
又比如，模拟结果显示，在理想条件下，30辆犀牛坦克（红军）与25辆坦克杀手（蓝军）交战的结果为</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>交换比：  
最高1.25  
最低0.33  
平均0.64  
价值交换比：0.64  
胜率：11.67%  
零伤亡概率：0.00%  
</code></pre></div></div>
<p>在理想条件下，40辆犀牛坦克（红军）与20辆坦克杀手（蓝军）交战的结果为</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>交换比：  
最高20.00  
最低1.82  
平均3.27  
价值交换比：3.27  
胜率：100.00%  
零伤亡概率：0.00%  
</code></pre></div></div>

<h2 id="总结">总结</h2>
<ul>
  <li>可以看出，连续的兰彻斯特方程对于小数目的离散作战不能真实预测。若将5辆灰熊坦克与3辆犀牛坦克，则5辆灰熊坦克仅能勉强战胜3辆犀牛坦克。而经过实际的模拟，5辆灰熊坦克与3辆犀牛坦克交战，灰熊坦克胜率为100%，且平均只损失一辆坦克1.56辆坦克，足可见两种模型的差距</li>
  <li>若双方是相同数目的同等坦克，则双方胜率均会低于50%。如若1辆坦克对抗1辆同型号坦克，同时开火，则双方都不会获胜（双方坦克同时被摧毁）。若双方各两辆坦克对抗，则双方胜率均为26%。双方十辆坦克对抗，任一方胜率为40%.若双方45辆坦克对抗，则任一方胜率为48%.由此可见，坦克的数目越大，可能出现的情况就越多，出现平局的可能性就越小</li>
  <li>许多人认为成群的光棱海无法击破，实际上单一的光棱坦克没有别的坦克配合的话很难与犀牛坦克群的阵型冲击、天启坦克的重火力重护甲、矿车的重护甲高射速抗衡。尽管光棱坦克射程极远，但没有幻影坦克配合，无法直接正面参与坦克战</li>
  <li>一般而言，人们常常喜欢集中优势兵力攻打某个单位，这种战术在特殊情况下是错误的。例如天启坦克群与别的坦克群交战，天启坦克依靠重火力有很大的胜算，但是如果所有天启坦克集中火力攻击一辆坦克，这样反而浪费炮弹</li>
  <li>这里没有考虑兵种配合的问题。如在坦克阵中假如与之配合的步兵（尤其是反坦克步兵），则既能吸引敌方火力向步兵开火，又能给以敌方杀伤</li>
  <li>作为一个资深红警玩家<strong><em>（2017年更新，早就不玩了）</em></strong>，也知道这个模拟平台还是有不完善的地方。在真实的红警坦克战里，如果考虑操作，那么坦克攻击范围、移动速度、炮塔转动角度、是否能够移动攻击都会造成非常大的影响，更不用提什么分兵战术、迂回战术等。而且这里没有考虑到光棱坦克的溅射伤害和幻影坦克的隐蔽性，还有作战单位升级的情况</li>
  <li>事实上，对于真正的坦克战而言，机动性、射程、移动攻击能力、阵型、布坦协同都是十分重要的，而我的程序模拟的是定点攻击，这实际上与火炮别无两样。坦克需要发挥其阵型冲锋、冲锋打散阵型、移动攻击等机动性优势，例如犀牛坦克常常强势冲锋等战术，这是程序无法模拟的。因此，程序仅仅能提供一个基本的战术参考，这替代不了指挥官的战术决策</li>
  <li>2017年更新：现在看自己以前写的代码感觉是真的丑陋，不过这也说明了自己的代码水平还是有一丢丢进步的:grin:</li>
</ul>
]]></content>
      <categories>
        
          <category> Programming </category>
        
      </categories>
      <tags>
        
          <tag> 兰彻斯特方程 </tag>
        
          <tag> 蒙特卡洛方法 </tag>
        
          <tag> C语言 </tag>
        
          <tag> 作战效能模拟 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Download this Theme]]></title>
      <url>/2015/06/24/download-this-theme/</url>
      <content type="html"><![CDATA[<p><strong><em>Fork</em></strong> or <strong><em>download</em></strong> the theme <a href="https://github.com/Jackpon/Jackpon.github.io">here on GitHub</a>.</p>
]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
